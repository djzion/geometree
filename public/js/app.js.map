{"version":3,"file":"public/js/app.js","sources":["app/scripts/app.coffee","app/scripts/models/channel.coffee","app/scripts/models/channels.coffee","app/scripts/views/channel.coffee","app/scripts/views/visuals.2d.coffee","app/scripts/views/visuals.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArGA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;;A","sourcesContent":["var App, Channel, ChannelView, Channels, Visuals, app, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChannel = require('scripts/models/channel');\n\nChannels = require('scripts/models/channels');\n\nChannelView = require('scripts/views/channel');\n\nVisuals = require('scripts/views/visuals.2d');\n\nApp = (function(_super) {\n  __extends(App, _super);\n\n  function App() {\n    _ref = App.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  App.prototype.init = function() {\n    var audio, dancer, onTick,\n      _this = this;\n    this.dancer = dancer = new Dancer();\n    audio = document.getElementById('audio');\n    this.channels = new Channels([], {\n      app: this\n    });\n    this.channels.each(function(channel) {\n      channel.view = new ChannelView({\n        model: channel\n      });\n      return $('#channels').append(channel.view.render().$el);\n    });\n    this.load();\n    this.visuals = new Visuals({\n      model: this\n    });\n    this.visuals.render();\n    onTick = function() {\n      _this.visuals.redraw();\n      return window.requestAnimationFrame(onTick);\n    };\n    window.requestAnimationFrame(onTick);\n    dancer.load(audio);\n    return dancer.play();\n  };\n\n  App.prototype[\"new\"] = function() {\n    return this.channels.reset([\n      new Channel({\n        name: 'kick'\n      }), new Channel({\n        name: 'bass',\n        threshold: 0.01,\n        frequency: 30\n      }), new Channel({\n        name: 'snare',\n        threshold: 0.005,\n        frequency: 200\n      }), new Channel({\n        name: 'hat',\n        threshold: 0.002,\n        frequency: 400\n      }), new Channel({\n        name: 'treble',\n        threshold: 0.001,\n        frequency: 500\n      })\n    ]);\n  };\n\n  App.prototype.save = function() {\n    return this.channels.each(function(channel) {\n      return channel.save();\n    });\n  };\n\n  App.prototype.load = function() {\n    var _this = this;\n    return this.channels.fetch().then(function() {\n      return _this.channels.each(function(channel) {\n        channel.view = new ChannelView({\n          model: channel\n        });\n        return $('#channels').append(channel.view.render().$el);\n      });\n    });\n  };\n\n  return App;\n\n})(Backbone.Model);\n\napp = new App;\n\njQuery(function() {\n  return app.init();\n});\n\nmodule.exports = app;\n","var Channel, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChannel = (function(_super) {\n  __extends(Channel, _super);\n\n  function Channel() {\n    _ref = Channel.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Channel.prototype.defaults = function() {\n    return {\n      threshold: 0.3,\n      frequency: 0,\n      frequencyRange: 10\n    };\n  };\n\n  Channel.prototype.initialize = function(attrs, options) {\n    var _this = this;\n    this.options = options != null ? options : {};\n    this.app = this.collection.options.app;\n    this.kick = this.app.dancer.createKick({\n      onKick: _.bind(this.onKick, this),\n      offKick: _.bind(this.offKick, this)\n    });\n    this.kick.on();\n    this.on('change:threshold', function() {\n      return _this.kick.threshold = _this.get('threshold');\n    });\n    this.on('change:frequency change:frequencyRange', function() {\n      return _this.kick.frequency = [_this.get('frequency'), _this.get('frequency') + _this.get('frequencyRange')];\n    });\n    this.trigger('change:threshold');\n    return this.trigger('change:frequency');\n  };\n\n  Channel.prototype.onKick = function(mag) {\n    this.trigger('kick:on', mag);\n    return this.app.trigger(\"note:on:\" + (this.get('name')), mag);\n  };\n\n  Channel.prototype.offKick = function(mag) {\n    this.trigger('kick:off', mag);\n    return this.app.trigger(\"note:off:\" + (this.get('name')), mag);\n  };\n\n  return Channel;\n\n})(Backbone.Model);\n\nmodule.exports = Channel;\n","var Channel, Channels, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChannel = require('./channel');\n\nChannels = (function(_super) {\n  __extends(Channels, _super);\n\n  function Channels() {\n    _ref = Channels.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Channels.prototype.model = Channel;\n\n  Channels.prototype.localStorage = new Backbone.LocalStorage(\"Channels\");\n\n  Channels.prototype.initialize = function(models, options) {\n    this.options = options;\n  };\n\n  return Channels;\n\n})(Backbone.Collection);\n\nmodule.exports = Channels;\n","var ChannelView, template, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\ntemplate = require('templates/channel');\n\nChannelView = (function(_super) {\n  __extends(ChannelView, _super);\n\n  function ChannelView() {\n    _ref = ChannelView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  ChannelView.prototype.template = template;\n\n  ChannelView.prototype.events = {\n    'change .threshold': function() {\n      this.model.set('threshold', parseFloat(this.$('.threshold').val()));\n      return this.$(\"[data-value-for='threshold']\").val(this.model.get('threshold'));\n    },\n    'change [data-value-for=\"threshold\"]': function() {\n      this.model.set('threshold', parseFloat(this.$(\"[data-value-for='threshold']\").val()));\n      return this.$('.threshold').val(this.model.get('threshold'));\n    },\n    'change .frequency': function() {\n      this.model.set('frequency', parseFloat(this.$('.frequency').val()));\n      return this.$(\"[data-value-for='frequency']\").val(this.model.get('frequency'));\n    },\n    'change [data-value-for=\"frequency\"]': function() {\n      this.model.set('frequency', parseFloat(this.$(\"[data-value-for='frequency']\").val()));\n      return this.$('.frequency').val(this.model.get('frequency'));\n    },\n    'change .frequencyRange': function() {\n      this.model.set('frequencyRange', parseFloat(this.$('.frequencyRange').val()));\n      return this.$(\"[data-value-for='frequencyRange']\").val(this.model.get('frequencyRange'));\n    },\n    'change [data-value-for=\"frequencyRange\"]': function() {\n      this.model.set('frequencyRange', parseFloat(this.$(\"[data-value-for='frequencyRange']\").val()));\n      return this.$('.frequencyRange').val(this.model.get('frequencyRange'));\n    },\n    'change [data-value-for=\"name\"]': function(evt) {\n      return this.model.set('name', $(evt.currentTarget).val());\n    }\n  };\n\n  ChannelView.prototype.initialize = function(options) {\n    if (options == null) {\n      options = {};\n    }\n    this.listenTo(this.model, 'kick:on', this.onKick);\n    return this.listenTo(this.model, 'kick:off', this.offKick);\n  };\n\n  ChannelView.prototype.render = function() {\n    this.setElement($(this.template(this.model.toJSON())));\n    return this;\n  };\n\n  ChannelView.prototype.onKick = function(mag) {\n    return this.$el.addClass('on');\n  };\n\n  ChannelView.prototype.offKick = function(mag) {\n    return this.$el.removeClass('on');\n  };\n\n  return ChannelView;\n\n})(Backbone.View);\n\nmodule.exports = ChannelView;\n","var HEIGHT, Visuals2D, WIDTH, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nWIDTH = 640;\n\nHEIGHT = 480;\n\nVisuals2D = (function(_super) {\n  __extends(Visuals2D, _super);\n\n  function Visuals2D() {\n    _ref = Visuals2D.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Visuals2D.prototype.el = '#visuals';\n\n  Visuals2D.prototype.sprites = [];\n\n  Visuals2D.prototype.initialize = function() {\n    var _this = this;\n    this.renderer = PIXI.autoDetectRenderer(WIDTH, HEIGHT);\n    this.stage = new PIXI.Stage();\n    return this.model.on('note:on:kick', function(mag) {\n      var sprite;\n      sprite = _this.addSprite();\n      sprite.x *= mag;\n      return sprite.y += mag;\n    });\n  };\n\n  Visuals2D.prototype.initGraphics = function() {\n    this.graphics = new PIXI.Graphics();\n    this.graphics.lineStyle(10, 0xffd900, 1);\n    this.stage.addChild(this.graphics);\n    this.graphics.beginFill(0xFF700B, 1);\n    return this.graphics.drawRect(this.x, 10, 100, 100);\n  };\n\n  Visuals2D.prototype.addSprite = function() {\n    var sprite;\n    sprite = PIXI.Sprite.fromImage('/img/quartz.jpg');\n    sprite.position.x = Math.random() * WIDTH;\n    sprite.position.y = Math.random() * HEIGHT;\n    sprite.width = 100;\n    sprite.height = 100;\n    this.stage.addChild(sprite);\n    return this.sprites.push(sprite);\n  };\n\n  Visuals2D.prototype.updateSprites = function() {\n    var sprite, _i, _len, _ref1, _results;\n    _ref1 = this.sprites;\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      sprite = _ref1[_i];\n      _results.push(sprite.alpha *= 0.99);\n    }\n    return _results;\n  };\n\n  Visuals2D.prototype.render = function() {\n    return this.$el.append(this.renderer.view);\n  };\n\n  Visuals2D.prototype.redraw = function() {\n    this.updateSprites();\n    return this.renderer.render(this.stage);\n  };\n\n  return Visuals2D;\n\n})(Backbone.View);\n\nmodule.exports = Visuals2D;\n","var HEIGHT, Visuals, WIDTH, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nWIDTH = 640;\n\nHEIGHT = 480;\n\nVisuals = (function(_super) {\n  __extends(Visuals, _super);\n\n  function Visuals() {\n    _ref = Visuals.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Visuals.prototype.el = '#visuals';\n\n  Visuals.prototype.initialize = function() {\n    var radius, rings, segments,\n      _this = this;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera();\n    this.renderer = new THREE.WebGLRenderer();\n    this.scene.add(this.camera);\n    radius = 50;\n    segments = 16;\n    rings = 16;\n    this.sphereMaterial = new THREE.MeshLambertMaterial({\n      color: 0xCC0000\n    });\n    this.sphere = new THREE.Mesh(new THREE.SphereGeometry(radius, segments, rings), this.sphereMaterial);\n    this.sphere.geometry.dynamic = true;\n    this.scene.add(this.sphere);\n    return this.model.on('note:on:kick', function() {\n      return _this.camera.rotation.x += 0.1;\n    });\n  };\n\n  Visuals.prototype.render = function() {\n    this.camera.position.z = 300;\n    this.renderer.setSize(WIDTH, HEIGHT);\n    this.$el.append(this.renderer.domElement);\n    return this.renderer.render(this.scene, this.camera);\n  };\n\n  Visuals.prototype.redraw = function() {\n    return this.renderer.render(this.scene, this.camera);\n  };\n\n  return Visuals;\n\n})(Backbone.View);\n\nmodule.exports = Visuals;\n"]}