{"version":3,"file":"public/js/app.js","sources":["app/scripts/app.coffee","app/scripts/models/circle.coffee","app/scripts/models/circles.coffee","app/scripts/views/grid.coffee","app/scripts/views/seed.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlsourcesContent":["var $, App, Grid, Seed, app, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nSeed = require('scripts/views/seed');\n\nGrid = require('scripts/views/grid');\n\n$ = jQuery;\n\nApp = (function(_super) {\n  __extends(App, _super);\n\n  function App() {\n    _ref = App.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  App.prototype.defaults = {\n    mode: 'tree'\n  };\n\n  App.prototype.initialize = function() {\n    var _this = this;\n    return this.on('change:mode', function() {\n      return _this.view.render();\n    });\n  };\n\n  App.prototype.ready = function() {\n    var height, width;\n    width = $(\"#page\").width();\n    height = $(\"#page\").height();\n    this.svg = d3.select(\"#page\").append(\"svg\").attr({\n      viewBox: \"\" + (-width / 2) + \" \" + (-height / 2) + \" \" + width + \" \" + height\n    });\n    this.view = new Seed({\n      el: $('#page'),\n      model: this,\n      app: this\n    });\n    this.view.render();\n    this.grid = new Grid({\n      el: $('#page'),\n      model: this,\n      app: this\n    });\n    return this.grid.render();\n  };\n\n  return App;\n\n})(Backbone.Model);\n\napp = new App;\n\njQuery(function() {\n  return app.ready();\n});\n\nmodule.exports = app;\n\nBackbone.$ = jQuery;\n","var Circle, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = Circle = (function(_super) {\n  __extends(Circle, _super);\n\n  function Circle() {\n    _ref = Circle.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Circle.prototype.distance = function(other) {\n    var d;\n    d = Math.pow(other.get('pos').x - this.get('pos').x, 2) + Math.pow(other.get('pos').y - this.get('pos').y, 2);\n    return Math.sqrt(d);\n  };\n\n  Circle.prototype.intersection = function(other) {\n    var a, d, h, int, p0, p1, p2, r0, r1;\n    d = this.distance(other);\n    r0 = this.get('attrs').r;\n    p0 = this.get('pos');\n    r1 = other.get('attrs').r;\n    p1 = other.get('pos');\n    if (d > r0 + r1) {\n      console.log('does not intersect');\n      false;\n    }\n    if (d < r0 - r1) {\n      console.log('one within other');\n      false;\n    }\n    if (d === 0) {\n      console.log('concident');\n      false;\n    }\n    a = (Math.pow(r0, 2) - Math.pow(r1, 2) + Math.pow(d, 2)) / (d * 2);\n    h = Math.sqrt(Math.pow(r0, 2) - Math.pow(a, 2));\n    p2 = {\n      x: (p0.x + (a * (p1.x - p0.x))) / d,\n      y: (p0.y + (a * (p1.y - p0.y))) / d\n    };\n    return int = {\n      x: (p2.x - (h * (p1.x - p0.x))) / d,\n      y: (p2.y + (h * (p1.y - p0.y))) / d\n    };\n  };\n\n  return Circle;\n\n})(Backbone.Model);\n","var Circle, Circles, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nCircle = require('scripts/models/circle');\n\nmodule.exports = Circles = (function(_super) {\n  __extends(Circles, _super);\n\n  function Circles() {\n    _ref = Circles.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Circles.prototype.model = Circle;\n\n  return Circles;\n\n})(Backbone.Collection);\n","var Grid, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = Grid = (function(_super) {\n  __extends(Grid, _super);\n\n  function Grid() {\n    _ref = Grid.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Grid.prototype.initialize = function(options) {\n    this.options = options;\n  };\n\n  Grid.prototype.render = function() {\n    var xAxis;\n    this.svg = this.options.app.svg;\n    this.rect = this.svg[0][0].getBoundingClientRect();\n    this.center = {\n      x: this.rect.width / 2,\n      y: this.rect.height / 2\n    };\n    this.pxScale = 100;\n    this.svg.append('svg:circle').attr({\n      cx: this.center.x,\n      cy: this.center.y,\n      r: 5\n    });\n    this.svg.append('svg:line').attr({\n      x1: -this.center.x,\n      y1: 0,\n      x2: this.rect.width,\n      y2: 0,\n      \"class\": 'axis'\n    });\n    this.svg.append('svg:line').attr({\n      x1: 0,\n      y1: -this.center.y,\n      x2: 0,\n      y2: this.rect.height,\n      \"class\": 'axis'\n    });\n    return xAxis = d3.svg.axis().scale(1).tickValues([-3, -2, -1, 0, 1, 2, 3]);\n  };\n\n  return Grid;\n\n})(Backbone.View);\n","var Circle, Circles, Seed, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nCircle = require('scripts/models/circle');\n\nCircles = require('scripts/models/circles');\n\nmodule.exports = Seed = (function(_super) {\n  __extends(Seed, _super);\n\n  function Seed() {\n    _ref = Seed.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Seed.prototype.initialize = function(options) {\n    this.options = options;\n    Seed.__super__.initialize.apply(this, arguments);\n    return this.circles = new Circles();\n  };\n\n  Seed.prototype.render = function() {\n    var pos;\n    this.svg = this.options.app.svg;\n    this.center = {\n      x: 0,\n      y: 0\n    };\n    this.r = 200;\n    this.i = 0;\n    this.createCircles();\n    this.drawCircles();\n    pos = this.circles.get(12).intersection(this.circles.get(13));\n    this.drawMarker(pos);\n    return this;\n  };\n\n  Seed.prototype.createCircles = function() {\n    var circle, getPos,\n      _this = this;\n    this.pos = _(this.center).clone();\n    circle = this.createCircle({\n      \"class\": 'center'\n    });\n    this.levelScaleFactor = 0.866;\n    getPos = function(rads, rscale) {\n      if (rscale == null) {\n        rscale = 1;\n      }\n      return {\n        x: _this.center.x + (Math.sin(rads)) * (_this.r * rscale),\n        y: _this.center.y - (Math.cos(rads)) * (_this.r * rscale)\n      };\n    };\n    this.level = 1;\n    this.iterRadians(function(i, degrees, rads) {\n      _this.pos = getPos(rads, 1);\n      return _this.createCircle({\n        \"class\": 'level-1'\n      });\n    }, 6);\n    this.iterRadians(function(i, degrees, rads) {\n      _this.pos = getPos(rads, 2);\n      return _this.createCircle({\n        \"class\": 'level-2'\n      });\n    }, 6);\n    this.iterRadians(function(i, degrees, rads) {\n      _this.pos = getPos(rads, 1.73);\n      return _this.createCircle({\n        \"class\": 'level-2'\n      });\n    }, 6, -30);\n    return;\n    if (this.model.get('mode') === 'seed') {\n      this.pos = _(this.center).clone();\n      this.createCircle({\n        \"class\": 'outer',\n        r: this.r * 2\n      });\n    } else {\n      return this.drawGeneration(1, circle);\n    }\n  };\n\n  Seed.prototype.drawGeneration = function(gen, circle, dir) {\n    var childCount, circles, getPos, i, _draw, _i, _j, _ref1, _ref2, _results,\n      _this = this;\n    if (dir == null) {\n      dir = 0;\n    }\n    if (gen >= 2) {\n      return;\n    }\n    getPos = function(rads, rscale) {\n      if (rscale == null) {\n        rscale = 1;\n      }\n      return {\n        x: _this.pos.x + (Math.sin(rads)) * (_this.r * rscale),\n        y: _this.pos.y - (Math.cos(rads)) * (_this.r * rscale)\n      };\n    };\n    \"rect = circle.getBoundingClientRect()\\n@pos =\\n  x: rect.left + (rect.width / 2) - @r * 1.5\\n  y: rect.top + (rect.height / 2) + @r * @levelScaleFactor\";\n    _draw = function(i, gen) {\n      var delta, rads;\n      rads = _this.getRads(i);\n      _this.pos = getPos(rads, _this.levelScaleFactor * 2);\n      delta = {\n        x: 0,\n        y: 0\n      };\n      return circle = _this.createCircle({\n        \"class\": \"level-\" + gen\n      }, {\n        x: _this.pos.x + delta.x,\n        y: _this.pos.y + delta.y\n      });\n    };\n    childCount = function() {\n      if (gen === 1) {\n        return 6;\n      } else if (gen === 2) {\n        return 2;\n      } else {\n        return 2;\n      }\n    };\n    circles = [];\n    for (i = _i = 0, _ref1 = childCount() - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {\n      circles.push(_draw((dir + i) % 6, gen));\n    }\n    _results = [];\n    for (i = _j = 0, _ref2 = circles.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {\n      _results.push(this.drawGeneration(gen + 1, circle, (i + dir) % 6));\n    }\n    return _results;\n  };\n\n  Seed.prototype.createCircle = function(attrs, pos) {\n    var circle, _attrs;\n    if (pos == null) {\n      pos = this.pos;\n    }\n    _attrs = {\n      r: this.r,\n      \"class\": 'circle',\n      cx: pos.x,\n      cy: pos.y,\n      'data-id': this.i\n    };\n    _(_attrs).extend(attrs);\n    circle = new Circle({\n      id: this.i,\n      pos: pos,\n      attrs: _attrs,\n      index: this.i\n    });\n    this.circles.add(circle);\n    this.i++;\n    return circle;\n  };\n\n  Seed.prototype.drawCircle = function(circle) {\n    var $text, node, pointAttrs;\n    node = this.svg.append(\"svg:circle\").attr(circle.get('attrs')).datum({\n      circle: circle\n    });\n    pointAttrs = {\n      r: 2,\n      cx: circle.get('pos').x,\n      cy: circle.get('pos').y\n    };\n    this.svg.append(\"svg:circle\").attr(pointAttrs);\n    $text = this.svg.append('text').attr({\n      x: circle.get('pos').x,\n      y: circle.get('pos').y\n    });\n    $text.text(circle.get('index'));\n    node.on('click', function(data) {\n      return console.log(data.circle.toJSON());\n    });\n    return node[0][0];\n  };\n\n  Seed.prototype.drawCircles = function() {\n    var i, _draw,\n      _this = this;\n    i = 0;\n    return (_draw = function() {\n      var wait;\n      if (i >= _this.circles.size()) {\n        return;\n      }\n      _this.drawCircle(_this.circles.models[i]);\n      i++;\n      wait = i < 12 ? 0 : 500;\n      return _.delay(_draw, wait);\n    })();\n  };\n\n  Seed.prototype.drawMarker = function(pos) {\n    var pointAttrs;\n    pointAttrs = {\n      r: 2,\n      cx: pos.x,\n      cy: pos.y\n    };\n    return this.svg.append(\"svg:circle\").attr(pointAttrs);\n  };\n\n  Seed.prototype.iterRadians = function(f, count, degreeOffset) {\n    var degrees, i, rads, _i, _ref1, _results;\n    if (degreeOffset == null) {\n      degreeOffset = 0;\n    }\n    _results = [];\n    for (i = _i = 0, _ref1 = count - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {\n      degrees = ((360 * (i / count)) + degreeOffset) % 360;\n      rads = degrees * Math.PI / 180;\n      _results.push(f(i, degrees, rads));\n    }\n    return _results;\n  };\n\n  Seed.prototype.getRads = function(i, count) {\n    var degrees, rads;\n    if (count == null) {\n      count = 6;\n    }\n    degrees = (360 * (i / count)) % 360;\n    return rads = degrees * Math.PI / 180;\n  };\n\n  return Seed;\n\n})(Backbone.View);\n"]}