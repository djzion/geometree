{"version":3,"file":"public/js/vendor.js","sources":["vendor/scripts/underscore.js","vendor/scripts/backbone.js","node_modules/auto-reload-brunch/vendor/auto-reload.js","node_modules/jade-brunch/vendor/runtime.js","vendor/scripts/backbone.localstorage.js","vendor/scripts/dancer.js","vendor/scripts/jade.runtime.js","vendor/scripts/pixl.js","vendor/scripts/three.js"],"names":[],"mappingsnxvjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A,CCznkdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A","sourcesContent":["//     Underscore.js 1.5.2\n//     http://underscorejs.org\n//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n    // Baseline setup\n    // --------------\n\n    // Establish the root object, `window` in the browser, or `exports` on the server.\n    var root = this;\n\n    // Save the previous value of the `_` variable.\n    var previousUnderscore = root._;\n\n    // Establish the object that gets returned to break out of a loop iteration.\n    var breaker = {};\n\n    // Save bytes in the minified (but not gzipped) version:\n    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n    //use the faster Date.now if available.\n    var getTime = (Date.now || function() {\n        return new Date().getTime();\n    });\n\n    // Create quick reference variables for speed access to core prototypes.\n    var\n        push             = ArrayProto.push,\n        slice            = ArrayProto.slice,\n        concat           = ArrayProto.concat,\n        toString         = ObjProto.toString,\n        hasOwnProperty   = ObjProto.hasOwnProperty;\n\n    // All **ECMAScript 5** native function implementations that we hope to use\n    // are declared here.\n    var\n        nativeForEach      = ArrayProto.forEach,\n        nativeMap          = ArrayProto.map,\n        nativeReduce       = ArrayProto.reduce,\n        nativeReduceRight  = ArrayProto.reduceRight,\n        nativeFilter       = ArrayProto.filter,\n        nativeEvery        = ArrayProto.every,\n        nativeSome         = ArrayProto.some,\n        nativeIndexOf      = ArrayProto.indexOf,\n        nativeLastIndexOf  = ArrayProto.lastIndexOf,\n        nativeIsArray      = Array.isArray,\n        nativeKeys         = Object.keys,\n        nativeBind         = FuncProto.bind;\n\n    // Create a safe reference to the Underscore object for use below.\n    var _ = function(obj) {\n        if (obj instanceof _) return obj;\n        if (!(this instanceof _)) return new _(obj);\n        this._wrapped = obj;\n    };\n\n    // Export the Underscore object for **Node.js**, with\n    // backwards-compatibility for the old `require()` API. If we're in\n    // the browser, add `_` as a global object via a string identifier,\n    // for Closure Compiler \"advanced\" mode.\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = _;\n        }\n        exports._ = _;\n    } else {\n        root._ = _;\n    }\n\n    // Current version.\n    _.VERSION = '1.5.2';\n\n    // Collection Functions\n    // --------------------\n\n    // The cornerstone, an `each` implementation, aka `forEach`.\n    // Handles objects with the built-in `forEach`, arrays, and raw objects.\n    // Delegates to **ECMAScript 5**'s native `forEach` if available.\n    var each = _.each = _.forEach = function(obj, iterator, context) {\n        if (obj == null) return;\n        if (nativeForEach && obj.forEach === nativeForEach) {\n            obj.forEach(iterator, context);\n        } else if (obj.length === +obj.length) {\n            for (var i = 0, length = obj.length; i < length; i++) {\n                if (iterator.call(context, obj[i], i, obj) === breaker) return;\n            }\n        } else {\n            var keys = _.keys(obj);\n            for (var i = 0, length = keys.length; i < length; i++) {\n                if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;\n            }\n        }\n    };\n\n    // Return the results of applying the iterator to each element.\n    // Delegates to **ECMAScript 5**'s native `map` if available.\n    _.map = _.collect = function(obj, iterator, context) {\n        var results = [];\n        if (obj == null) return results;\n        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n        each(obj, function(value, index, list) {\n            results.push(iterator.call(context, value, index, list));\n        });\n        return results;\n    };\n\n    var reduceError = 'Reduce of empty array with no initial value';\n\n    // **Reduce** builds up a single result from a list of values, aka `inject`,\n    // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n    _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n        var initial = arguments.length > 2;\n        if (obj == null) obj = [];\n        if (nativeReduce && obj.reduce === nativeReduce) {\n            if (context) iterator = _.bind(iterator, context);\n            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n        }\n        each(obj, function(value, index, list) {\n            if (!initial) {\n                memo = value;\n                initial = true;\n            } else {\n                memo = iterator.call(context, memo, value, index, list);\n            }\n        });\n        if (!initial) throw new TypeError(reduceError);\n        return memo;\n    };\n\n    // The right-associative version of reduce, also known as `foldr`.\n    // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n    _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n        var initial = arguments.length > 2;\n        if (obj == null) obj = [];\n        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n            if (context) iterator = _.bind(iterator, context);\n            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n        }\n        var length = obj.length;\n        if (length !== +length) {\n            var keys = _.keys(obj);\n            length = keys.length;\n        }\n        each(obj, function(value, index, list) {\n            index = keys ? keys[--length] : --length;\n            if (!initial) {\n                memo = obj[index];\n                initial = true;\n            } else {\n                memo = iterator.call(context, memo, obj[index], index, list);\n            }\n        });\n        if (!initial) throw new TypeError(reduceError);\n        return memo;\n    };\n\n    // Return the first value which passes a truth test. Aliased as `detect`.\n    _.find = _.detect = function(obj, iterator, context) {\n        var result;\n        any(obj, function(value, index, list) {\n            if (iterator.call(context, value, index, list)) {\n                result = value;\n                return true;\n            }\n        });\n        return result;\n    };\n\n    // Return all the elements that pass a truth test.\n    // Delegates to **ECMAScript 5**'s native `filter` if available.\n    // Aliased as `select`.\n    _.filter = _.select = function(obj, iterator, context) {\n        var results = [];\n        if (obj == null) return results;\n        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n        each(obj, function(value, index, list) {\n            if (iterator.call(context, value, index, list)) results.push(value);\n        });\n        return results;\n    };\n\n    // Return all the elements for which a truth test fails.\n    _.reject = function(obj, iterator, context) {\n        return _.filter(obj, function(value, index, list) {\n            return !iterator.call(context, value, index, list);\n        }, context);\n    };\n\n    // Determine whether all of the elements match a truth test.\n    // Delegates to **ECMAScript 5**'s native `every` if available.\n    // Aliased as `all`.\n    _.every = _.all = function(obj, iterator, context) {\n        iterator || (iterator = _.identity);\n        var result = true;\n        if (obj == null) return result;\n        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n        each(obj, function(value, index, list) {\n            if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n        });\n        return !!result;\n    };\n\n    // Determine if at least one element in the object matches a truth test.\n    // Delegates to **ECMAScript 5**'s native `some` if available.\n    // Aliased as `any`.\n    var any = _.some = _.any = function(obj, iterator, context) {\n        iterator || (iterator = _.identity);\n        var result = false;\n        if (obj == null) return result;\n        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n        each(obj, function(value, index, list) {\n            if (result || (result = iterator.call(context, value, index, list))) return breaker;\n        });\n        return !!result;\n    };\n\n    // Determine if the array or object contains a given value (using `===`).\n    // Aliased as `include`.\n    _.contains = _.include = function(obj, target) {\n        if (obj == null) return false;\n        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n        return any(obj, function(value) {\n            return value === target;\n        });\n    };\n\n    // Invoke a method (with arguments) on every item in a collection.\n    _.invoke = function(obj, method) {\n        var args = slice.call(arguments, 2);\n        var isFunc = _.isFunction(method);\n        return _.map(obj, function(value) {\n            return (isFunc ? method : value[method]).apply(value, args);\n        });\n    };\n\n    // Convenience version of a common use case of `map`: fetching a property.\n    _.pluck = function(obj, key) {\n        return _.map(obj, function(value){ return value[key]; });\n    };\n\n    // Convenience version of a common use case of `filter`: selecting only objects\n    // containing specific `key:value` pairs.\n    _.where = function(obj, attrs, first) {\n        if (_.isEmpty(attrs)) return first ? void 0 : [];\n        return _[first ? 'find' : 'filter'](obj, function(value) {\n            for (var key in attrs) {\n                if (attrs[key] !== value[key]) return false;\n            }\n            return true;\n        });\n    };\n\n    // Convenience version of a common use case of `find`: getting the first object\n    // containing specific `key:value` pairs.\n    _.findWhere = function(obj, attrs) {\n        return _.where(obj, attrs, true);\n    };\n\n    // Return the maximum element or (element-based computation).\n    // Can't optimize arrays of integers longer than 65,535 elements.\n    // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\n    _.max = function(obj, iterator, context) {\n        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n            return Math.max.apply(Math, obj);\n        }\n        if (!iterator && _.isEmpty(obj)) return -Infinity;\n        var result = {computed : -Infinity, value: -Infinity};\n        each(obj, function(value, index, list) {\n            var computed = iterator ? iterator.call(context, value, index, list) : value;\n            computed > result.computed && (result = {value : value, computed : computed});\n        });\n        return result.value;\n    };\n\n    // Return the minimum element (or element-based computation).\n    _.min = function(obj, iterator, context) {\n        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n            return Math.min.apply(Math, obj);\n        }\n        if (!iterator && _.isEmpty(obj)) return Infinity;\n        var result = {computed : Infinity, value: Infinity};\n        each(obj, function(value, index, list) {\n            var computed = iterator ? iterator.call(context, value, index, list) : value;\n            computed < result.computed && (result = {value : value, computed : computed});\n        });\n        return result.value;\n    };\n\n    // Shuffle an array, using the modern version of the\n    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n    _.shuffle = function(obj) {\n        var rand;\n        var index = 0;\n        var shuffled = [];\n        each(obj, function(value) {\n            rand = _.random(index++);\n            shuffled[index - 1] = shuffled[rand];\n            shuffled[rand] = value;\n        });\n        return shuffled;\n    };\n\n    // Sample **n** random values from a collection.\n    // If **n** is not specified, returns a single random element.\n    // The internal `guard` argument allows it to work with `map`.\n    _.sample = function(obj, n, guard) {\n        if (n == null || guard) {\n            if (obj.length !== +obj.length) obj = _.values(obj);\n            return obj[_.random(obj.length - 1)];\n        }\n        return _.shuffle(obj).slice(0, Math.max(0, n));\n    };\n\n    // An internal function to generate lookup iterators.\n    var lookupIterator = function(value) {\n        return _.isFunction(value) ? value : function(obj){ return obj[value]; };\n    };\n\n    // Sort the object's values by a criterion produced by an iterator.\n    _.sortBy = function(obj, value, context) {\n        var iterator = value == null ? _.identity : lookupIterator(value);\n        return _.pluck(_.map(obj, function(value, index, list) {\n            return {\n                value: value,\n                index: index,\n                criteria: iterator.call(context, value, index, list)\n            };\n        }).sort(function(left, right) {\n                var a = left.criteria;\n                var b = right.criteria;\n                if (a !== b) {\n                    if (a > b || a === void 0) return 1;\n                    if (a < b || b === void 0) return -1;\n                }\n                return left.index - right.index;\n            }), 'value');\n    };\n\n    // An internal function used for aggregate \"group by\" operations.\n    var group = function(behavior) {\n        return function(obj, value, context) {\n            var result = {};\n            var iterator = value == null ? _.identity : lookupIterator(value);\n            each(obj, function(value, index) {\n                var key = iterator.call(context, value, index, obj);\n                behavior(result, key, value);\n            });\n            return result;\n        };\n    };\n\n    // Groups the object's values by a criterion. Pass either a string attribute\n    // to group by, or a function that returns the criterion.\n    _.groupBy = group(function(result, key, value) {\n        (_.has(result, key) ? result[key] : (result[key] = [])).push(value);\n    });\n\n    // Indexes the object's values by a criterion, similar to `groupBy`, but for\n    // when you know that your index values will be unique.\n    _.indexBy = group(function(result, key, value) {\n        result[key] = value;\n    });\n\n    // Counts instances of an object that group by a certain criterion. Pass\n    // either a string attribute to count by, or a function that returns the\n    // criterion.\n    _.countBy = group(function(result, key) {\n        _.has(result, key) ? result[key]++ : result[key] = 1;\n    });\n\n    // Use a comparator function to figure out the smallest index at which\n    // an object should be inserted so as to maintain order. Uses binary search.\n    _.sortedIndex = function(array, obj, iterator, context) {\n        iterator = iterator == null ? _.identity : lookupIterator(iterator);\n        var value = iterator.call(context, obj);\n        var low = 0, high = array.length;\n        while (low < high) {\n            var mid = (low + high) >>> 1;\n            iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n        }\n        return low;\n    };\n\n    // Safely create a real, live array from anything iterable.\n    _.toArray = function(obj) {\n        if (!obj) return [];\n        if (_.isArray(obj)) return slice.call(obj);\n        if (obj.length === +obj.length) return _.map(obj, _.identity);\n        return _.values(obj);\n    };\n\n    // Return the number of elements in an object.\n    _.size = function(obj) {\n        if (obj == null) return 0;\n        return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n    };\n\n    // Array Functions\n    // ---------------\n\n    // Get the first element of an array. Passing **n** will return the first N\n    // values in the array. Aliased as `head` and `take`. The **guard** check\n    // allows it to work with `_.map`.\n    _.first = _.head = _.take = function(array, n, guard) {\n        if (array == null) return void 0;\n        return (n == null) || guard ? array[0] : slice.call(array, 0, n);\n    };\n\n    // Returns everything but the last entry of the array. Especially useful on\n    // the arguments object. Passing **n** will return all the values in\n    // the array, excluding the last N. The **guard** check allows it to work with\n    // `_.map`.\n    _.initial = function(array, n, guard) {\n        return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n    };\n\n    // Get the last element of an array. Passing **n** will return the last N\n    // values in the array. The **guard** check allows it to work with `_.map`.\n    _.last = function(array, n, guard) {\n        if (array == null) return void 0;\n        if ((n == null) || guard) {\n            return array[array.length - 1];\n        } else {\n            return slice.call(array, Math.max(array.length - n, 0));\n        }\n    };\n\n    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n    // Especially useful on the arguments object. Passing an **n** will return\n    // the rest N values in the array. The **guard**\n    // check allows it to work with `_.map`.\n    _.rest = _.tail = _.drop = function(array, n, guard) {\n        return slice.call(array, (n == null) || guard ? 1 : n);\n    };\n\n    // Trim out all falsy values from an array.\n    _.compact = function(array) {\n        return _.filter(array, _.identity);\n    };\n\n    // Internal implementation of a recursive `flatten` function.\n    var flatten = function(input, shallow, output) {\n        if (shallow && _.every(input, _.isArray)) {\n            return concat.apply(output, input);\n        }\n        each(input, function(value) {\n            if (_.isArray(value) || _.isArguments(value)) {\n                shallow ? push.apply(output, value) : flatten(value, shallow, output);\n            } else {\n                output.push(value);\n            }\n        });\n        return output;\n    };\n\n    // Flatten out an array, either recursively (by default), or just one level.\n    _.flatten = function(array, shallow) {\n        return flatten(array, shallow, []);\n    };\n\n    // Return a version of the array that does not contain the specified value(s).\n    _.without = function(array) {\n        return _.difference(array, slice.call(arguments, 1));\n    };\n\n    // Produce a duplicate-free version of the array. If the array has already\n    // been sorted, you have the option of using a faster algorithm.\n    // Aliased as `unique`.\n    _.uniq = _.unique = function(array, isSorted, iterator, context) {\n        if (_.isFunction(isSorted)) {\n            context = iterator;\n            iterator = isSorted;\n            isSorted = false;\n        }\n        var initial = iterator ? _.map(array, iterator, context) : array;\n        var results = [];\n        var seen = [];\n        each(initial, function(value, index) {\n            if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n                seen.push(value);\n                results.push(array[index]);\n            }\n        });\n        return results;\n    };\n\n    // Produce an array that contains the union: each distinct element from all of\n    // the passed-in arrays.\n    _.union = function() {\n        return _.uniq(_.flatten(arguments, true));\n    };\n\n    // Produce an array that contains every item shared between all the\n    // passed-in arrays.\n    _.intersection = function(array) {\n        var rest = slice.call(arguments, 1);\n        return _.filter(_.uniq(array), function(item) {\n            return _.every(rest, function(other) {\n                return _.indexOf(other, item) >= 0;\n            });\n        });\n    };\n\n    // Take the difference between one array and a number of other arrays.\n    // Only the elements present in just the first array will remain.\n    _.difference = function(array) {\n        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n        return _.filter(array, function(value){ return !_.contains(rest, value); });\n    };\n\n    // Zip together multiple lists into a single array -- elements that share\n    // an index go together.\n    _.zip = function() {\n        var length = _.max(_.pluck(arguments, \"length\").concat(0));\n        var results = new Array(length);\n        for (var i = 0; i < length; i++) {\n            results[i] = _.pluck(arguments, '' + i);\n        }\n        return results;\n    };\n\n    // Converts lists into objects. Pass either a single array of `[key, value]`\n    // pairs, or two parallel arrays of the same length -- one of keys, and one of\n    // the corresponding values.\n    _.object = function(list, values) {\n        if (list == null) return {};\n        var result = {};\n        for (var i = 0, length = list.length; i < length; i++) {\n            if (values) {\n                result[list[i]] = values[i];\n            } else {\n                result[list[i][0]] = list[i][1];\n            }\n        }\n        return result;\n    };\n\n    // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n    // we need this function. Return the position of the first occurrence of an\n    // item in an array, or -1 if the item is not included in the array.\n    // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n    // If the array is large and already in sort order, pass `true`\n    // for **isSorted** to use binary search.\n    _.indexOf = function(array, item, isSorted) {\n        if (array == null) return -1;\n        var i = 0, length = array.length;\n        if (isSorted) {\n            if (typeof isSorted == 'number') {\n                i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\n            } else {\n                i = _.sortedIndex(array, item);\n                return array[i] === item ? i : -1;\n            }\n        }\n        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);\n        for (; i < length; i++) if (array[i] === item) return i;\n        return -1;\n    };\n\n    // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n    _.lastIndexOf = function(array, item, from) {\n        if (array == null) return -1;\n        var hasIndex = from != null;\n        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n            return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n        }\n        var i = (hasIndex ? from : array.length);\n        while (i--) if (array[i] === item) return i;\n        return -1;\n    };\n\n    // Generate an integer Array containing an arithmetic progression. A port of\n    // the native Python `range()` function. See\n    // [the Python documentation](http://docs.python.org/library/functions.html#range).\n    _.range = function(start, stop, step) {\n        if (arguments.length <= 1) {\n            stop = start || 0;\n            start = 0;\n        }\n        step = arguments[2] || 1;\n\n        var length = Math.max(Math.ceil((stop - start) / step), 0);\n        var idx = 0;\n        var range = new Array(length);\n\n        while(idx < length) {\n            range[idx++] = start;\n            start += step;\n        }\n\n        return range;\n    };\n\n    // Function (ahem) Functions\n    // ------------------\n\n    // Reusable constructor function for prototype setting.\n    var ctor = function(){};\n\n    // Create a function bound to a given object (assigning `this`, and arguments,\n    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n    // available.\n    _.bind = function(func, context) {\n        var args, bound;\n        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n        if (!_.isFunction(func)) throw new TypeError;\n        args = slice.call(arguments, 2);\n        return bound = function() {\n            if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n            ctor.prototype = func.prototype;\n            var self = new ctor;\n            ctor.prototype = null;\n            var result = func.apply(self, args.concat(slice.call(arguments)));\n            if (Object(result) === result) return result;\n            return self;\n        };\n    };\n\n    // Partially apply a function by creating a version that has had some of its\n    // arguments pre-filled, without changing its dynamic `this` context.\n    _.partial = function(func) {\n        var args = slice.call(arguments, 1);\n        return function() {\n            return func.apply(this, args.concat(slice.call(arguments)));\n        };\n    };\n\n    // Bind all of an object's methods to that object. Useful for ensuring that\n    // all callbacks defined on an object belong to it.\n    _.bindAll = function(obj) {\n        var funcs = slice.call(arguments, 1);\n        if (funcs.length === 0) throw new Error(\"bindAll must be passed function names\");\n        each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n        return obj;\n    };\n\n    // Memoize an expensive function by storing its results.\n    _.memoize = function(func, hasher) {\n        var memo = {};\n        hasher || (hasher = _.identity);\n        return function() {\n            var key = hasher.apply(this, arguments);\n            return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n        };\n    };\n\n    // Delays a function for the given number of milliseconds, and then calls\n    // it with the arguments supplied.\n    _.delay = function(func, wait) {\n        var args = slice.call(arguments, 2);\n        return setTimeout(function(){ return func.apply(null, args); }, wait);\n    };\n\n    // Defers a function, scheduling it to run after the current call stack has\n    // cleared.\n    _.defer = function(func) {\n        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n    };\n\n    // Returns a function, that, when invoked, will only be triggered at most once\n    // during a given window of time. Normally, the throttled function will run\n    // as much as it can, without ever going more than once per `wait` duration;\n    // but if you'd like to disable the execution on the leading edge, pass\n    // `{leading: false}`. To disable execution on the trailing edge, ditto.\n    _.throttle = function(func, wait, options) {\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        options || (options = {});\n        var later = function() {\n            previous = options.leading === false ? 0 : getTime();\n            timeout = null;\n            result = func.apply(context, args);\n            context = args = null;\n        };\n        return function() {\n            var now = getTime();\n            if (!previous && options.leading === false) previous = now;\n            var remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0) {\n                clearTimeout(timeout);\n                timeout = null;\n                previous = now;\n                result = func.apply(context, args);\n                context = args = null;\n            } else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n    };\n\n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    _.debounce = function(func, wait, immediate) {\n        var timeout, args, context, timestamp, result;\n        return function() {\n            context = this;\n            args = arguments;\n            timestamp = getTime();\n            var later = function() {\n                var last = getTime() - timestamp;\n                if (last < wait) {\n                    timeout = setTimeout(later, wait - last);\n                } else {\n                    timeout = null;\n                    if (!immediate) {\n                        result = func.apply(context, args);\n                        context = args = null;\n                    }\n                }\n            };\n            var callNow = immediate && !timeout;\n            if (!timeout) {\n                timeout = setTimeout(later, wait);\n            }\n            if (callNow) {\n                result = func.apply(context, args);\n                context = args = null;\n            }\n\n            return result;\n        };\n    };\n\n    // Returns a function that will be executed at most one time, no matter how\n    // often you call it. Useful for lazy initialization.\n    _.once = function(func) {\n        var ran = false, memo;\n        return function() {\n            if (ran) return memo;\n            ran = true;\n            memo = func.apply(this, arguments);\n            func = null;\n            return memo;\n        };\n    };\n\n    // Returns the first function passed as an argument to the second,\n    // allowing you to adjust arguments, run code before and after, and\n    // conditionally execute the original function.\n    _.wrap = function(func, wrapper) {\n        return _.partial(wrapper, func);\n    };\n\n    // Returns a function that is the composition of a list of functions, each\n    // consuming the return value of the function that follows.\n    _.compose = function() {\n        var funcs = arguments;\n        return function() {\n            var args = arguments;\n            for (var i = funcs.length - 1; i >= 0; i--) {\n                args = [funcs[i].apply(this, args)];\n            }\n            return args[0];\n        };\n    };\n\n    // Returns a function that will only be executed after being called N times.\n    _.after = function(times, func) {\n        return function() {\n            if (--times < 1) {\n                return func.apply(this, arguments);\n            }\n        };\n    };\n\n    // Object Functions\n    // ----------------\n\n    // Retrieve the names of an object's properties.\n    // Delegates to **ECMAScript 5**'s native `Object.keys`\n    _.keys = nativeKeys || function(obj) {\n        if (obj !== Object(obj)) throw new TypeError('Invalid object');\n        var keys = [];\n        for (var key in obj) if (_.has(obj, key)) keys.push(key);\n        return keys;\n    };\n\n    // Retrieve the values of an object's properties.\n    _.values = function(obj) {\n        var keys = _.keys(obj);\n        var length = keys.length;\n        var values = new Array(length);\n        for (var i = 0; i < length; i++) {\n            values[i] = obj[keys[i]];\n        }\n        return values;\n    };\n\n    // Convert an object into a list of `[key, value]` pairs.\n    _.pairs = function(obj) {\n        var keys = _.keys(obj);\n        var length = keys.length;\n        var pairs = new Array(length);\n        for (var i = 0; i < length; i++) {\n            pairs[i] = [keys[i], obj[keys[i]]];\n        }\n        return pairs;\n    };\n\n    // Invert the keys and values of an object. The values must be serializable.\n    _.invert = function(obj) {\n        var result = {};\n        var keys = _.keys(obj);\n        for (var i = 0, length = keys.length; i < length; i++) {\n            result[obj[keys[i]]] = keys[i];\n        }\n        return result;\n    };\n\n    // Return a sorted list of the function names available on the object.\n    // Aliased as `methods`\n    _.functions = _.methods = function(obj) {\n        var names = [];\n        for (var key in obj) {\n            if (_.isFunction(obj[key])) names.push(key);\n        }\n        return names.sort();\n    };\n\n    // Extend a given object with all the properties in passed-in object(s).\n    _.extend = function(obj) {\n        each(slice.call(arguments, 1), function(source) {\n            if (source) {\n                for (var prop in source) {\n                    obj[prop] = source[prop];\n                }\n            }\n        });\n        return obj;\n    };\n\n    // Return a copy of the object only containing the whitelisted properties.\n    _.pick = function(obj) {\n        var copy = {};\n        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n        each(keys, function(key) {\n            if (key in obj) copy[key] = obj[key];\n        });\n        return copy;\n    };\n\n    // Return a copy of the object without the blacklisted properties.\n    _.omit = function(obj) {\n        var copy = {};\n        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n        for (var key in obj) {\n            if (!_.contains(keys, key)) copy[key] = obj[key];\n        }\n        return copy;\n    };\n\n    // Fill in a given object with default properties.\n    _.defaults = function(obj) {\n        each(slice.call(arguments, 1), function(source) {\n            if (source) {\n                for (var prop in source) {\n                    if (obj[prop] === void 0) obj[prop] = source[prop];\n                }\n            }\n        });\n        return obj;\n    };\n\n    // Create a (shallow-cloned) duplicate of an object.\n    _.clone = function(obj) {\n        if (!_.isObject(obj)) return obj;\n        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n    };\n\n    // Invokes interceptor with the obj, and then returns obj.\n    // The primary purpose of this method is to \"tap into\" a method chain, in\n    // order to perform operations on intermediate results within the chain.\n    _.tap = function(obj, interceptor) {\n        interceptor(obj);\n        return obj;\n    };\n\n    // Internal recursive comparison function for `isEqual`.\n    var eq = function(a, b, aStack, bStack) {\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n        if (a === b) return a !== 0 || 1 / a == 1 / b;\n        // A strict comparison is necessary because `null == undefined`.\n        if (a == null || b == null) return a === b;\n        // Unwrap any wrapped objects.\n        if (a instanceof _) a = a._wrapped;\n        if (b instanceof _) b = b._wrapped;\n        // Compare `[[Class]]` names.\n        var className = toString.call(a);\n        if (className != toString.call(b)) return false;\n        switch (className) {\n            // Strings, numbers, dates, and booleans are compared by value.\n            case '[object String]':\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n                // equivalent to `new String(\"5\")`.\n                return a == String(b);\n            case '[object Number]':\n                // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n                // other numeric values.\n                return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n            case '[object Date]':\n            case '[object Boolean]':\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n                // millisecond representations. Note that invalid dates with millisecond representations\n                // of `NaN` are not equivalent.\n                return +a == +b;\n            // RegExps are compared by their source patterns and flags.\n            case '[object RegExp]':\n                return a.source == b.source &&\n                    a.global == b.global &&\n                    a.multiline == b.multiline &&\n                    a.ignoreCase == b.ignoreCase;\n        }\n        if (typeof a != 'object' || typeof b != 'object') return false;\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n        var length = aStack.length;\n        while (length--) {\n            // Linear search. Performance is inversely proportional to the number of\n            // unique nested structures.\n            if (aStack[length] == a) return bStack[length] == b;\n        }\n        // Objects with different constructors are not equivalent, but `Object`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n            _.isFunction(bCtor) && (bCtor instanceof bCtor))\n            && ('constructor' in a && 'constructor' in b)) {\n            return false;\n        }\n        // Add the first object to the stack of traversed objects.\n        aStack.push(a);\n        bStack.push(b);\n        var size = 0, result = true;\n        // Recursively compare objects and arrays.\n        if (className == '[object Array]') {\n            // Compare array lengths to determine if a deep comparison is necessary.\n            size = a.length;\n            result = size == b.length;\n            if (result) {\n                // Deep compare the contents, ignoring non-numeric properties.\n                while (size--) {\n                    if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n                }\n            }\n        } else {\n            // Deep compare objects.\n            for (var key in a) {\n                if (_.has(a, key)) {\n                    // Count the expected number of properties.\n                    size++;\n                    // Deep compare each member.\n                    if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n                }\n            }\n            // Ensure that both objects contain the same number of properties.\n            if (result) {\n                for (key in b) {\n                    if (_.has(b, key) && !(size--)) break;\n                }\n                result = !size;\n            }\n        }\n        // Remove the first object from the stack of traversed objects.\n        aStack.pop();\n        bStack.pop();\n        return result;\n    };\n\n    // Perform a deep comparison to check if two objects are equal.\n    _.isEqual = function(a, b) {\n        return eq(a, b, [], []);\n    };\n\n    // Is a given array, string, or object empty?\n    // An \"empty\" object has no enumerable own-properties.\n    _.isEmpty = function(obj) {\n        if (obj == null) return true;\n        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n        for (var key in obj) if (_.has(obj, key)) return false;\n        return true;\n    };\n\n    // Is a given value a DOM element?\n    _.isElement = function(obj) {\n        return !!(obj && obj.nodeType === 1);\n    };\n\n    // Is a given value an array?\n    // Delegates to ECMA5's native Array.isArray\n    _.isArray = nativeIsArray || function(obj) {\n        return toString.call(obj) == '[object Array]';\n    };\n\n    // Is a given variable an object?\n    _.isObject = function(obj) {\n        return obj === Object(obj);\n    };\n\n    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n    each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n        _['is' + name] = function(obj) {\n            return toString.call(obj) == '[object ' + name + ']';\n        };\n    });\n\n    // Define a fallback version of the method in browsers (ahem, IE), where\n    // there isn't any inspectable \"Arguments\" type.\n    if (!_.isArguments(arguments)) {\n        _.isArguments = function(obj) {\n            return !!(obj && _.has(obj, 'callee'));\n        };\n    }\n\n    // Optimize `isFunction` if appropriate.\n    if (typeof (/./) !== 'function') {\n        _.isFunction = function(obj) {\n            return typeof obj === 'function';\n        };\n    }\n\n    // Is a given object a finite number?\n    _.isFinite = function(obj) {\n        return isFinite(obj) && !isNaN(parseFloat(obj));\n    };\n\n    // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n    _.isNaN = function(obj) {\n        return _.isNumber(obj) && obj != +obj;\n    };\n\n    // Is a given value a boolean?\n    _.isBoolean = function(obj) {\n        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n    };\n\n    // Is a given value equal to null?\n    _.isNull = function(obj) {\n        return obj === null;\n    };\n\n    // Is a given variable undefined?\n    _.isUndefined = function(obj) {\n        return obj === void 0;\n    };\n\n    // Shortcut function for checking if an object has a given property directly\n    // on itself (in other words, not on a prototype).\n    _.has = function(obj, key) {\n        return hasOwnProperty.call(obj, key);\n    };\n\n    // Utility Functions\n    // -----------------\n\n    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n    // previous owner. Returns a reference to the Underscore object.\n    _.noConflict = function() {\n        root._ = previousUnderscore;\n        return this;\n    };\n\n    // Keep the identity function around for default iterators.\n    _.identity = function(value) {\n        return value;\n    };\n\n    // Run a function **n** times.\n    _.times = function(n, iterator, context) {\n        var accum = Array(Math.max(0, n));\n        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);\n        return accum;\n    };\n\n    // Return a random integer between min and max (inclusive).\n    _.random = function(min, max) {\n        if (max == null) {\n            max = min;\n            min = 0;\n        }\n        return min + Math.floor(Math.random() * (max - min + 1));\n    };\n\n    // List of HTML entities for escaping.\n    var entityMap = {\n        escape: {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#x27;'\n        }\n    };\n    entityMap.unescape = _.invert(entityMap.escape);\n\n    // Regexes containing the keys and values listed immediately above.\n    var entityRegexes = {\n        escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n    };\n\n    // Functions for escaping and unescaping strings to/from HTML interpolation.\n    _.each(['escape', 'unescape'], function(method) {\n        _[method] = function(string) {\n            if (string == null) return '';\n            return ('' + string).replace(entityRegexes[method], function(match) {\n                return entityMap[method][match];\n            });\n        };\n    });\n\n    // If the value of the named `property` is a function then invoke it with the\n    // `object` as context; otherwise, return it.\n    _.result = function(object, property) {\n        if (object == null) return void 0;\n        var value = object[property];\n        return _.isFunction(value) ? value.call(object) : value;\n    };\n\n    // Add your own custom functions to the Underscore object.\n    _.mixin = function(obj) {\n        each(_.functions(obj), function(name) {\n            var func = _[name] = obj[name];\n            _.prototype[name] = function() {\n                var args = [this._wrapped];\n                push.apply(args, arguments);\n                return result.call(this, func.apply(_, args));\n            };\n        });\n    };\n\n    // Generate a unique integer id (unique within the entire client session).\n    // Useful for temporary DOM ids.\n    var idCounter = 0;\n    _.uniqueId = function(prefix) {\n        var id = ++idCounter + '';\n        return prefix ? prefix + id : id;\n    };\n\n    // By default, Underscore uses ERB-style template delimiters, change the\n    // following template settings to use alternative delimiters.\n    _.templateSettings = {\n        evaluate    : /<%([\\s\\S]+?)%>/g,\n        interpolate : /<%=([\\s\\S]+?)%>/g,\n        escape      : /<%-([\\s\\S]+?)%>/g\n    };\n\n    // When customizing `templateSettings`, if you don't want to define an\n    // interpolation, evaluation or escaping regex, we need one that is\n    // guaranteed not to match.\n    var noMatch = /(.)^/;\n\n    // Certain characters need to be escaped so that they can be put into a\n    // string literal.\n    var escapes = {\n        \"'\":      \"'\",\n        '\\\\':     '\\\\',\n        '\\r':     'r',\n        '\\n':     'n',\n        '\\t':     't',\n        '\\u2028': 'u2028',\n        '\\u2029': 'u2029'\n    };\n\n    var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n    // JavaScript micro-templating, similar to John Resig's implementation.\n    // Underscore templating handles arbitrary delimiters, preserves whitespace,\n    // and correctly escapes quotes within interpolated code.\n    _.template = function(text, data, settings) {\n        var render;\n        settings = _.defaults({}, settings, _.templateSettings);\n\n        // Combine delimiters into one regular expression via alternation.\n        var matcher = new RegExp([\n            (settings.escape || noMatch).source,\n            (settings.interpolate || noMatch).source,\n            (settings.evaluate || noMatch).source\n        ].join('|') + '|$', 'g');\n\n        // Compile the template source, escaping string literals appropriately.\n        var index = 0;\n        var source = \"__p+='\";\n        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n            source += text.slice(index, offset)\n                .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n            if (escape) {\n                source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n            }\n            if (interpolate) {\n                source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n            }\n            if (evaluate) {\n                source += \"';\\n\" + evaluate + \"\\n__p+='\";\n            }\n            index = offset + match.length;\n            return match;\n        });\n        source += \"';\\n\";\n\n        // If a variable is not specified, place data values in local scope.\n        if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n        source = \"var __t,__p='',__j=Array.prototype.join,\" +\n            \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n            source + \"return __p;\\n\";\n\n        try {\n            render = new Function(settings.variable || 'obj', '_', source);\n        } catch (e) {\n            e.source = source;\n            throw e;\n        }\n\n        if (data) return render(data, _);\n        var template = function(data) {\n            return render.call(this, data, _);\n        };\n\n        // Provide the compiled function source as a convenience for precompilation.\n        template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n        return template;\n    };\n\n    // Add a \"chain\" function, which will delegate to the wrapper.\n    _.chain = function(obj) {\n        return _(obj).chain();\n    };\n\n    // OOP\n    // ---------------\n    // If Underscore is called as a function, it returns a wrapped object that\n    // can be used OO-style. This wrapper holds altered versions of all the\n    // underscore functions. Wrapped objects may be chained.\n\n    // Helper function to continue chaining intermediate results.\n    var result = function(obj) {\n        return this._chain ? _(obj).chain() : obj;\n    };\n\n    // Add all of the Underscore functions to the wrapper object.\n    _.mixin(_);\n\n    // Add all mutator Array functions to the wrapper.\n    each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n        var method = ArrayProto[name];\n        _.prototype[name] = function() {\n            var obj = this._wrapped;\n            method.apply(obj, arguments);\n            if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];\n            return result.call(this, obj);\n        };\n    });\n\n    // Add all accessor Array functions to the wrapper.\n    each(['concat', 'join', 'slice'], function(name) {\n        var method = ArrayProto[name];\n        _.prototype[name] = function() {\n            return result.call(this, method.apply(this._wrapped, arguments));\n        };\n    });\n\n    _.extend(_.prototype, {\n\n        // Start chaining a wrapped Underscore object.\n        chain: function() {\n            this._chain = true;\n            return this;\n        },\n\n        // Extracts the result from a wrapped and chained object.\n        value: function() {\n            return this._wrapped;\n        }\n\n    });\n\n    // AMD registration happens at the end for compatibility with AMD loaders\n    // that may not enforce next-turn semantics on modules. Even though general\n    // practice for AMD registration is to be anonymous, underscore registers\n    // as a named module because, like jQuery, it is a base library that is\n    // popular enough to be bundled in a third party lib, but not be part of\n    // an AMD load request. Those cases could generate an error when an\n    // anonymous define() is called outside of a loader request.\n    if (typeof define === 'function' && define.amd) {\n        define('underscore', [], function() {\n            return _;\n        });\n    }\n}).call(this);","//     Backbone.js 1.1.0\n\n//     (c) 2010-2011 Jeremy Ashkenas, DocumentCloud Inc.\n//     (c) 2011-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(root, factory) {\n\n    // Set up Backbone appropriately for the environment. Start with AMD.\n    if (typeof define === 'function' && define.amd) {\n        define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n            // Export global even in AMD case in case this script is loaded with\n            // others that may still expect a global Backbone.\n            root.Backbone = factory(root, exports, _, $);\n        });\n\n        // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n    } else if (typeof exports !== 'undefined') {\n        var _ = require('underscore'), $;\n        try { $ = require('jquery'); } catch(e) {};\n        factory(root, exports, _, $);\n\n        // Finally, as a browser global.\n    } else {\n        root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n    }\n\n}(this, function(root, Backbone, _, $) {\n\n    // Initial Setup\n    // -------------\n\n    // Save the previous value of the `Backbone` variable, so that it can be\n    // restored later on, if `noConflict` is used.\n    var previousBackbone = root.Backbone;\n\n    // Create local references to array methods we'll want to use later.\n    var array = [];\n    var push = array.push;\n    var slice = array.slice;\n    var splice = array.splice;\n\n    // Current version of the library. Keep in sync with `package.json`.\n    Backbone.VERSION = '1.1.0';\n\n    // Require Underscore, if we're on the server, and it's not already present.\n    var _ = root._;\n    if (!_ && (typeof require !== 'undefined')) _ = require('underscore');\n\n    // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n    // the `$` variable.\n    Backbone.$ = $;\n\n    // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n    // to its previous owner. Returns a reference to this Backbone object.\n    Backbone.noConflict = function() {\n        root.Backbone = previousBackbone;\n        return this;\n    };\n\n    // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n    // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n    // set a `X-Http-Method-Override` header.\n    Backbone.emulateHTTP = false;\n\n    // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n    // `application/json` requests ... will encode the body as\n    // `application/x-www-form-urlencoded` instead and will send the model in a\n    // form param named `model`.\n    Backbone.emulateJSON = false;\n\n    // Backbone.Events\n    // ---------------\n\n    // A module that can be mixed in to *any object* in order to provide it with\n    // custom events. You may bind with `on` or remove with `off` callback\n    // functions to an event; `trigger`-ing an event fires all callbacks in\n    // succession.\n    //\n    //     var object = {};\n    //     _.extend(object, Backbone.Events);\n    //     object.on('expand', function(){ alert('expanded'); });\n    //     object.trigger('expand');\n    //\n    var Events = Backbone.Events = {\n\n        // Bind an event to a `callback` function. Passing `\"all\"` will bind\n        // the callback to all events fired.\n        on: function(name, callback, context) {\n            if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\n            this._events || (this._events = {});\n            var events = this._events[name] || (this._events[name] = []);\n            events.push({callback: callback, context: context, ctx: context || this});\n            return this;\n        },\n\n        // Bind an event to only be triggered a single time. After the first time\n        // the callback is invoked, it will be removed.\n        once: function(name, callback, context) {\n            if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\n            var self = this;\n            var once = _.once(function() {\n                self.off(name, once);\n                callback.apply(this, arguments);\n            });\n            once._callback = callback;\n            return this.on(name, once, context);\n        },\n\n        // Remove one or many callbacks. If `context` is null, removes all\n        // callbacks with that function. If `callback` is null, removes all\n        // callbacks for the event. If `name` is null, removes all bound\n        // callbacks for all events.\n        off: function(name, callback, context) {\n            var retain, ev, events, names, i, l, j, k;\n            if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\n            if (!name && !callback && !context) {\n                this._events = void 0;\n                return this;\n            }\n            names = name ? [name] : _.keys(this._events);\n            for (i = 0, l = names.length; i < l; i++) {\n                name = names[i];\n                if (events = this._events[name]) {\n                    this._events[name] = retain = [];\n                    if (callback || context) {\n                        for (j = 0, k = events.length; j < k; j++) {\n                            ev = events[j];\n                            if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                                (context && context !== ev.context)) {\n                                retain.push(ev);\n                            }\n                        }\n                    }\n                    if (!retain.length) delete this._events[name];\n                }\n            }\n\n            return this;\n        },\n\n        // Trigger one or many events, firing all bound callbacks. Callbacks are\n        // passed the same arguments as `trigger` is, apart from the event name\n        // (unless you're listening on `\"all\"`, which will cause your callback to\n        // receive the true name of the event as the first argument).\n        trigger: function(name) {\n            if (!this._events) return this;\n            var args = slice.call(arguments, 1);\n            if (!eventsApi(this, 'trigger', name, args)) return this;\n            var events = this._events[name];\n            var allEvents = this._events.all;\n            if (events) triggerEvents(events, args);\n            if (allEvents) triggerEvents(allEvents, arguments);\n            return this;\n        },\n\n        // Tell this object to stop listening to either specific events ... or\n        // to every object it's currently listening to.\n        stopListening: function(obj, name, callback) {\n            var listeningTo = this._listeningTo;\n            if (!listeningTo) return this;\n            var remove = !name && !callback;\n            if (!callback && typeof name === 'object') callback = this;\n            if (obj) (listeningTo = {})[obj._listenId] = obj;\n            for (var id in listeningTo) {\n                obj = listeningTo[id];\n                obj.off(name, callback, this);\n                if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];\n            }\n            return this;\n        }\n\n    };\n\n    // Regular expression used to split event strings.\n    var eventSplitter = /\\s+/;\n\n    // Implement fancy features of the Events API such as multiple event\n    // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n    // in terms of the existing API.\n    var eventsApi = function(obj, action, name, rest) {\n        if (!name) return true;\n\n        // Handle event maps.\n        if (typeof name === 'object') {\n            for (var key in name) {\n                obj[action].apply(obj, [key, name[key]].concat(rest));\n            }\n            return false;\n        }\n\n        // Handle space separated event names.\n        if (eventSplitter.test(name)) {\n            var names = name.split(eventSplitter);\n            for (var i = 0, l = names.length; i < l; i++) {\n                obj[action].apply(obj, [names[i]].concat(rest));\n            }\n            return false;\n        }\n\n        return true;\n    };\n\n    // A difficult-to-believe, but optimized internal dispatch function for\n    // triggering events. Tries to keep the usual cases speedy (most internal\n    // Backbone events have 3 arguments).\n    var triggerEvents = function(events, args) {\n        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n        switch (args.length) {\n            case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n            case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n            case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n            case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n            default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);\n        }\n    };\n\n    var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n    // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n    // listen to an event in another object ... keeping track of what it's\n    // listening to.\n    _.each(listenMethods, function(implementation, method) {\n        Events[method] = function(obj, name, callback) {\n            var listeningTo = this._listeningTo || (this._listeningTo = {});\n            var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n            listeningTo[id] = obj;\n            if (!callback && typeof name === 'object') callback = this;\n            obj[implementation](name, callback, this);\n            return this;\n        };\n    });\n\n    // Aliases for backwards compatibility.\n    Events.bind   = Events.on;\n    Events.unbind = Events.off;\n\n    // Allow the `Backbone` object to serve as a global event bus, for folks who\n    // want global \"pubsub\" in a convenient place.\n    _.extend(Backbone, Events);\n\n    // Backbone.Model\n    // --------------\n\n    // Backbone **Models** are the basic data object in the framework --\n    // frequently representing a row in a table in a database on your server.\n    // A discrete chunk of data and a bunch of useful, related methods for\n    // performing computations and transformations on that data.\n\n    // Create a new model with the specified attributes. A client id (`cid`)\n    // is automatically generated and assigned for you.\n    var Model = Backbone.Model = function(attributes, options) {\n        var attrs = attributes || {};\n        options || (options = {});\n        this.cid = _.uniqueId('c');\n        this.attributes = {};\n        if (options.collection) this.collection = options.collection;\n        if (options.parse) attrs = this.parse(attrs, options) || {};\n        attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n        this.set(attrs, options);\n        this.changed = {};\n        this.initialize.apply(this, arguments);\n    };\n\n    // Attach all inheritable methods to the Model prototype.\n    _.extend(Model.prototype, Events, {\n\n        // A hash of attributes whose current and previous value differ.\n        changed: null,\n\n        // The value returned during the last failed validation.\n        validationError: null,\n\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n        // CouchDB users may want to set this to `\"_id\"`.\n        idAttribute: 'id',\n\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function(){},\n\n        // Return a copy of the model's `attributes` object.\n        toJSON: function(options) {\n            return _.clone(this.attributes);\n        },\n\n        // Proxy `Backbone.sync` by default -- but override this if you need\n        // custom syncing semantics for *this* particular model.\n        sync: function() {\n            return Backbone.sync.apply(this, arguments);\n        },\n\n        // Get the value of an attribute.\n        get: function(attr) {\n            return this.attributes[attr];\n        },\n\n        // Get the HTML-escaped value of an attribute.\n        escape: function(attr) {\n            return _.escape(this.get(attr));\n        },\n\n        // Returns `true` if the attribute contains a value that is not null\n        // or undefined.\n        has: function(attr) {\n            return this.get(attr) != null;\n        },\n\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\n        // the core primitive operation of a model, updating the data and notifying\n        // anyone who needs to know about the change in state. The heart of the beast.\n        set: function(key, val, options) {\n            var attr, attrs, unset, changes, silent, changing, prev, current;\n            if (key == null) return this;\n\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\n            if (typeof key === 'object') {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n\n            options || (options = {});\n\n            // Run validation.\n            if (!this._validate(attrs, options)) return false;\n\n            // Extract attributes and options.\n            unset           = options.unset;\n            silent          = options.silent;\n            changes         = [];\n            changing        = this._changing;\n            this._changing  = true;\n\n            if (!changing) {\n                this._previousAttributes = _.clone(this.attributes);\n                this.changed = {};\n            }\n            current = this.attributes, prev = this._previousAttributes;\n\n            // Check for changes of `id`.\n            if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n            // For each `set` attribute, update or delete the current value.\n            for (attr in attrs) {\n                val = attrs[attr];\n                if (!_.isEqual(current[attr], val)) changes.push(attr);\n                if (!_.isEqual(prev[attr], val)) {\n                    this.changed[attr] = val;\n                } else {\n                    delete this.changed[attr];\n                }\n                unset ? delete current[attr] : current[attr] = val;\n            }\n\n            // Trigger all relevant attribute changes.\n            if (!silent) {\n                if (changes.length) this._pending = options;\n                for (var i = 0, l = changes.length; i < l; i++) {\n                    this.trigger('change:' + changes[i], this, current[changes[i]], options);\n                }\n            }\n\n            // You might be wondering why there's a `while` loop here. Changes can\n            // be recursively nested within `\"change\"` events.\n            if (changing) return this;\n            if (!silent) {\n                while (this._pending) {\n                    options = this._pending;\n                    this._pending = false;\n                    this.trigger('change', this, options);\n                }\n            }\n            this._pending = false;\n            this._changing = false;\n            return this;\n        },\n\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n        // if the attribute doesn't exist.\n        unset: function(attr, options) {\n            return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n        },\n\n        // Clear all attributes on the model, firing `\"change\"`.\n        clear: function(options) {\n            var attrs = {};\n            for (var key in this.attributes) attrs[key] = void 0;\n            return this.set(attrs, _.extend({}, options, {unset: true}));\n        },\n\n        // Determine if the model has changed since the last `\"change\"` event.\n        // If you specify an attribute name, determine if that attribute has changed.\n        hasChanged: function(attr) {\n            if (attr == null) return !_.isEmpty(this.changed);\n            return _.has(this.changed, attr);\n        },\n\n        // Return an object containing all the attributes that have changed, or\n        // false if there are no changed attributes. Useful for determining what\n        // parts of a view need to be updated and/or what attributes need to be\n        // persisted to the server. Unset attributes will be set to undefined.\n        // You can also pass an attributes object to diff against the model,\n        // determining if there *would be* a change.\n        changedAttributes: function(diff) {\n            if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n            var val, changed = false;\n            var old = this._changing ? this._previousAttributes : this.attributes;\n            for (var attr in diff) {\n                if (_.isEqual(old[attr], (val = diff[attr]))) continue;\n                (changed || (changed = {}))[attr] = val;\n            }\n            return changed;\n        },\n\n        // Get the previous value of an attribute, recorded at the time the last\n        // `\"change\"` event was fired.\n        previous: function(attr) {\n            if (attr == null || !this._previousAttributes) return null;\n            return this._previousAttributes[attr];\n        },\n\n        // Get all of the attributes of the model at the time of the previous\n        // `\"change\"` event.\n        previousAttributes: function() {\n            return _.clone(this._previousAttributes);\n        },\n\n        // Fetch the model from the server. If the server's representation of the\n        // model differs from its current attributes, they will be overridden,\n        // triggering a `\"change\"` event.\n        fetch: function(options) {\n            options = options ? _.clone(options) : {};\n            if (options.parse === void 0) options.parse = true;\n            var model = this;\n            var success = options.success;\n            options.success = function(resp) {\n                if (!model.set(model.parse(resp, options), options)) return false;\n                if (success) success(model, resp, options);\n                model.trigger('sync', model, resp, options);\n            };\n            wrapError(this, options);\n            return this.sync('read', this, options);\n        },\n\n        // Set a hash of model attributes, and sync the model to the server.\n        // If the server returns an attributes hash that differs, the model's\n        // state will be `set` again.\n        save: function(key, val, options) {\n            var attrs, method, xhr, attributes = this.attributes;\n\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\n            if (key == null || typeof key === 'object') {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n\n            options = _.extend({validate: true}, options);\n\n            // If we're not waiting and attributes exist, save acts as\n            // `set(attr).save(null, opts)` with validation. Otherwise, check if\n            // the model will be valid when the attributes, if any, are set.\n            if (attrs && !options.wait) {\n                if (!this.set(attrs, options)) return false;\n            } else {\n                if (!this._validate(attrs, options)) return false;\n            }\n\n            // Set temporary attributes if `{wait: true}`.\n            if (attrs && options.wait) {\n                this.attributes = _.extend({}, attributes, attrs);\n            }\n\n            // After a successful server-side save, the client is (optionally)\n            // updated with the server-side state.\n            if (options.parse === void 0) options.parse = true;\n            var model = this;\n            var success = options.success;\n            options.success = function(resp) {\n                // Ensure attributes are restored during synchronous saves.\n                model.attributes = attributes;\n                var serverAttrs = model.parse(resp, options);\n                if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n                if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n                    return false;\n                }\n                if (success) success(model, resp, options);\n                model.trigger('sync', model, resp, options);\n            };\n            wrapError(this, options);\n\n            method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n            if (method === 'patch') options.attrs = attrs;\n            xhr = this.sync(method, this, options);\n\n            // Restore attributes.\n            if (attrs && options.wait) this.attributes = attributes;\n\n            return xhr;\n        },\n\n        // Destroy this model on the server if it was already persisted.\n        // Optimistically removes the model from its collection, if it has one.\n        // If `wait: true` is passed, waits for the server to respond before removal.\n        destroy: function(options) {\n            options = options ? _.clone(options) : {};\n            var model = this;\n            var success = options.success;\n\n            var destroy = function() {\n                model.trigger('destroy', model, model.collection, options);\n            };\n\n            options.success = function(resp) {\n                if (options.wait || model.isNew()) destroy();\n                if (success) success(model, resp, options);\n                if (!model.isNew()) model.trigger('sync', model, resp, options);\n            };\n\n            if (this.isNew()) {\n                options.success();\n                return false;\n            }\n            wrapError(this, options);\n\n            var xhr = this.sync('delete', this, options);\n            if (!options.wait) destroy();\n            return xhr;\n        },\n\n        // Default URL for the model's representation on the server -- if you're\n        // using Backbone's restful methods, override this to change the endpoint\n        // that will be called.\n        url: function() {\n            var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();\n            if (this.isNew()) return base;\n            return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);\n        },\n\n        // **parse** converts a response into the hash of attributes to be `set` on\n        // the model. The default implementation is just to pass the response along.\n        parse: function(resp, options) {\n            return resp;\n        },\n\n        // Create a new model with identical attributes to this one.\n        clone: function() {\n            return new this.constructor(this.attributes);\n        },\n\n        // A model is new if it has never been saved to the server, and lacks an id.\n        isNew: function() {\n            return this.id == null;\n        },\n\n        // Check if the model is currently in a valid state.\n        isValid: function(options) {\n            return this._validate({}, _.extend(options || {}, { validate: true }));\n        },\n\n        // Run validation against the next complete set of model attributes,\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n        _validate: function(attrs, options) {\n            if (!options.validate || !this.validate) return true;\n            attrs = _.extend({}, this.attributes, attrs);\n            var error = this.validationError = this.validate(attrs, options) || null;\n            if (!error) return true;\n            this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n            return false;\n        }\n\n    });\n\n    // Underscore methods that we want to implement on the Model.\n    var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];\n\n    // Mix in each Underscore method as a proxy to `Model#attributes`.\n    _.each(modelMethods, function(method) {\n        Model.prototype[method] = function() {\n            var args = slice.call(arguments);\n            args.unshift(this.attributes);\n            return _[method].apply(_, args);\n        };\n    });\n\n    // Backbone.Collection\n    // -------------------\n\n    // If models tend to represent a single row of data, a Backbone Collection is\n    // more analagous to a table full of data ... or a small slice or page of that\n    // table, or a collection of rows that belong together for a particular reason\n    // -- all of the messages in this particular folder, all of the documents\n    // belonging to this particular author, and so on. Collections maintain\n    // indexes of their models, both in order, and for lookup by `id`.\n\n    // Create a new **Collection**, perhaps to contain a specific type of `model`.\n    // If a `comparator` is specified, the Collection will maintain\n    // its models in sort order, as they're added and removed.\n    var Collection = Backbone.Collection = function(models, options) {\n        options || (options = {});\n        if (options.model) this.model = options.model;\n        if (options.comparator !== void 0) this.comparator = options.comparator;\n        this._reset();\n        this.initialize.apply(this, arguments);\n        if (models) this.reset(models, _.extend({silent: true}, options));\n    };\n\n    // Default options for `Collection#set`.\n    var setOptions = {add: true, remove: true, merge: true};\n    var addOptions = {add: true, remove: false};\n\n    // Define the Collection's inheritable methods.\n    _.extend(Collection.prototype, Events, {\n\n        // The default model for a collection is just a **Backbone.Model**.\n        // This should be overridden in most cases.\n        model: Model,\n\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function(){},\n\n        // The JSON representation of a Collection is an array of the\n        // models' attributes.\n        toJSON: function(options) {\n            return this.map(function(model){ return model.toJSON(options); });\n        },\n\n        // Proxy `Backbone.sync` by default.\n        sync: function() {\n            return Backbone.sync.apply(this, arguments);\n        },\n\n        // Add a model, or list of models to the set.\n        add: function(models, options) {\n            return this.set(models, _.extend({merge: false}, options, addOptions));\n        },\n\n        // Remove a model, or a list of models from the set.\n        remove: function(models, options) {\n            var singular = !_.isArray(models);\n            models = singular ? [models] : _.clone(models);\n            options || (options = {});\n            var i, l, index, model;\n            for (i = 0, l = models.length; i < l; i++) {\n                model = models[i] = this.get(models[i]);\n                if (!model) continue;\n                index = this.indexOf(model);\n                this.models.splice(index, 1);\n                this.length--;\n                if (!options.silent) {\n                    options.index = index;\n                    model.trigger('remove', model, this, options);\n                }\n                this._removeReference(model, options);\n            }\n            return singular ? models[0] : models;\n        },\n\n        // Update a collection by `set`-ing a new list of models, adding new ones,\n        // removing models that are no longer present, and merging models that\n        // already exist in the collection, as necessary. Similar to **Model#set**,\n        // the core operation for updating the data contained by the collection.\n        set: function(models, options) {\n            options = _.defaults({}, options, setOptions);\n            if (options.parse) models = this.parse(models, options);\n            var singular = !_.isArray(models);\n            models = singular ? (models ? [models] : []) : _.clone(models);\n            var i, l, id, model, attrs, existing, sort;\n            var at = options.at;\n            var targetModel = this.model;\n            var sortable = this.comparator && (at == null) && options.sort !== false;\n            var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n            var toAdd = [], toRemove = [], modelMap = {};\n            var add = options.add, merge = options.merge, remove = options.remove;\n            var order = !sortable && add && remove ? [] : false;\n\n            // Turn bare objects into model references, and prevent invalid models\n            // from being added.\n            for (i = 0, l = models.length; i < l; i++) {\n                attrs = models[i] || {};\n                if (attrs instanceof Model) {\n                    id = model = attrs;\n                } else {\n                    id = attrs[targetModel.prototype.idAttribute || 'id'];\n                }\n\n                // If a duplicate is found, prevent it from being added and\n                // optionally merge it into the existing model.\n                if (existing = this.get(id)) {\n                    if (remove) modelMap[existing.cid] = true;\n                    if (merge) {\n                        attrs = attrs === model ? model.attributes : attrs;\n                        if (options.parse) attrs = existing.parse(attrs, options);\n                        existing.set(attrs, options);\n                        if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n                    }\n                    models[i] = existing;\n\n                    // If this is a new, valid model, push it to the `toAdd` list.\n                } else if (add) {\n                    model = models[i] = this._prepareModel(attrs, options);\n                    if (!model) continue;\n                    toAdd.push(model);\n                    this._addReference(model, options);\n                }\n                if (order) order.push(existing || model);\n            }\n\n            // Remove nonexistent models if appropriate.\n            if (remove) {\n                for (i = 0, l = this.length; i < l; ++i) {\n                    if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n                }\n                if (toRemove.length) this.remove(toRemove, options);\n            }\n\n            // See if sorting is needed, update `length` and splice in new models.\n            if (toAdd.length || (order && order.length)) {\n                if (sortable) sort = true;\n                this.length += toAdd.length;\n                if (at != null) {\n                    for (i = 0, l = toAdd.length; i < l; i++) {\n                        this.models.splice(at + i, 0, toAdd[i]);\n                    }\n                } else {\n                    if (order) this.models.length = 0;\n                    var orderedModels = order || toAdd;\n                    for (i = 0, l = orderedModels.length; i < l; i++) {\n                        this.models.push(orderedModels[i]);\n                    }\n                }\n            }\n\n            // Silently sort the collection if appropriate.\n            if (sort) this.sort({silent: true});\n\n            // Unless silenced, it's time to fire all appropriate add/sort events.\n            if (!options.silent) {\n                for (i = 0, l = toAdd.length; i < l; i++) {\n                    (model = toAdd[i]).trigger('add', model, this, options);\n                }\n                if (sort || (order && order.length)) this.trigger('sort', this, options);\n            }\n\n            // Return the added (or merged) model (or models).\n            return singular ? models[0] : models;\n        },\n\n        // When you have more items than you want to add or remove individually,\n        // you can reset the entire set with a new list of models, without firing\n        // any granular `add` or `remove` events. Fires `reset` when finished.\n        // Useful for bulk operations and optimizations.\n        reset: function(models, options) {\n            options || (options = {});\n            for (var i = 0, l = this.models.length; i < l; i++) {\n                this._removeReference(this.models[i], options);\n            }\n            options.previousModels = this.models;\n            this._reset();\n            models = this.add(models, _.extend({silent: true}, options));\n            if (!options.silent) this.trigger('reset', this, options);\n            return models;\n        },\n\n        // Add a model to the end of the collection.\n        push: function(model, options) {\n            return this.add(model, _.extend({at: this.length}, options));\n        },\n\n        // Remove a model from the end of the collection.\n        pop: function(options) {\n            var model = this.at(this.length - 1);\n            this.remove(model, options);\n            return model;\n        },\n\n        // Add a model to the beginning of the collection.\n        unshift: function(model, options) {\n            return this.add(model, _.extend({at: 0}, options));\n        },\n\n        // Remove a model from the beginning of the collection.\n        shift: function(options) {\n            var model = this.at(0);\n            this.remove(model, options);\n            return model;\n        },\n\n        // Slice out a sub-array of models from the collection.\n        slice: function() {\n            return slice.apply(this.models, arguments);\n        },\n\n        // Get a model from the set by id.\n        get: function(obj) {\n            if (obj == null) return void 0;\n            return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];\n        },\n\n        // Get the model at the given index.\n        at: function(index) {\n            return this.models[index];\n        },\n\n        // Return models with matching attributes. Useful for simple cases of\n        // `filter`.\n        where: function(attrs, first) {\n            if (_.isEmpty(attrs)) return first ? void 0 : [];\n            return this[first ? 'find' : 'filter'](function(model) {\n                for (var key in attrs) {\n                    if (attrs[key] !== model.get(key)) return false;\n                }\n                return true;\n            });\n        },\n\n        // Return the first model with matching attributes. Useful for simple cases\n        // of `find`.\n        findWhere: function(attrs) {\n            return this.where(attrs, true);\n        },\n\n        // Force the collection to re-sort itself. You don't need to call this under\n        // normal circumstances, as the set will maintain sort order as each item\n        // is added.\n        sort: function(options) {\n            if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\n            options || (options = {});\n\n            // Run sort based on type of `comparator`.\n            if (_.isString(this.comparator) || this.comparator.length === 1) {\n                this.models = this.sortBy(this.comparator, this);\n            } else {\n                this.models.sort(_.bind(this.comparator, this));\n            }\n\n            if (!options.silent) this.trigger('sort', this, options);\n            return this;\n        },\n\n        // Pluck an attribute from each model in the collection.\n        pluck: function(attr) {\n            return _.invoke(this.models, 'get', attr);\n        },\n\n        // Fetch the default set of models for this collection, resetting the\n        // collection when they arrive. If `reset: true` is passed, the response\n        // data will be passed through the `reset` method instead of `set`.\n        fetch: function(options) {\n            options = options ? _.clone(options) : {};\n            if (options.parse === void 0) options.parse = true;\n            var success = options.success;\n            var collection = this;\n            options.success = function(resp) {\n                var method = options.reset ? 'reset' : 'set';\n                collection[method](resp, options);\n                if (success) success(collection, resp, options);\n                collection.trigger('sync', collection, resp, options);\n            };\n            wrapError(this, options);\n            return this.sync('read', this, options);\n        },\n\n        // Create a new instance of a model in this collection. Add the model to the\n        // collection immediately, unless `wait: true` is passed, in which case we\n        // wait for the server to agree.\n        create: function(model, options) {\n            options = options ? _.clone(options) : {};\n            if (!(model = this._prepareModel(model, options))) return false;\n            if (!options.wait) this.add(model, options);\n            var collection = this;\n            var success = options.success;\n            options.success = function(model, resp) {\n                if (options.wait) collection.add(model, options);\n                if (success) success(model, resp, options);\n            };\n            model.save(null, options);\n            return model;\n        },\n\n        // **parse** converts a response into a list of models to be added to the\n        // collection. The default implementation is just to pass it through.\n        parse: function(resp, options) {\n            return resp;\n        },\n\n        // Create a new collection with an identical list of models as this one.\n        clone: function() {\n            return new this.constructor(this.models);\n        },\n\n        // Private method to reset all internal state. Called when the collection\n        // is first initialized or reset.\n        _reset: function() {\n            this.length = 0;\n            this.models = [];\n            this._byId  = {};\n        },\n\n        // Prepare a hash of attributes (or other model) to be added to this\n        // collection.\n        _prepareModel: function(attrs, options) {\n            if (attrs instanceof Model) return attrs;\n            options = options ? _.clone(options) : {};\n            options.collection = this;\n            var model = new this.model(attrs, options);\n            if (!model.validationError) return model;\n            this.trigger('invalid', this, model.validationError, options);\n            return false;\n        },\n\n        // Internal method to create a model's ties to a collection.\n        _addReference: function(model, options) {\n            this._byId[model.cid] = model;\n            if (model.id != null) this._byId[model.id] = model;\n            if (!model.collection) model.collection = this;\n            model.on('all', this._onModelEvent, this);\n        },\n\n        // Internal method to sever a model's ties to a collection.\n        _removeReference: function(model, options) {\n            delete this._byId[model.id];\n            delete this._byId[model.cid];\n            if (this === model.collection) delete model.collection;\n            model.off('all', this._onModelEvent, this);\n        },\n\n        // Internal method called every time a model in the set fires an event.\n        // Sets need to update their indexes when models change ids. All other\n        // events simply proxy through. \"add\" and \"remove\" events that originate\n        // in other collections are ignored.\n        _onModelEvent: function(event, model, collection, options) {\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\n            if (event === 'destroy') this.remove(model, options);\n            if (model && event === 'change:' + model.idAttribute) {\n                delete this._byId[model.previous(model.idAttribute)];\n                if (model.id != null) this._byId[model.id] = model;\n            }\n            this.trigger.apply(this, arguments);\n        }\n\n    });\n\n    // Underscore methods that we want to implement on the Collection.\n    // 90% of the core usefulness of Backbone Collections is actually implemented\n    // right here:\n    var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',\n        'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',\n        'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',\n        'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',\n        'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',\n        'lastIndexOf', 'isEmpty', 'chain', 'sample'];\n\n    // Mix in each Underscore method as a proxy to `Collection#models`.\n    _.each(methods, function(method) {\n        Collection.prototype[method] = function() {\n            var args = slice.call(arguments);\n            args.unshift(this.models);\n            return _[method].apply(_, args);\n        };\n    });\n\n    // Underscore methods that take a property name as an argument.\n    var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];\n\n    // Use attributes instead of properties.\n    _.each(attributeMethods, function(method) {\n        Collection.prototype[method] = function(value, context) {\n            var iterator = _.isFunction(value) ? value : function(model) {\n                return model.get(value);\n            };\n            return _[method](this.models, iterator, context);\n        };\n    });\n\n    // Backbone.View\n    // -------------\n\n    // Backbone Views are almost more convention than they are actual code. A View\n    // is simply a JavaScript object that represents a logical chunk of UI in the\n    // DOM. This might be a single item, an entire list, a sidebar or panel, or\n    // even the surrounding frame which wraps your whole app. Defining a chunk of\n    // UI as a **View** allows you to define your DOM events declaratively, without\n    // having to worry about render order ... and makes it easy for the view to\n    // react to specific changes in the state of your models.\n\n    // Creating a Backbone.View creates its initial element outside of the DOM,\n    // if an existing element is not provided...\n    var View = Backbone.View = function(options) {\n        this.cid = _.uniqueId('view');\n        options || (options = {});\n        _.extend(this, _.pick(options, viewOptions));\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n        this.delegateEvents();\n    };\n\n    // Cached regex to split keys for `delegate`.\n    var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n    // List of view options to be merged as properties.\n    var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n    // Set up all inheritable **Backbone.View** properties and methods.\n    _.extend(View.prototype, Events, {\n\n        // The default `tagName` of a View's element is `\"div\"`.\n        tagName: 'div',\n\n        // jQuery delegate for element lookup, scoped to DOM elements within the\n        // current view. This should be preferred to global lookups where possible.\n        $: function(selector) {\n            return this.$el.find(selector);\n        },\n\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function(){},\n\n        // **render** is the core function that your view should override, in order\n        // to populate its element (`this.el`), with the appropriate HTML. The\n        // convention is for **render** to always return `this`.\n        render: function() {\n            return this;\n        },\n\n        // Remove this view by taking the element out of the DOM, and removing any\n        // applicable Backbone.Events listeners.\n        remove: function() {\n            this.$el.remove();\n            this.stopListening();\n            return this;\n        },\n\n        // Change the view's element (`this.el` property), including event\n        // re-delegation.\n        setElement: function(element, delegate) {\n            if (this.$el) this.undelegateEvents();\n            this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n            this.el = this.$el[0];\n            if (delegate !== false) this.delegateEvents();\n            return this;\n        },\n\n        // Set callbacks, where `this.events` is a hash of\n        //\n        // *{\"event selector\": \"callback\"}*\n        //\n        //     {\n        //       'mousedown .title':  'edit',\n        //       'click .button':     'save',\n        //       'click .open':       function(e) { ... }\n        //     }\n        //\n        // pairs. Callbacks will be bound to the view, with `this` set properly.\n        // Uses event delegation for efficiency.\n        // Omitting the selector binds the event to `this.el`.\n        // This only works for delegate-able events: not `focus`, `blur`, and\n        // not `change`, `submit`, and `reset` in Internet Explorer.\n        delegateEvents: function(events) {\n            if (!(events || (events = _.result(this, 'events')))) return this;\n            this.undelegateEvents();\n            for (var key in events) {\n                var method = events[key];\n                if (!_.isFunction(method)) method = this[events[key]];\n                if (!method) continue;\n\n                var match = key.match(delegateEventSplitter);\n                var eventName = match[1], selector = match[2];\n                method = _.bind(method, this);\n                eventName += '.delegateEvents' + this.cid;\n                if (selector === '') {\n                    this.$el.on(eventName, method);\n                } else {\n                    this.$el.on(eventName, selector, method);\n                }\n            }\n            return this;\n        },\n\n        // Clears all callbacks previously bound to the view with `delegateEvents`.\n        // You usually don't need to use this, but may wish to if you have multiple\n        // Backbone views attached to the same DOM element.\n        undelegateEvents: function() {\n            this.$el.off('.delegateEvents' + this.cid);\n            return this;\n        },\n\n        // Ensure that the View has a DOM element to render into.\n        // If `this.el` is a string, pass it through `$()`, take the first\n        // matching element, and re-assign it to `el`. Otherwise, create\n        // an element from the `id`, `className` and `tagName` properties.\n        _ensureElement: function() {\n            if (!this.el) {\n                var attrs = _.extend({}, _.result(this, 'attributes'));\n                if (this.id) attrs.id = _.result(this, 'id');\n                if (this.className) attrs['class'] = _.result(this, 'className');\n                var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);\n                this.setElement($el, false);\n            } else {\n                this.setElement(_.result(this, 'el'), false);\n            }\n        }\n\n    });\n\n    // Backbone.sync\n    // -------------\n\n    // Override this function to change the manner in which Backbone persists\n    // models to the server. You will be passed the type of request, and the\n    // model in question. By default, makes a RESTful Ajax request\n    // to the model's `url()`. Some possible customizations could be:\n    //\n    // * Use `setTimeout` to batch rapid-fire updates into a single request.\n    // * Send up the models as XML instead of JSON.\n    // * Persist models via WebSockets instead of Ajax.\n    //\n    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n    // as `POST`, with a `_method` parameter containing the true HTTP method,\n    // as well as all requests with the body as `application/x-www-form-urlencoded`\n    // instead of `application/json` with the model in a param named `model`.\n    // Useful when interfacing with server-side languages like **PHP** that make\n    // it difficult to read the body of `PUT` requests.\n    Backbone.sync = function(method, model, options) {\n        var type = methodMap[method];\n\n        // Default options, unless specified.\n        _.defaults(options || (options = {}), {\n            emulateHTTP: Backbone.emulateHTTP,\n            emulateJSON: Backbone.emulateJSON\n        });\n\n        // Default JSON-request options.\n        var params = {type: type, dataType: 'json'};\n\n        // Ensure that we have a URL.\n        if (!options.url) {\n            params.url = _.result(model, 'url') || urlError();\n        }\n\n        // Ensure that we have the appropriate request data.\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n            params.contentType = 'application/json';\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\n        }\n\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\n        if (options.emulateJSON) {\n            params.contentType = 'application/x-www-form-urlencoded';\n            params.data = params.data ? {model: params.data} : {};\n        }\n\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n        // And an `X-HTTP-Method-Override` header.\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n            params.type = 'POST';\n            if (options.emulateJSON) params.data._method = type;\n            var beforeSend = options.beforeSend;\n            options.beforeSend = function(xhr) {\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\n                if (beforeSend) return beforeSend.apply(this, arguments);\n            };\n        }\n\n        // Don't process data on a non-GET request.\n        if (params.type !== 'GET' && !options.emulateJSON) {\n            params.processData = false;\n        }\n\n        // If we're sending a `PATCH` request, and we're in an old Internet Explorer\n        // that still has ActiveX enabled by default, override jQuery to use that\n        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\n        if (params.type === 'PATCH' && noXhrPatch) {\n            params.xhr = function() {\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\n            };\n        }\n\n        // Make the request, allowing the user to override any Ajax options.\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n        model.trigger('request', model, xhr, options);\n        return xhr;\n    };\n\n    var noXhrPatch = typeof window !== 'undefined' && !!window.ActiveXObject && !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n\n    // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n    var methodMap = {\n        'create': 'POST',\n        'update': 'PUT',\n        'patch':  'PATCH',\n        'delete': 'DELETE',\n        'read':   'GET'\n    };\n\n    // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n    // Override this if you'd like to use a different library.\n    Backbone.ajax = function() {\n        return Backbone.$.ajax.apply(Backbone.$, arguments);\n    };\n\n    // Backbone.Router\n    // ---------------\n\n    // Routers map faux-URLs to actions, and fire events when routes are\n    // matched. Creating a new one sets its `routes` hash, if not set statically.\n    var Router = Backbone.Router = function(options) {\n        options || (options = {});\n        if (options.routes) this.routes = options.routes;\n        this._bindRoutes();\n        this.initialize.apply(this, arguments);\n    };\n\n    // Cached regular expressions for matching named param parts and splatted\n    // parts of route strings.\n    var optionalParam = /\\((.*?)\\)/g;\n    var namedParam    = /(\\(\\?)?:\\w+/g;\n    var splatParam    = /\\*\\w+/g;\n    var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n    // Set up all inheritable **Backbone.Router** properties and methods.\n    _.extend(Router.prototype, Events, {\n\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function(){},\n\n        // Manually bind a single named route to a callback. For example:\n        //\n        //     this.route('search/:query/p:num', 'search', function(query, num) {\n        //       ...\n        //     });\n        //\n        route: function(route, name, callback) {\n            if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n            if (_.isFunction(name)) {\n                callback = name;\n                name = '';\n            }\n            if (!callback) callback = this[name];\n            var router = this;\n            Backbone.history.route(route, function(fragment) {\n                var args = router._extractParameters(route, fragment);\n                callback && callback.apply(router, args);\n                router.trigger.apply(router, ['route:' + name].concat(args));\n                router.trigger('route', name, args);\n                Backbone.history.trigger('route', router, name, args);\n            });\n            return this;\n        },\n\n        // Simple proxy to `Backbone.history` to save a fragment into the history.\n        navigate: function(fragment, options) {\n            Backbone.history.navigate(fragment, options);\n            return this;\n        },\n\n        // Bind all defined routes to `Backbone.history`. We have to reverse the\n        // order of the routes here to support behavior where the most general\n        // routes can be defined at the bottom of the route map.\n        _bindRoutes: function() {\n            if (!this.routes) return;\n            this.routes = _.result(this, 'routes');\n            var route, routes = _.keys(this.routes);\n            while ((route = routes.pop()) != null) {\n                this.route(route, this.routes[route]);\n            }\n        },\n\n        // Convert a route string into a regular expression, suitable for matching\n        // against the current location hash.\n        _routeToRegExp: function(route) {\n            route = route.replace(escapeRegExp, '\\\\$&')\n                .replace(optionalParam, '(?:$1)?')\n                .replace(namedParam, function(match, optional) {\n                    return optional ? match : '([^\\/]+)';\n                })\n                .replace(splatParam, '(.*?)');\n            return new RegExp('^' + route + '$');\n        },\n\n        // Given a route, and a URL fragment that it matches, return the array of\n        // extracted decoded parameters. Empty or unmatched parameters will be\n        // treated as `null` to normalize cross-browser behavior.\n        _extractParameters: function(route, fragment) {\n            var params = route.exec(fragment).slice(1);\n            return _.map(params, function(param) {\n                return param ? decodeURIComponent(param) : null;\n            });\n        }\n\n    });\n\n    // Backbone.History\n    // ----------------\n\n    // Handles cross-browser history management, based on either\n    // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n    // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n    // and URL fragments. If the browser supports neither (old IE, natch),\n    // falls back to polling.\n    var History = Backbone.History = function() {\n        this.handlers = [];\n        _.bindAll(this, 'checkUrl');\n\n        // Ensure that `History` can be used outside of the browser.\n        if (typeof window !== 'undefined') {\n            this.location = window.location;\n            this.history = window.history;\n        }\n    };\n\n    // Cached regex for stripping a leading hash/slash and trailing space.\n    var routeStripper = /^[#\\/]|\\s+$/g;\n\n    // Cached regex for stripping leading and trailing slashes.\n    var rootStripper = /^\\/+|\\/+$/g;\n\n    // Cached regex for detecting MSIE.\n    var isExplorer = /msie [\\w.]+/;\n\n    // Cached regex for removing a trailing slash.\n    var trailingSlash = /\\/$/;\n\n    // Cached regex for stripping urls of hash and query.\n    var pathStripper = /[?#].*$/;\n\n    // Has the history handling already been started?\n    History.started = false;\n\n    // Set up all inheritable **Backbone.History** properties and methods.\n    _.extend(History.prototype, Events, {\n\n        // The default interval to poll for hash changes, if necessary, is\n        // twenty times a second.\n        interval: 50,\n\n        // Gets the true hash value. Cannot use location.hash directly due to bug\n        // in Firefox where location.hash will always be decoded.\n        getHash: function(window) {\n            var match = (window || this).location.href.match(/#(.*)$/);\n            return match ? match[1] : '';\n        },\n\n        // Get the cross-browser normalized URL fragment, either from the URL,\n        // the hash, or the override.\n        getFragment: function(fragment, forcePushState) {\n            if (fragment == null) {\n                if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n                    fragment = this.location.pathname;\n                    var root = this.root.replace(trailingSlash, '');\n                    if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);\n                } else {\n                    fragment = this.getHash();\n                }\n            }\n            return fragment.replace(routeStripper, '');\n        },\n\n        // Start the hash change handling, returning `true` if the current URL matches\n        // an existing route, and `false` otherwise.\n        start: function(options) {\n            if (History.started) throw new Error(\"Backbone.history has already been started\");\n            History.started = true;\n\n            // Figure out the initial configuration. Do we need an iframe?\n            // Is pushState desired ... is it available?\n            this.options          = _.extend({root: '/'}, this.options, options);\n            this.root             = this.options.root;\n            this._wantsHashChange = this.options.hashChange !== false;\n            this._wantsPushState  = !!this.options.pushState;\n            this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);\n            var fragment          = this.getFragment();\n            var docMode           = document.documentMode;\n            var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n            // Normalize root to always include a leading and trailing slash.\n            this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n            if (oldIE && this._wantsHashChange) {\n                this.iframe = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\n                this.navigate(fragment);\n            }\n\n            // Depending on whether we're using pushState or hashes, and whether\n            // 'onhashchange' is supported, determine how we check the URL state.\n            if (this._hasPushState) {\n                Backbone.$(window).on('popstate', this.checkUrl);\n            } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n                Backbone.$(window).on('hashchange', this.checkUrl);\n            } else if (this._wantsHashChange) {\n                this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n            }\n\n            // Determine if we need to change the base url, for a pushState link\n            // opened by a non-pushState browser.\n            this.fragment = fragment;\n            var loc = this.location;\n            var atRoot = loc.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n\n            // Transition from hashChange to pushState or vice versa if both are\n            // requested.\n            if (this._wantsHashChange && this._wantsPushState) {\n\n                // If we've started off with a route from a `pushState`-enabled\n                // browser, but we're currently in a browser that doesn't support it...\n                if (!this._hasPushState && !atRoot) {\n                    this.fragment = this.getFragment(null, true);\n                    this.location.replace(this.root + this.location.search + '#' + this.fragment);\n                    // Return immediately as browser will do redirect to new url\n                    return true;\n\n                    // Or if we've started out with a hash-based route, but we're currently\n                    // in a browser where it could be `pushState`-based instead...\n                } else if (this._hasPushState && atRoot && loc.hash) {\n                    this.fragment = this.getHash().replace(routeStripper, '');\n                    this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);\n                }\n\n            }\n\n            if (!this.options.silent) return this.loadUrl();\n        },\n\n        // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n        // but possibly useful for unit testing Routers.\n        stop: function() {\n            Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);\n            clearInterval(this._checkUrlInterval);\n            History.started = false;\n        },\n\n        // Add a route to be tested when the fragment changes. Routes added later\n        // may override previous routes.\n        route: function(route, callback) {\n            this.handlers.unshift({route: route, callback: callback});\n        },\n\n        // Checks the current URL to see if it has changed, and if it has,\n        // calls `loadUrl`, normalizing across the hidden iframe.\n        checkUrl: function(e) {\n            var current = this.getFragment();\n            if (current === this.fragment && this.iframe) {\n                current = this.getFragment(this.getHash(this.iframe));\n            }\n            if (current === this.fragment) return false;\n            if (this.iframe) this.navigate(current);\n            this.loadUrl();\n        },\n\n        // Attempt to load the current URL fragment. If a route succeeds with a\n        // match, returns `true`. If no defined routes matches the fragment,\n        // returns `false`.\n        loadUrl: function(fragment) {\n            fragment = this.fragment = this.getFragment(fragment);\n            return _.any(this.handlers, function(handler) {\n                if (handler.route.test(fragment)) {\n                    handler.callback(fragment);\n                    return true;\n                }\n            });\n        },\n\n        // Save a fragment into the hash history, or replace the URL state if the\n        // 'replace' option is passed. You are responsible for properly URL-encoding\n        // the fragment in advance.\n        //\n        // The options object can contain `trigger: true` if you wish to have the\n        // route callback be fired (not usually desirable), or `replace: true`, if\n        // you wish to modify the current URL without adding an entry to the history.\n        navigate: function(fragment, options) {\n            if (!History.started) return false;\n            if (!options || options === true) options = {trigger: !!options};\n\n            var url = this.root + (fragment = this.getFragment(fragment || ''));\n\n            // Strip the fragment of the query and hash for matching.\n            fragment = fragment.replace(pathStripper, '');\n\n            if (this.fragment === fragment) return;\n            this.fragment = fragment;\n\n            // Don't include a trailing slash on the root.\n            if (fragment === '' && url !== '/') url = url.slice(0, -1);\n\n            // If pushState is available, we use it to set the fragment as a real URL.\n            if (this._hasPushState) {\n                this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n                // If hash changes haven't been explicitly disabled, update the hash\n                // fragment to store history.\n            } else if (this._wantsHashChange) {\n                this._updateHash(this.location, fragment, options.replace);\n                if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {\n                    // Opening and closing the iframe tricks IE7 and earlier to push a\n                    // history entry on hash-tag change.  When replace is true, we don't\n                    // want this.\n                    if(!options.replace) this.iframe.document.open().close();\n                    this._updateHash(this.iframe.location, fragment, options.replace);\n                }\n\n                // If you've told us that you explicitly don't want fallback hashchange-\n                // based history, then `navigate` becomes a page refresh.\n            } else {\n                return this.location.assign(url);\n            }\n            if (options.trigger) return this.loadUrl(fragment);\n        },\n\n        // Update the hash location, either replacing the current entry, or adding\n        // a new one to the browser history.\n        _updateHash: function(location, fragment, replace) {\n            if (replace) {\n                var href = location.href.replace(/(javascript:|#).*$/, '');\n                location.replace(href + '#' + fragment);\n            } else {\n                // Some browsers require that `hash` contains a leading #.\n                location.hash = '#' + fragment;\n            }\n        }\n\n    });\n\n    // Create the default Backbone.history.\n    Backbone.history = new History;\n\n    // Helpers\n    // -------\n\n    // Helper function to correctly set up the prototype chain, for subclasses.\n    // Similar to `goog.inherits`, but uses a hash of prototype properties and\n    // class properties to be extended.\n    var extend = function(protoProps, staticProps) {\n        var parent = this;\n        var child;\n\n        // The constructor function for the new subclass is either defined by you\n        // (the \"constructor\" property in your `extend` definition), or defaulted\n        // by us to simply call the parent's constructor.\n        if (protoProps && _.has(protoProps, 'constructor')) {\n            child = protoProps.constructor;\n        } else {\n            child = function(){ return parent.apply(this, arguments); };\n        }\n\n        // Add static properties to the constructor function, if supplied.\n        _.extend(child, parent, staticProps);\n\n        // Set the prototype chain to inherit from `parent`, without calling\n        // `parent`'s constructor function.\n        var Surrogate = function(){ this.constructor = child; };\n        Surrogate.prototype = parent.prototype;\n        child.prototype = new Surrogate;\n\n        // Add prototype properties (instance properties) to the subclass,\n        // if supplied.\n        if (protoProps) _.extend(child.prototype, protoProps);\n\n        // Set a convenience property in case the parent's prototype is needed\n        // later.\n        child.__super__ = parent.prototype;\n\n        return child;\n    };\n\n    // Set up inheritance for the model, collection, router, view and history.\n    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n    // Throw an error when a URL is needed, and none is supplied.\n    var urlError = function() {\n        throw new Error('A \"url\" property or function must be specified');\n    };\n\n    // Wrap an optional error callback with a fallback error event.\n    var wrapError = function(model, options) {\n        var error = options.error;\n        options.error = function(resp) {\n            if (error) error(model, resp, options);\n            model.trigger('error', model, resp, options);\n        };\n    };\n\n    return Backbone;\n\n}));","(function() {\n  var WebSocket = window.WebSocket || window.MozWebSocket;\n  var br = window.brunch = (window.brunch || {});\n  var ar = br['auto-reload'] = (br['auto-reload'] || {});\n  if (!WebSocket || ar.disabled) return;\n\n  var cacheBuster = function(url){\n    var date = Math.round(Date.now() / 1000).toString();\n    url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n\n  var reloaders = {\n    page: function(){\n      window.location.reload(true);\n    },\n\n    stylesheet: function(){\n      [].slice\n        .call(document.querySelectorAll('link[rel=\"stylesheet\"]'))\n        .filter(function(link){\n          return (link != null && link.href != null);\n        })\n        .forEach(function(link) {\n          link.href = cacheBuster(link.href);\n        });\n    }\n  };\n  var port = ar.port || 9485;\n  var host = (!br['server']) ? window.location.hostname : br['server'];\n  var connection = new WebSocket('ws://' + host + ':' + port);\n  connection.onmessage = function(event) {\n    var message = event.data;\n    if (ar.disabled) return;\n    if (reloaders[message] != null) {\n      reloaders[message]();\n    } else {\n      reloaders.page();\n    }\n  };\n})();\n","\njade = (function(exports){\n/*!\n * Jade - runtime\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Lame Array.isArray() polyfill for now.\n */\n\nif (!Array.isArray) {\n  Array.isArray = function(arr){\n    return '[object Array]' == Object.prototype.toString.call(arr);\n  };\n}\n\n/**\n * Lame Object.keys() polyfill for now.\n */\n\nif (!Object.keys) {\n  Object.keys = function(obj){\n    var arr = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        arr.push(key);\n      }\n    }\n    return arr;\n  }\n}\n\n/**\n * Merge two attribute objects giving precedence\n * to values in object `b`. Classes are special-cased\n * allowing for arrays and merging/joining appropriately\n * resulting in a string.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api private\n */\n\nexports.merge = function merge(a, b) {\n  var ac = a['class'];\n  var bc = b['class'];\n\n  if (ac || bc) {\n    ac = ac || [];\n    bc = bc || [];\n    if (!Array.isArray(ac)) ac = [ac];\n    if (!Array.isArray(bc)) bc = [bc];\n    ac = ac.filter(nulls);\n    bc = bc.filter(nulls);\n    a['class'] = ac.concat(bc).join(' ');\n  }\n\n  for (var key in b) {\n    if (key != 'class') {\n      a[key] = b[key];\n    }\n  }\n\n  return a;\n};\n\n/**\n * Filter null `val`s.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction nulls(val) {\n  return val != null;\n}\n\n/**\n * Render the given attributes object.\n *\n * @param {Object} obj\n * @param {Object} escaped\n * @return {String}\n * @api private\n */\n\nexports.attrs = function attrs(obj, escaped){\n  var buf = []\n    , terse = obj.terse;\n\n  delete obj.terse;\n  var keys = Object.keys(obj)\n    , len = keys.length;\n\n  if (len) {\n    buf.push('');\n    for (var i = 0; i < len; ++i) {\n      var key = keys[i]\n        , val = obj[key];\n\n      if ('boolean' == typeof val || null == val) {\n        if (val) {\n          terse\n            ? buf.push(key)\n            : buf.push(key + '=\"' + key + '\"');\n        }\n      } else if (0 == key.indexOf('data') && 'string' != typeof val) {\n        buf.push(key + \"='\" + JSON.stringify(val) + \"'\");\n      } else if ('class' == key && Array.isArray(val)) {\n        buf.push(key + '=\"' + exports.escape(val.join(' ')) + '\"');\n      } else if (escaped && escaped[key]) {\n        buf.push(key + '=\"' + exports.escape(val) + '\"');\n      } else {\n        buf.push(key + '=\"' + val + '\"');\n      }\n    }\n  }\n\n  return buf.join(' ');\n};\n\n/**\n * Escape the given string of `html`.\n *\n * @param {String} html\n * @return {String}\n * @api private\n */\n\nexports.escape = function escape(html){\n  return String(html)\n    .replace(/&(?!(\\w+|\\#\\d+);)/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n};\n\n/**\n * Re-throw the given `err` in context to the\n * the jade in `filename` at the given `lineno`.\n *\n * @param {Error} err\n * @param {String} filename\n * @param {String} lineno\n * @api private\n */\n\nexports.rethrow = function rethrow(err, filename, lineno){\n  if (!filename) throw err;\n\n  var context = 3\n    , str = require('fs').readFileSync(filename, 'utf8')\n    , lines = str.split('\\n')\n    , start = Math.max(lineno - context, 0)\n    , end = Math.min(lines.length, lineno + context);\n\n  // Error context\n  var context = lines.slice(start, end).map(function(line, i){\n    var curr = i + start + 1;\n    return (curr == lineno ? '  > ' : '    ')\n      + curr\n      + '| '\n      + line;\n  }).join('\\n');\n\n  // Alter exception message\n  err.path = filename;\n  err.message = (filename || 'Jade') + ':' + lineno\n    + '\\n' + context + '\\n\\n' + err.message;\n  throw err;\n};\n\n  return exports;\n\n})({});\n","/**\n * Backbone localStorage Adapter\n * Version 1.1.7\n *\n * https://github.com/jeromegn/Backbone.localStorage\n */\n(function (root, factory) {\n   if (typeof exports === 'object' && typeof require === 'function') {\n     module.exports = factory(require(\"underscore\"), require(\"backbone\"));\n   } else if (typeof define === \"function\" && define.amd) {\n      // AMD. Register as an anonymous module.\n      define([\"underscore\",\"backbone\"], function(_, Backbone) {\n        // Use global variables if the locals are undefined.\n        return factory(_ || root._, Backbone || root.Backbone);\n      });\n   } else {\n      // RequireJS isn't being used. Assume underscore and backbone are loaded in <script> tags\n      factory(_, Backbone);\n   }\n}(this, function(_, Backbone) {\n// A simple module to replace `Backbone.sync` with *localStorage*-based\n// persistence. Models are given GUIDS, and saved into a JSON object. Simple\n// as that.\n\n// Hold reference to Underscore.js and Backbone.js in the closure in order\n// to make things work even if they are removed from the global namespace\n\n// Generate four random hex digits.\nfunction S4() {\n   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n};\n\n// Generate a pseudo-GUID by concatenating random hexadecimal.\nfunction guid() {\n   return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n};\n\n// Our Store is represented by a single JS object in *localStorage*. Create it\n// with a meaningful name, like the name you'd give a table.\n// window.Store is deprectated, use Backbone.LocalStorage instead\nBackbone.LocalStorage = window.Store = function(name) {\n  if( !this.localStorage ) {\n    throw \"Backbone.localStorage: Environment does not support localStorage.\"\n  }\n  this.name = name;\n  var store = this.localStorage().getItem(this.name);\n  this.records = (store && store.split(\",\")) || [];\n};\n\n_.extend(Backbone.LocalStorage.prototype, {\n\n  // Save the current state of the **Store** to *localStorage*.\n  save: function() {\n    this.localStorage().setItem(this.name, this.records.join(\",\"));\n  },\n\n  // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already\n  // have an id of it's own.\n  create: function(model) {\n    if (!model.id) {\n      model.id = guid();\n      model.set(model.idAttribute, model.id);\n    }\n    this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\n    this.records.push(model.id.toString());\n    this.save();\n    return this.find(model);\n  },\n\n  // Update a model by replacing its copy in `this.data`.\n  update: function(model) {\n    this.localStorage().setItem(this.name+\"-\"+model.id, JSON.stringify(model));\n    if (!_.include(this.records, model.id.toString()))\n      this.records.push(model.id.toString()); this.save();\n    return this.find(model);\n  },\n\n  // Retrieve a model from `this.data` by id.\n  find: function(model) {\n    return this.jsonData(this.localStorage().getItem(this.name+\"-\"+model.id));\n  },\n\n  // Return the array of all models currently in storage.\n  findAll: function() {\n    // Lodash removed _#chain in v1.0.0-rc.1\n    return (_.chain || _)(this.records)\n      .map(function(id){\n        return this.jsonData(this.localStorage().getItem(this.name+\"-\"+id));\n      }, this)\n      .compact()\n      .value();\n  },\n\n  // Delete a model from `this.data`, returning it.\n  destroy: function(model) {\n    if (model.isNew())\n      return false\n    this.localStorage().removeItem(this.name+\"-\"+model.id);\n    this.records = _.reject(this.records, function(id){\n      return id === model.id.toString();\n    });\n    this.save();\n    return model;\n  },\n\n  localStorage: function() {\n    return localStorage;\n  },\n\n  // fix for \"illegal access\" error on Android when JSON.parse is passed null\n  jsonData: function (data) {\n      return data && JSON.parse(data);\n  },\n\n  // Clear localStorage for specific collection.\n  _clear: function() {\n    var local = this.localStorage(),\n      itemRe = new RegExp(\"^\" + this.name + \"-\");\n\n    // Remove id-tracking item (e.g., \"foo\").\n    local.removeItem(this.name);\n\n    // Lodash removed _#chain in v1.0.0-rc.1\n    // Match all data items (e.g., \"foo-ID\") and remove.\n    (_.chain || _)(local).keys()\n      .filter(function (k) { return itemRe.test(k); })\n      .each(function (k) { local.removeItem(k); });\n\n    this.records.length = 0;\n  },\n\n  // Size of localStorage.\n  _storageSize: function() {\n    return this.localStorage().length;\n  }\n\n});\n\n// localSync delegate to the model or collection's\n// *localStorage* property, which should be an instance of `Store`.\n// window.Store.sync and Backbone.localSync is deprecated, use Backbone.LocalStorage.sync instead\nBackbone.LocalStorage.sync = window.Store.sync = Backbone.localSync = function(method, model, options) {\n  var store = model.localStorage || model.collection.localStorage;\n\n  var resp, errorMessage, syncDfd = Backbone.$.Deferred && Backbone.$.Deferred(); //If $ is having Deferred - use it.\n\n  try {\n\n    switch (method) {\n      case \"read\":\n        resp = model.id != undefined ? store.find(model) : store.findAll();\n        break;\n      case \"create\":\n        resp = store.create(model);\n        break;\n      case \"update\":\n        resp = store.update(model);\n        break;\n      case \"delete\":\n        resp = store.destroy(model);\n        break;\n    }\n\n  } catch(error) {\n    if (error.code === 22 && store._storageSize() === 0)\n      errorMessage = \"Private browsing is unsupported\";\n    else\n      errorMessage = error.message;\n  }\n\n  if (resp) {\n    if (options && options.success) {\n      if (Backbone.VERSION === \"0.9.10\") {\n        options.success(model, resp, options);\n      } else {\n        options.success(resp);\n      }\n    }\n    if (syncDfd) {\n      syncDfd.resolve(resp);\n    }\n\n  } else {\n    errorMessage = errorMessage ? errorMessage\n                                : \"Record Not Found\";\n\n    if (options && options.error)\n      if (Backbone.VERSION === \"0.9.10\") {\n        options.error(model, errorMessage, options);\n      } else {\n        options.error(errorMessage);\n      }\n\n    if (syncDfd)\n      syncDfd.reject(errorMessage);\n  }\n\n  // add compatibility with $.ajax\n  // always execute callback for success and error\n  if (options && options.complete) options.complete(resp);\n\n  return syncDfd && syncDfd.promise();\n};\n\nBackbone.ajaxSync = Backbone.sync;\n\nBackbone.getSyncMethod = function(model) {\n  if(model.localStorage || (model.collection && model.collection.localStorage)) {\n    return Backbone.localSync;\n  }\n\n  return Backbone.ajaxSync;\n};\n\n// Override 'Backbone.sync' to default to localSync,\n// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'\nBackbone.sync = function(method, model, options) {\n  return Backbone.getSyncMethod(model).apply(this, [method, model, options]);\n};\n\nreturn Backbone.LocalStorage;\n}));","/* dancer.js - v0.3.2 - 2012-09-29\n * https://github.com/jsantell/dancer.js\n * Copyright (c) 2012 Jordan Santell; Licensed MIT */\n\n(function() {\n\n    var Dancer = function () {\n        this.audioAdapter = Dancer._getAdapter( this );\n        this.events = {};\n        this.sections = [];\n        this.bind( 'update', update );\n    };\n\n    Dancer.version = '0.3.2';\n    Dancer.adapters = {};\n\n    Dancer.prototype = {\n\n        load : function ( source ) {\n            var path;\n\n            // Loading an Audio element\n            if ( source instanceof HTMLElement ) {\n                this.source = source;\n                if ( Dancer.isSupported() === 'flash' ) {\n                    this.source = { src: Dancer._getMP3SrcFromAudio( source ) };\n                }\n\n                // Loading an object with src, [codecs]\n            } else {\n                this.source = window.Audio ? new Audio() : {};\n                this.source.src = Dancer._makeSupportedPath( source.src, source.codecs );\n            }\n\n            this.audio = this.audioAdapter.load( this.source );\n            return this;\n        },\n\n        /* Controls */\n\n        play : function () {\n            this.audioAdapter.play();\n            return this;\n        },\n\n        pause : function () {\n            this.audioAdapter.pause();\n            return this;\n        },\n\n        setVolume : function ( volume ) {\n            this.audioAdapter.setVolume( volume );\n            return this;\n        },\n\n\n        /* Actions */\n\n        createKick : function ( options ) {\n            return new Dancer.Kick( this, options );\n        },\n\n        bind : function ( name, callback ) {\n            if ( !this.events[ name ] ) {\n                this.events[ name ] = [];\n            }\n            this.events[ name ].push( callback );\n            return this;\n        },\n\n        unbind : function ( name ) {\n            if ( this.events[ name ] ) {\n                delete this.events[ name ];\n            }\n            return this;\n        },\n\n        trigger : function ( name ) {\n            var _this = this;\n            if ( this.events[ name ] ) {\n                this.events[ name ].forEach(function( callback ) {\n                    callback.call( _this );\n                });\n            }\n            return this;\n        },\n\n\n        /* Getters */\n\n        getVolume : function () {\n            return this.audioAdapter.getVolume();\n        },\n\n        getProgress : function () {\n            return this.audioAdapter.getProgress();\n        },\n\n        getTime : function () {\n            return this.audioAdapter.getTime();\n        },\n\n        // Returns the magnitude of a frequency or average over a range of frequencies\n        getFrequency : function ( freq, endFreq ) {\n            var sum = 0;\n            if ( endFreq !== undefined ) {\n                for ( var i = freq; i <= endFreq; i++ ) {\n                    sum += this.getSpectrum()[ i ];\n                }\n                return sum / ( endFreq - freq + 1 );\n            } else {\n                return this.getSpectrum()[ freq ];\n            }\n        },\n\n        getWaveform : function () {\n            return this.audioAdapter.getWaveform();\n        },\n\n        getSpectrum : function () {\n            return this.audioAdapter.getSpectrum();\n        },\n\n        isLoaded : function () {\n            return this.audioAdapter.isLoaded;\n        },\n\n        isPlaying : function () {\n            return this.audioAdapter.isPlaying;\n        },\n\n\n        /* Sections */\n\n        after : function ( time, callback ) {\n            var _this = this;\n            this.sections.push({\n                condition : function () {\n                    return _this.getTime() > time;\n                },\n                callback : callback\n            });\n            return this;\n        },\n\n        before : function ( time, callback ) {\n            var _this = this;\n            this.sections.push({\n                condition : function () {\n                    return _this.getTime() < time;\n                },\n                callback : callback\n            });\n            return this;\n        },\n\n        between : function ( startTime, endTime, callback ) {\n            var _this = this;\n            this.sections.push({\n                condition : function () {\n                    return _this.getTime() > startTime && _this.getTime() < endTime;\n                },\n                callback : callback\n            });\n            return this;\n        },\n\n        onceAt : function ( time, callback ) {\n            var\n                _this = this,\n                thisSection = null;\n            this.sections.push({\n                condition : function () {\n                    return _this.getTime() > time && !this.called;\n                },\n                callback : function () {\n                    callback.call( this );\n                    thisSection.called = true;\n                },\n                called : false\n            });\n            // Baking the section in the closure due to callback's this being the dancer instance\n            thisSection = this.sections[ this.sections.length - 1 ];\n            return this;\n        }\n    };\n\n    function update () {\n        for ( var i in this.sections ) {\n            if ( this.sections[ i ].condition() )\n                this.sections[ i ].callback.call( this );\n        }\n    }\n\n    window.Dancer = Dancer;\n})();\n\n(function ( Dancer ) {\n\n    var CODECS = {\n            'mp3' : 'audio/mpeg;',\n            'ogg' : 'audio/ogg; codecs=\"vorbis\"',\n            'wav' : 'audio/wav; codecs=\"1\"',\n            'aac' : 'audio/mp4; codecs=\"mp4a.40.2\"'\n        },\n        audioEl = document.createElement( 'audio' );\n\n    Dancer.options = {};\n\n    Dancer.setOptions = function ( o ) {\n        for ( var option in o ) {\n            if ( o.hasOwnProperty( option ) ) {\n                Dancer.options[ option ] = o[ option ];\n            }\n        }\n    };\n\n    Dancer.isSupported = function () {\n        if ( !window.Float32Array || !window.Uint32Array ) {\n            return null;\n        } else if ( !isUnsupportedSafari() && ( window.AudioContext || window.webkitAudioContext )) {\n            return 'webaudio';\n        } else if ( audioEl && audioEl.mozSetup ) {\n            return 'audiodata';\n        } else if ( FlashDetect.versionAtLeast( 9 ) ) {\n            return 'flash';\n        } else {\n            return '';\n        }\n    };\n\n    Dancer.canPlay = function ( type ) {\n        var canPlay = audioEl.canPlayType;\n        return !!(\n            Dancer.isSupported() === 'flash' ?\n                type.toLowerCase() === 'mp3' :\n                audioEl.canPlayType &&\n                    audioEl.canPlayType( CODECS[ type.toLowerCase() ] ).replace( /no/, ''));\n    };\n\n    Dancer.addPlugin = function ( name, fn ) {\n        if ( Dancer.prototype[ name ] === undefined ) {\n            Dancer.prototype[ name ] = fn;\n        }\n    };\n\n    Dancer._makeSupportedPath = function ( source, codecs ) {\n        if ( !codecs ) { return source; }\n\n        for ( var i = 0; i < codecs.length; i++ ) {\n            if ( Dancer.canPlay( codecs[ i ] ) ) {\n                return source + '.' + codecs[ i ];\n            }\n        }\n        return source;\n    };\n\n    Dancer._getAdapter = function ( instance ) {\n        switch ( Dancer.isSupported() ) {\n            case 'webaudio':\n                return new Dancer.adapters.webkit( instance );\n            case 'audiodata':\n                return new Dancer.adapters.moz( instance );\n            case 'flash':\n                return new Dancer.adapters.flash( instance );\n            default:\n                return null;\n        }\n    };\n\n    Dancer._getMP3SrcFromAudio = function ( audioEl ) {\n        var sources = audioEl.children;\n        if ( audioEl.src ) { return audioEl.src; }\n        for ( var i = sources.length; i--; ) {\n            if (( sources[ i ].type || '' ).match( /audio\\/mpeg/ )) return sources[ i ].src;\n        }\n        return null;\n    };\n\n    // Browser detection is lame, but Safari 6 has Web Audio API,\n    // but does not support processing audio from a Media Element Source\n    // https://gist.github.com/3265344\n    function isUnsupportedSafari () {\n        var\n            isApple = !!( navigator.vendor || '' ).match( /Apple/ ),\n            version = navigator.userAgent.match( /Version\\/([^ ]*)/ );\n        version = version ? parseFloat( version[ 1 ] ) : 0;\n        return isApple && version <= 6;\n    }\n\n})( window.Dancer );\n\n(function ( undefined ) {\n    var Kick = function ( dancer, o ) {\n        o = o || {};\n        this.dancer    = dancer;\n        this.frequency = o.frequency !== undefined ? o.frequency : [ 0, 10 ];\n        this.threshold = o.threshold !== undefined ? o.threshold :  0.3;\n        this.decay     = o.decay     !== undefined ? o.decay     :  0.02;\n        this.onKick    = o.onKick;\n        this.offKick   = o.offKick;\n        this.isOn      = false;\n        this.currentThreshold = this.threshold;\n\n        var _this = this;\n        this.dancer.bind( 'update', function () {\n            _this.onUpdate();\n        });\n    };\n\n    Kick.prototype = {\n        on  : function () {\n            this.isOn = true;\n            return this;\n        },\n        off : function () {\n            this.isOn = false;\n            return this;\n        },\n\n        set : function ( o ) {\n            o = o || {};\n            this.frequency = o.frequency !== undefined ? o.frequency : this.frequency;\n            this.threshold = o.threshold !== undefined ? o.threshold : this.threshold;\n            this.decay     = o.decay     !== undefined ? o.decay : this.decay;\n            this.onKick    = o.onKick    || this.onKick;\n            this.offKick   = o.offKick   || this.offKick;\n        },\n\n        onUpdate : function () {\n            if ( !this.isOn ) { return; }\n            var magnitude = this.maxAmplitude( this.frequency );\n            if ( magnitude >= this.currentThreshold &&\n                magnitude >= this.threshold ) {\n                this.currentThreshold = magnitude;\n                this.onKick && this.onKick.call( this.dancer, magnitude );\n            } else {\n                this.offKick && this.offKick.call( this.dancer, magnitude );\n                this.currentThreshold -= this.decay;\n            }\n        },\n        maxAmplitude : function ( frequency ) {\n            var\n                max = 0,\n                fft = this.dancer.getSpectrum();\n\n            // Sloppy array check\n            if ( !frequency.length ) {\n                return frequency < fft.length ?\n                    fft[ ~~frequency ] :\n                    null;\n            }\n\n            for ( var i = frequency[ 0 ], l = frequency[ 1 ]; i <= l; i++ ) {\n                if ( fft[ i ] > max ) { max = fft[ i ]; }\n            }\n            return max;\n        }\n    };\n\n    window.Dancer.Kick = Kick;\n})();\n\n(function() {\n    var\n        SAMPLE_SIZE = 2048,\n        SAMPLE_RATE = 44100;\n\n    var adapter = function ( dancer ) {\n        this.dancer = dancer;\n        this.audio = new Audio();\n        this.context = window.AudioContext ?\n            new window.AudioContext() :\n            new window.webkitAudioContext();\n    };\n\n    adapter.prototype = {\n\n        load : function ( _source ) {\n            var _this = this;\n            this.audio = _source;\n\n            this.isLoaded = false;\n            this.progress = 0;\n\n            this.proc = this.context.createJavaScriptNode( SAMPLE_SIZE / 2, 1, 1 );\n            this.proc.onaudioprocess = function ( e ) {\n                _this.update.call( _this, e );\n            };\n            this.gain = this.context.createGainNode();\n\n            this.fft = new FFT( SAMPLE_SIZE / 2, SAMPLE_RATE );\n            this.signal = new Float32Array( SAMPLE_SIZE / 2 );\n\n            if ( this.audio.readyState < 3 ) {\n                this.audio.addEventListener( 'canplay', function () {\n                    connectContext.call( _this );\n                });\n            } else {\n                connectContext.call( _this );\n            }\n\n            this.audio.addEventListener( 'progress', function ( e ) {\n                if ( e.currentTarget.duration ) {\n                    _this.progress = e.currentTarget.seekable.end( 0 ) / e.currentTarget.duration;\n                }\n            });\n\n            return this.audio;\n        },\n\n        play : function () {\n            this.audio.play();\n            this.isPlaying = true;\n        },\n\n        pause : function () {\n            this.audio.pause();\n            this.isPlaying = false;\n        },\n\n        setVolume : function ( volume ) {\n            this.gain.gain.value = volume;\n        },\n\n        getVolume : function () {\n            return this.gain.gain.value;\n        },\n\n        getProgress : function() {\n            return this.progress;\n        },\n\n        getWaveform : function () {\n            return this.signal;\n        },\n\n        getSpectrum : function () {\n            return this.fft.spectrum;\n        },\n\n        getTime : function () {\n            return this.audio.currentTime;\n        },\n\n        update : function ( e ) {\n            if ( !this.isPlaying || !this.isLoaded ) return;\n\n            var\n                buffers = [],\n                channels = e.inputBuffer.numberOfChannels,\n                resolution = SAMPLE_SIZE / channels,\n                sum = function ( prev, curr ) {\n                    return prev[ i ] + curr[ i ];\n                }, i;\n\n            for ( i = channels; i--; ) {\n                buffers.push( e.inputBuffer.getChannelData( i ) );\n            }\n\n            for ( i = 0; i < resolution; i++ ) {\n                this.signal[ i ] = channels > 1 ?\n                    buffers.reduce( sum ) / channels :\n                    buffers[ 0 ][ i ];\n            }\n\n            this.fft.forward( this.signal );\n            this.dancer.trigger( 'update' );\n        }\n    };\n\n    function connectContext () {\n        this.source = this.context.createMediaElementSource( this.audio );\n        this.source.connect( this.proc );\n        this.source.connect( this.gain );\n        this.gain.connect( this.context.destination );\n        this.proc.connect( this.context.destination );\n\n        this.isLoaded = true;\n        this.progress = 1;\n        this.dancer.trigger( 'loaded' );\n    }\n\n    Dancer.adapters.webkit = adapter;\n\n})();\n\n(function() {\n\n    var adapter = function ( dancer ) {\n        this.dancer = dancer;\n        this.audio = new Audio();\n    };\n\n    adapter.prototype = {\n\n        load : function ( _source ) {\n            var _this = this;\n            this.audio = _source;\n\n            this.isLoaded = false;\n            this.progress = 0;\n\n            if ( this.audio.readyState < 3 ) {\n                this.audio.addEventListener( 'loadedmetadata', function () {\n                    getMetadata.call( _this );\n                }, false);\n            } else {\n                getMetadata.call( _this );\n            }\n\n            this.audio.addEventListener( 'MozAudioAvailable', function ( e ) {\n                _this.update( e );\n            }, false);\n\n            this.audio.addEventListener( 'progress', function ( e ) {\n                if ( e.currentTarget.duration ) {\n                    _this.progress = e.currentTarget.seekable.end( 0 ) / e.currentTarget.duration;\n                }\n            }, false);\n\n            return this.audio;\n        },\n\n        play : function () {\n            this.audio.play();\n            this.isPlaying = true;\n        },\n\n        pause : function () {\n            this.audio.pause();\n            this.isPlaying = false;\n        },\n\n        setVolume : function ( volume ) {\n            this.audio.volume = volume;\n        },\n\n        getVolume : function () {\n            return this.audio.volume;\n        },\n\n        getProgress : function () {\n            return this.progress;\n        },\n\n        getWaveform : function () {\n            return this.signal;\n        },\n\n        getSpectrum : function () {\n            return this.fft.spectrum;\n        },\n\n        getTime : function () {\n            return this.audio.currentTime;\n        },\n\n        update : function ( e ) {\n            if ( !this.isPlaying || !this.isLoaded ) return;\n\n            for ( var i = 0, j = this.fbLength / 2; i < j; i++ ) {\n                this.signal[ i ] = ( e.frameBuffer[ 2 * i ] + e.frameBuffer[ 2 * i + 1 ] ) / 2;\n            }\n\n            this.fft.forward( this.signal );\n            this.dancer.trigger( 'update' );\n        }\n    };\n\n    function getMetadata () {\n        this.fbLength = this.audio.mozFrameBufferLength;\n        this.channels = this.audio.mozChannels;\n        this.rate     = this.audio.mozSampleRate;\n        this.fft      = new FFT( this.fbLength / this.channels, this.rate );\n        this.signal   = new Float32Array( this.fbLength / this.channels );\n        this.isLoaded = true;\n        this.progress = 1;\n        this.dancer.trigger( 'loaded' );\n    }\n\n    Dancer.adapters.moz = adapter;\n\n})();\n\n(function() {\n    var\n        SAMPLE_SIZE  = 1024,\n        SAMPLE_RATE  = 44100,\n        smLoaded     = false,\n        smLoading    = false,\n        CONVERSION_COEFFICIENT = 0.93;\n\n    var adapter = function ( dancer ) {\n        this.dancer = dancer;\n        this.wave_L = [];\n        this.wave_R = [];\n        this.spectrum = [];\n        window.SM2_DEFER = true;\n    };\n\n    adapter.prototype = {\n        // `source` can be either an Audio element, if supported, or an object\n        // either way, the path is stored in the `src` property\n        load : function ( source ) {\n            var _this = this;\n            this.path = source ? source.src : this.path;\n\n            this.isLoaded = false;\n            this.progress = 0;\n\n            !window.soundManager && !smLoading && loadSM.call( this );\n\n            if ( window.soundManager ) {\n                this.audio = soundManager.createSound({\n                    id       : 'dancer' + Math.random() + '',\n                    url      : this.path,\n                    stream   : true,\n                    autoPlay : false,\n                    autoLoad : true,\n                    whileplaying : function () {\n                        _this.update();\n                    },\n                    whileloading : function () {\n                        _this.progress = this.bytesLoaded / this.bytesTotal;\n                    },\n                    onload   : function () {\n                        _this.fft = new FFT( SAMPLE_SIZE, SAMPLE_RATE );\n                        _this.signal = new Float32Array( SAMPLE_SIZE );\n                        _this.waveform = new Float32Array( SAMPLE_SIZE );\n                        _this.isLoaded = true;\n                        _this.progress = 1;\n                        _this.dancer.trigger( 'loaded' );\n                    }\n                });\n                this.dancer.audio = this.audio;\n            }\n\n            // Returns audio if SM already loaded -- otherwise,\n            // sets dancer instance's audio property after load\n            return this.audio;\n        },\n\n        play : function () {\n            this.audio.play();\n            this.isPlaying = true;\n        },\n\n        pause : function () {\n            this.audio.pause();\n            this.isPlaying = false;\n        },\n\n        setVolume : function ( volume ) {\n            this.audio.setVolume( volume * 100 );\n        },\n\n        getVolume : function () {\n            return this.audio.volume / 100;\n        },\n\n        getProgress : function () {\n            return this.progress;\n        },\n\n        getWaveform : function () {\n            return this.waveform;\n        },\n\n        getSpectrum : function () {\n            return this.fft.spectrum;\n        },\n\n        getTime : function () {\n            return this.audio.position / 1000;\n        },\n\n        update : function () {\n            if ( !this.isPlaying && !this.isLoaded ) return;\n            this.wave_L = this.audio.waveformData.left;\n            this.wave_R = this.audio.waveformData.right;\n            var avg;\n            for ( var i = 0, j = this.wave_L.length; i < j; i++ ) {\n                avg = parseFloat(this.wave_L[ i ]) + parseFloat(this.wave_R[ i ]);\n                this.waveform[ 2 * i ]     = avg / 2;\n                this.waveform[ i * 2 + 1 ] = avg / 2;\n                this.signal[ 2 * i ]       = avg * CONVERSION_COEFFICIENT;\n                this.signal[ i * 2 + 1 ]   = avg * CONVERSION_COEFFICIENT;\n            }\n\n            this.fft.forward( this.signal );\n            this.dancer.trigger( 'update' );\n        }\n    };\n\n    function loadSM () {\n        var adapter = this;\n        smLoading = true;\n        loadScript( Dancer.options.flashJS, function () {\n            soundManager = new SoundManager();\n            soundManager.flashVersion = 9;\n            soundManager.flash9Options.useWaveformData = true;\n            soundManager.useWaveformData = true;\n            soundManager.useHighPerformance = true;\n            soundManager.useFastPolling = true;\n            soundManager.multiShot = false;\n            soundManager.debugMode = false;\n            soundManager.debugFlash = false;\n            soundManager.url = Dancer.options.flashSWF;\n            soundManager.onready(function () {\n                smLoaded = true;\n                adapter.load();\n            });\n            soundManager.ontimeout(function(){\n                console.error( 'Error loading SoundManager2.swf' );\n            });\n            soundManager.beginDelayedInit();\n        });\n    }\n\n    function loadScript ( url, callback ) {\n        var\n            script   = document.createElement( 'script' ),\n            appender = document.getElementsByTagName( 'script' )[0];\n        script.type = 'text/javascript';\n        script.src = url;\n        script.onload = callback;\n        appender.parentNode.insertBefore( script, appender );\n    }\n\n    Dancer.adapters.flash = adapter;\n\n})();\n\n/*\n *  DSP.js - a comprehensive digital signal processing  library for javascript\n *\n *  Created by Corban Brook <corbanbrook@gmail.com> on 2010-01-01.\n *  Copyright 2010 Corban Brook. All rights reserved.\n *\n */\n\n// Fourier Transform Module used by DFT, FFT, RFFT\nfunction FourierTransform(bufferSize, sampleRate) {\n    this.bufferSize = bufferSize;\n    this.sampleRate = sampleRate;\n    this.bandwidth  = 2 / bufferSize * sampleRate / 2;\n\n    this.spectrum   = new Float32Array(bufferSize/2);\n    this.real       = new Float32Array(bufferSize);\n    this.imag       = new Float32Array(bufferSize);\n\n    this.peakBand   = 0;\n    this.peak       = 0;\n\n    /**\n     * Calculates the *middle* frequency of an FFT band.\n     *\n     * @param {Number} index The index of the FFT band.\n     *\n     * @returns The middle frequency in Hz.\n     */\n    this.getBandFrequency = function(index) {\n        return this.bandwidth * index + this.bandwidth / 2;\n    };\n\n    this.calculateSpectrum = function() {\n        var spectrum  = this.spectrum,\n            real      = this.real,\n            imag      = this.imag,\n            bSi       = 2 / this.bufferSize,\n            sqrt      = Math.sqrt,\n            rval,\n            ival,\n            mag;\n\n        for (var i = 0, N = bufferSize/2; i < N; i++) {\n            rval = real[i];\n            ival = imag[i];\n            mag = bSi * sqrt(rval * rval + ival * ival);\n\n            if (mag > this.peak) {\n                this.peakBand = i;\n                this.peak = mag;\n            }\n\n            spectrum[i] = mag;\n        }\n    };\n}\n\n/**\n * FFT is a class for calculating the Discrete Fourier Transform of a signal\n * with the Fast Fourier Transform algorithm.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\nfunction FFT(bufferSize, sampleRate) {\n    FourierTransform.call(this, bufferSize, sampleRate);\n\n    this.reverseTable = new Uint32Array(bufferSize);\n\n    var limit = 1;\n    var bit = bufferSize >> 1;\n\n    var i;\n\n    while (limit < bufferSize) {\n        for (i = 0; i < limit; i++) {\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n        }\n\n        limit = limit << 1;\n        bit = bit >> 1;\n    }\n\n    this.sinTable = new Float32Array(bufferSize);\n    this.cosTable = new Float32Array(bufferSize);\n\n    for (i = 0; i < bufferSize; i++) {\n        this.sinTable[i] = Math.sin(-Math.PI/i);\n        this.cosTable[i] = Math.cos(-Math.PI/i);\n    }\n}\n\n/**\n * Performs a forward transform on the sample buffer.\n * Converts a time domain signal to frequency domain spectra.\n *\n * @param {Array} buffer The sample buffer. Buffer Length must be power of 2\n *\n * @returns The frequency spectrum array\n */\nFFT.prototype.forward = function(buffer) {\n    // Locally scope variables for speed up\n    var bufferSize      = this.bufferSize,\n        cosTable        = this.cosTable,\n        sinTable        = this.sinTable,\n        reverseTable    = this.reverseTable,\n        real            = this.real,\n        imag            = this.imag,\n        spectrum        = this.spectrum;\n\n    var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n    if (Math.pow(2, k) !== bufferSize) { throw \"Invalid buffer size, must be a power of 2.\"; }\n    if (bufferSize !== buffer.length)  { throw \"Supplied buffer is not the same size as defined FFT. FFT Size: \" + bufferSize + \" Buffer Size: \" + buffer.length; }\n\n    var halfSize = 1,\n        phaseShiftStepReal,\n        phaseShiftStepImag,\n        currentPhaseShiftReal,\n        currentPhaseShiftImag,\n        off,\n        tr,\n        ti,\n        tmpReal,\n        i;\n\n    for (i = 0; i < bufferSize; i++) {\n        real[i] = buffer[reverseTable[i]];\n        imag[i] = 0;\n    }\n\n    while (halfSize < bufferSize) {\n        //phaseShiftStepReal = Math.cos(-Math.PI/halfSize);\n        //phaseShiftStepImag = Math.sin(-Math.PI/halfSize);\n        phaseShiftStepReal = cosTable[halfSize];\n        phaseShiftStepImag = sinTable[halfSize];\n\n        currentPhaseShiftReal = 1;\n        currentPhaseShiftImag = 0;\n\n        for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n            i = fftStep;\n\n            while (i < bufferSize) {\n                off = i + halfSize;\n                tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);\n                ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);\n\n                real[off] = real[i] - tr;\n                imag[off] = imag[i] - ti;\n                real[i] += tr;\n                imag[i] += ti;\n\n                i += halfSize << 1;\n            }\n\n            tmpReal = currentPhaseShiftReal;\n            currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);\n            currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);\n        }\n\n        halfSize = halfSize << 1;\n    }\n\n    return this.calculateSpectrum();\n};\n\n/*\n Copyright (c) Copyright (c) 2007, Carl S. Yestrau All rights reserved.\n Code licensed under the BSD License: http://www.featureblend.com/license.txt\n Version: 1.0.4\n */\nvar FlashDetect = new function(){\n    var self = this;\n    self.installed = false;\n    self.raw = \"\";\n    self.major = -1;\n    self.minor = -1;\n    self.revision = -1;\n    self.revisionStr = \"\";\n    var activeXDetectRules = [\n        {\n            \"name\":\"ShockwaveFlash.ShockwaveFlash.7\",\n            \"version\":function(obj){\n                return getActiveXVersion(obj);\n            }\n        },\n        {\n            \"name\":\"ShockwaveFlash.ShockwaveFlash.6\",\n            \"version\":function(obj){\n                var version = \"6,0,21\";\n                try{\n                    obj.AllowScriptAccess = \"always\";\n                    version = getActiveXVersion(obj);\n                }catch(err){}\n                return version;\n            }\n        },\n        {\n            \"name\":\"ShockwaveFlash.ShockwaveFlash\",\n            \"version\":function(obj){\n                return getActiveXVersion(obj);\n            }\n        }\n    ];\n    /**\n     * Extract the ActiveX version of the plugin.\n     *\n     * @param {Object} The flash ActiveX object.\n     * @type String\n     */\n    var getActiveXVersion = function(activeXObj){\n        var version = -1;\n        try{\n            version = activeXObj.GetVariable(\"$version\");\n        }catch(err){}\n        return version;\n    };\n    /**\n     * Try and retrieve an ActiveX object having a specified name.\n     *\n     * @param {String} name The ActiveX object name lookup.\n     * @return One of ActiveX object or a simple object having an attribute of activeXError with a value of true.\n     * @type Object\n     */\n    var getActiveXObject = function(name){\n        var obj = -1;\n        try{\n            obj = new ActiveXObject(name);\n        }catch(err){\n            obj = {activeXError:true};\n        }\n        return obj;\n    };\n    /**\n     * Parse an ActiveX $version string into an object.\n     *\n     * @param {String} str The ActiveX Object GetVariable($version) return value.\n     * @return An object having raw, major, minor, revision and revisionStr attributes.\n     * @type Object\n     */\n    var parseActiveXVersion = function(str){\n        var versionArray = str.split(\",\");//replace with regex\n        return {\n            \"raw\":str,\n            \"major\":parseInt(versionArray[0].split(\" \")[1], 10),\n            \"minor\":parseInt(versionArray[1], 10),\n            \"revision\":parseInt(versionArray[2], 10),\n            \"revisionStr\":versionArray[2]\n        };\n    };\n    /**\n     * Parse a standard enabledPlugin.description into an object.\n     *\n     * @param {String} str The enabledPlugin.description value.\n     * @return An object having raw, major, minor, revision and revisionStr attributes.\n     * @type Object\n     */\n    var parseStandardVersion = function(str){\n        var descParts = str.split(/ +/);\n        var majorMinor = descParts[2].split(/\\./);\n        var revisionStr = descParts[3];\n        return {\n            \"raw\":str,\n            \"major\":parseInt(majorMinor[0], 10),\n            \"minor\":parseInt(majorMinor[1], 10),\n            \"revisionStr\":revisionStr,\n            \"revision\":parseRevisionStrToInt(revisionStr)\n        };\n    };\n    /**\n     * Parse the plugin revision string into an integer.\n     *\n     * @param {String} The revision in string format.\n     * @type Number\n     */\n    var parseRevisionStrToInt = function(str){\n        return parseInt(str.replace(/[a-zA-Z]/g, \"\"), 10) || self.revision;\n    };\n    /**\n     * Is the major version greater than or equal to a specified version.\n     *\n     * @param {Number} version The minimum required major version.\n     * @type Boolean\n     */\n    self.majorAtLeast = function(version){\n        return self.major >= version;\n    };\n    /**\n     * Is the minor version greater than or equal to a specified version.\n     *\n     * @param {Number} version The minimum required minor version.\n     * @type Boolean\n     */\n    self.minorAtLeast = function(version){\n        return self.minor >= version;\n    };\n    /**\n     * Is the revision version greater than or equal to a specified version.\n     *\n     * @param {Number} version The minimum required revision version.\n     * @type Boolean\n     */\n    self.revisionAtLeast = function(version){\n        return self.revision >= version;\n    };\n    /**\n     * Is the version greater than or equal to a specified major, minor and revision.\n     *\n     * @param {Number} major The minimum required major version.\n     * @param {Number} (Optional) minor The minimum required minor version.\n     * @param {Number} (Optional) revision The minimum required revision version.\n     * @type Boolean\n     */\n    self.versionAtLeast = function(major){\n        var properties = [self.major, self.minor, self.revision];\n        var len = Math.min(properties.length, arguments.length);\n        for(i=0; i<len; i++){\n            if(properties[i]>=arguments[i]){\n                if(i+1<len && properties[i]==arguments[i]){\n                    continue;\n                }else{\n                    return true;\n                }\n            }else{\n                return false;\n            }\n        }\n    };\n    /**\n     * Constructor, sets raw, major, minor, revisionStr, revision and installed public properties.\n     */\n    self.FlashDetect = function(){\n        if(navigator.plugins && navigator.plugins.length>0){\n            var type = 'application/x-shockwave-flash';\n            var mimeTypes = navigator.mimeTypes;\n            if(mimeTypes && mimeTypes[type] && mimeTypes[type].enabledPlugin && mimeTypes[type].enabledPlugin.description){\n                var version = mimeTypes[type].enabledPlugin.description;\n                var versionObj = parseStandardVersion(version);\n                self.raw = versionObj.raw;\n                self.major = versionObj.major;\n                self.minor = versionObj.minor;\n                self.revisionStr = versionObj.revisionStr;\n                self.revision = versionObj.revision;\n                self.installed = true;\n            }\n        }else if(navigator.appVersion.indexOf(\"Mac\")==-1 && window.execScript){\n            var version = -1;\n            for(var i=0; i<activeXDetectRules.length && version==-1; i++){\n                var obj = getActiveXObject(activeXDetectRules[i].name);\n                if(!obj.activeXError){\n                    self.installed = true;\n                    version = activeXDetectRules[i].version(obj);\n                    if(version!=-1){\n                        var versionObj = parseActiveXVersion(version);\n                        self.raw = versionObj.raw;\n                        self.major = versionObj.major;\n                        self.minor = versionObj.minor;\n                        self.revision = versionObj.revision;\n                        self.revisionStr = versionObj.revisionStr;\n                    }\n                }\n            }\n        }\n    }();\n};\nFlashDetect.JS_RELEASE = \"1.0.4\";","(function(e){if(\"function\"==typeof bootstrap)bootstrap(\"jade\",e);else if(\"object\"==typeof exports)module.exports=e();else if(\"function\"==typeof define&&define.amd)define(e);else if(\"undefined\"!=typeof ses){if(!ses.ok())return;ses.makeJade=e}else\"undefined\"!=typeof window?window.jade=e():global.jade=e()})(function(){var define,ses,bootstrap,module,exports;\n    return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\n        /*!\n         * Jade - runtime\n         * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n         * MIT Licensed\n         */\n\n        /**\n         * Lame Array.isArray() polyfill for now.\n         */\n\n        if (!Array.isArray) {\n            Array.isArray = function(arr){\n                return '[object Array]' == Object.prototype.toString.call(arr);\n            };\n        }\n\n        /**\n         * Lame Object.keys() polyfill for now.\n         */\n\n        if (!Object.keys) {\n            Object.keys = function(obj){\n                var arr = [];\n                for (var key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        arr.push(key);\n                    }\n                }\n                return arr;\n            }\n        }\n\n        /**\n         * Merge two attribute objects giving precedence\n         * to values in object `b`. Classes are special-cased\n         * allowing for arrays and merging/joining appropriately\n         * resulting in a string.\n         *\n         * @param {Object} a\n         * @param {Object} b\n         * @return {Object} a\n         * @api private\n         */\n\n        exports.merge = function merge(a, b) {\n            var ac = a['class'];\n            var bc = b['class'];\n\n            if (ac || bc) {\n                ac = ac || [];\n                bc = bc || [];\n                if (!Array.isArray(ac)) ac = [ac];\n                if (!Array.isArray(bc)) bc = [bc];\n                a['class'] = ac.concat(bc).filter(nulls);\n            }\n\n            for (var key in b) {\n                if (key != 'class') {\n                    a[key] = b[key];\n                }\n            }\n\n            return a;\n        };\n\n        /**\n         * Filter null `val`s.\n         *\n         * @param {*} val\n         * @return {Boolean}\n         * @api private\n         */\n\n        function nulls(val) {\n            return val != null && val !== '';\n        }\n\n        /**\n         * join array as classes.\n         *\n         * @param {*} val\n         * @return {String}\n         * @api private\n         */\n\n        function joinClasses(val) {\n            return Array.isArray(val) ? val.map(joinClasses).filter(nulls).join(' ') : val;\n        }\n\n        /**\n         * Render the given attributes object.\n         *\n         * @param {Object} obj\n         * @param {Object} escaped\n         * @return {String}\n         * @api private\n         */\n\n        exports.attrs = function attrs(obj, escaped){\n            var buf = []\n                , terse = obj.terse;\n\n            delete obj.terse;\n            var keys = Object.keys(obj)\n                , len = keys.length;\n\n            if (len) {\n                buf.push('');\n                for (var i = 0; i < len; ++i) {\n                    var key = keys[i]\n                        , val = obj[key];\n\n                    if ('boolean' == typeof val || null == val) {\n                        if (val) {\n                            terse\n                                ? buf.push(key)\n                                : buf.push(key + '=\"' + key + '\"');\n                        }\n                    } else if (0 == key.indexOf('data') && 'string' != typeof val) {\n                        buf.push(key + \"='\" + JSON.stringify(val) + \"'\");\n                    } else if ('class' == key) {\n                        if (escaped && escaped[key]){\n                            if (val = exports.escape(joinClasses(val))) {\n                                buf.push(key + '=\"' + val + '\"');\n                            }\n                        } else {\n                            if (val = joinClasses(val)) {\n                                buf.push(key + '=\"' + val + '\"');\n                            }\n                        }\n                    } else if (escaped && escaped[key]) {\n                        buf.push(key + '=\"' + exports.escape(val) + '\"');\n                    } else {\n                        buf.push(key + '=\"' + val + '\"');\n                    }\n                }\n            }\n\n            return buf.join(' ');\n        };\n\n        /**\n         * Escape the given string of `html`.\n         *\n         * @param {String} html\n         * @return {String}\n         * @api private\n         */\n\n        exports.escape = function escape(html){\n            return String(html)\n                .replace(/&/g, '&amp;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;')\n                .replace(/\"/g, '&quot;');\n        };\n\n        /**\n         * Re-throw the given `err` in context to the\n         * the jade in `filename` at the given `lineno`.\n         *\n         * @param {Error} err\n         * @param {String} filename\n         * @param {String} lineno\n         * @api private\n         */\n\n        exports.rethrow = function rethrow(err, filename, lineno, str){\n            if (!(err instanceof Error)) throw err;\n            if ((typeof window != 'undefined' || !filename) && !str) {\n                err.message += ' on line ' + lineno;\n                throw err;\n            }\n            try {\n                str =  str || require('fs').readFileSync(filename, 'utf8')\n            } catch (ex) {\n                rethrow(err, null, lineno)\n            }\n            var context = 3\n                , lines = str.split('\\n')\n                , start = Math.max(lineno - context, 0)\n                , end = Math.min(lines.length, lineno + context);\n\n            // Error context\n            var context = lines.slice(start, end).map(function(line, i){\n                var curr = i + start + 1;\n                return (curr == lineno ? '  > ' : '    ')\n                    + curr\n                    + '| '\n                    + line;\n            }).join('\\n');\n\n            // Alter exception message\n            err.path = filename;\n            err.message = (filename || 'Jade') + ':' + lineno\n                + '\\n' + context + '\\n\\n' + err.message;\n            throw err;\n        };\n\n    },{\"fs\":2}],2:[function(require,module,exports){\n// nothing to see here... no file methods for the browser\n\n    },{}]},{},[1])(1)\n});\n;","/**\n * @license\n * Pixi.JS - v1.3.0\n * Copyright (c) 2012, Mat Groves\n * http://goodboydigital.com/\n *\n * Compiled: 2013-10-17\n *\n * Pixi.JS is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license.php\n */\n!function(){function c(){return f.Matrix=\"undefined\"!=typeof Float32Array?Float32Array:Array,f.Matrix}function d(a){return[(255&a>>16)/255,(255&a>>8)/255,(255&a)/255]}function d(a){return[(255&a>>16)/255,(255&a>>8)/255,(255&a)/255]}var e=this,f=f||{};f.Point=function(a,b){this.x=a||0,this.y=b||0},f.Point.prototype.clone=function(){return new f.Point(this.x,this.y)},f.Point.prototype.constructor=f.Point,f.Rectangle=function(a,b,c,d){this.x=a||0,this.y=b||0,this.width=c||0,this.height=d||0},f.Rectangle.prototype.clone=function(){return new f.Rectangle(this.x,this.y,this.width,this.height)},f.Rectangle.prototype.contains=function(a,b){if(this.width<=0||this.height<=0)return!1;var c=this.x;if(a>=c&&a<=c+this.width){var d=this.y;if(b>=d&&b<=d+this.height)return!0}return!1},f.Rectangle.prototype.constructor=f.Rectangle,f.Polygon=function(a){if(a instanceof Array||(a=Array.prototype.slice.call(arguments)),\"number\"==typeof a[0]){for(var b=[],c=0,d=a.length;d>c;c+=2)b.push(new f.Point(a[c],a[c+1]));a=b}this.points=a},f.Polygon.prototype.clone=function(){for(var a=[],b=0;b<this.points.length;b++)a.push(this.points[b].clone());return new f.Polygon(a)},f.Polygon.prototype.contains=function(a,b){for(var c=!1,d=0,e=this.points.length-1;d<this.points.length;e=d++){var f=this.points[d].x,g=this.points[d].y,h=this.points[e].x,i=this.points[e].y,j=g>b!=i>b&&(h-f)*(b-g)/(i-g)+f>a;j&&(c=!c)}return c},f.Polygon.prototype.constructor=f.Polygon,f.Circle=function(a,b,c){this.x=a||0,this.y=b||0,this.radius=c||0},f.Circle.prototype.clone=function(){return new f.Circle(this.x,this.y,this.radius)},f.Circle.prototype.contains=function(a,b){if(this.radius<=0)return!1;var c=this.x-a,d=this.y-b,e=this.radius*this.radius;return c*=c,d*=d,e>=c+d},f.Circle.prototype.constructor=f.Circle,f.Ellipse=function(a,b,c,d){this.x=a||0,this.y=b||0,this.width=c||0,this.height=d||0},f.Ellipse.prototype.clone=function(){return new f.Ellipse(this.x,this.y,this.width,this.height)},f.Ellipse.prototype.contains=function(a,b){if(this.width<=0||this.height<=0)return!1;var c=(a-this.x)/this.width-.5,d=(b-this.y)/this.height-.5;return c*=c,d*=d,.25>c+d},f.Ellipse.getBounds=function(){return new f.Rectangle(this.x,this.y,this.width,this.height)},f.Ellipse.prototype.constructor=f.Ellipse,c(),f.mat3={},f.mat3.create=function(){var a=new f.Matrix(9);return a[0]=1,a[1]=0,a[2]=0,a[3]=0,a[4]=1,a[5]=0,a[6]=0,a[7]=0,a[8]=1,a},f.mat3.identity=function(a){return a[0]=1,a[1]=0,a[2]=0,a[3]=0,a[4]=1,a[5]=0,a[6]=0,a[7]=0,a[8]=1,a},f.mat4={},f.mat4.create=function(){var a=new f.Matrix(16);return a[0]=1,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=1,a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1,a[11]=0,a[12]=0,a[13]=0,a[14]=0,a[15]=1,a},f.mat3.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],f=a[2],g=a[3],h=a[4],i=a[5],j=a[6],k=a[7],l=a[8],m=b[0],n=b[1],o=b[2],p=b[3],q=b[4],r=b[5],s=b[6],t=b[7],u=b[8];return c[0]=m*d+n*g+o*j,c[1]=m*e+n*h+o*k,c[2]=m*f+n*i+o*l,c[3]=p*d+q*g+r*j,c[4]=p*e+q*h+r*k,c[5]=p*f+q*i+r*l,c[6]=s*d+t*g+u*j,c[7]=s*e+t*h+u*k,c[8]=s*f+t*i+u*l,c},f.mat3.clone=function(a){var b=new f.Matrix(9);return b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8],b},f.mat3.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[5];return a[1]=a[3],a[2]=a[6],a[3]=c,a[5]=a[7],a[6]=d,a[7]=e,a}return b[0]=a[0],b[1]=a[3],b[2]=a[6],b[3]=a[1],b[4]=a[4],b[5]=a[7],b[6]=a[2],b[7]=a[5],b[8]=a[8],b},f.mat3.toMat4=function(a,b){return b||(b=f.mat4.create()),b[15]=1,b[14]=0,b[13]=0,b[12]=0,b[11]=0,b[10]=a[8],b[9]=a[7],b[8]=a[6],b[7]=0,b[6]=a[5],b[5]=a[4],b[4]=a[3],b[3]=0,b[2]=a[2],b[1]=a[1],b[0]=a[0],b},f.mat4.create=function(){var a=new f.Matrix(16);return a[0]=1,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=1,a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1,a[11]=0,a[12]=0,a[13]=0,a[14]=0,a[15]=1,a},f.mat4.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[3],f=a[6],g=a[7],h=a[11];return a[1]=a[4],a[2]=a[8],a[3]=a[12],a[4]=c,a[6]=a[9],a[7]=a[13],a[8]=d,a[9]=f,a[11]=a[14],a[12]=e,a[13]=g,a[14]=h,a}return b[0]=a[0],b[1]=a[4],b[2]=a[8],b[3]=a[12],b[4]=a[1],b[5]=a[5],b[6]=a[9],b[7]=a[13],b[8]=a[2],b[9]=a[6],b[10]=a[10],b[11]=a[14],b[12]=a[3],b[13]=a[7],b[14]=a[11],b[15]=a[15],b},f.mat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],f=a[2],g=a[3],h=a[4],i=a[5],j=a[6],k=a[7],l=a[8],m=a[9],n=a[10],o=a[11],p=a[12],q=a[13],r=a[14],s=a[15],t=b[0],u=b[1],v=b[2],w=b[3];return c[0]=t*d+u*h+v*l+w*p,c[1]=t*e+u*i+v*m+w*q,c[2]=t*f+u*j+v*n+w*r,c[3]=t*g+u*k+v*o+w*s,t=b[4],u=b[5],v=b[6],w=b[7],c[4]=t*d+u*h+v*l+w*p,c[5]=t*e+u*i+v*m+w*q,c[6]=t*f+u*j+v*n+w*r,c[7]=t*g+u*k+v*o+w*s,t=b[8],u=b[9],v=b[10],w=b[11],c[8]=t*d+u*h+v*l+w*p,c[9]=t*e+u*i+v*m+w*q,c[10]=t*f+u*j+v*n+w*r,c[11]=t*g+u*k+v*o+w*s,t=b[12],u=b[13],v=b[14],w=b[15],c[12]=t*d+u*h+v*l+w*p,c[13]=t*e+u*i+v*m+w*q,c[14]=t*f+u*j+v*n+w*r,c[15]=t*g+u*k+v*o+w*s,c},f.DisplayObject=function(){this.last=this,this.first=this,this.position=new f.Point,this.scale=new f.Point(1,1),this.pivot=new f.Point(0,0),this.rotation=0,this.alpha=1,this.visible=!0,this.hitArea=null,this.buttonMode=!1,this.renderable=!1,this.parent=null,this.stage=null,this.worldAlpha=1,this._interactive=!1,this.worldTransform=f.mat3.create(),this.localTransform=f.mat3.create(),this.color=[],this.dynamic=!0,this._sr=0,this._cr=1},f.DisplayObject.prototype.constructor=f.DisplayObject,f.DisplayObject.prototype.setInteractive=function(a){this.interactive=a},Object.defineProperty(f.DisplayObject.prototype,\"interactive\",{get:function(){return this._interactive},set:function(a){this._interactive=a,this.stage&&(this.stage.dirty=!0)}}),Object.defineProperty(f.DisplayObject.prototype,\"mask\",{get:function(){return this._mask},set:function(a){this._mask=a,a?this.addFilter(a):this.removeFilter()}}),f.DisplayObject.prototype.addFilter=function(a){if(!this.filter){this.filter=!0;var b=new f.FilterBlock,c=new f.FilterBlock;b.mask=a,c.mask=a,b.first=b.last=this,c.first=c.last=this,b.open=!0;var d,e,g=b,h=b;e=this.first._iPrev,e?(d=e._iNext,g._iPrev=e,e._iNext=g):d=this,d&&(d._iPrev=h,h._iNext=d);var g=c,h=c,d=null,e=null;e=this.last,d=e._iNext,d&&(d._iPrev=h,h._iNext=d),g._iPrev=e,e._iNext=g;for(var i=this,j=this.last;i;)i.last==j&&(i.last=c),i=i.parent;this.first=b,this.__renderGroup&&this.__renderGroup.addFilterBlocks(b,c),a.renderable=!1}},f.DisplayObject.prototype.removeFilter=function(){if(this.filter){this.filter=!1;var a=this.first,b=a._iNext,c=a._iPrev;b&&(b._iPrev=c),c&&(c._iNext=b),this.first=a._iNext;var d=this.last,b=d._iNext,c=d._iPrev;b&&(b._iPrev=c),c._iNext=b;for(var e=d._iPrev,f=this;f.last==d&&(f.last=e,f=f.parent););var g=a.mask;g.renderable=!0,this.__renderGroup&&this.__renderGroup.removeFilterBlocks(a,d)}},f.DisplayObject.prototype.updateTransform=function(){this.rotation!==this.rotationCache&&(this.rotationCache=this.rotation,this._sr=Math.sin(this.rotation),this._cr=Math.cos(this.rotation));var a=this.localTransform,b=this.parent.worldTransform,c=this.worldTransform;a[0]=this._cr*this.scale.x,a[1]=-this._sr*this.scale.y,a[3]=this._sr*this.scale.x,a[4]=this._cr*this.scale.y;var d=this.pivot.x,e=this.pivot.y,g=a[0],h=a[1],i=this.position.x-a[0]*d-e*a[1],j=a[3],k=a[4],l=this.position.y-a[4]*e-d*a[3],m=b[0],n=b[1],o=b[2],p=b[3],q=b[4],r=b[5];a[2]=i,a[5]=l,c[0]=m*g+n*j,c[1]=m*h+n*k,c[2]=m*i+n*l+o,c[3]=p*g+q*j,c[4]=p*h+q*k,c[5]=p*i+q*l+r,this.worldAlpha=this.alpha*this.parent.worldAlpha,this.vcount=f.visibleCount},f.visibleCount=0,f.DisplayObjectContainer=function(){f.DisplayObject.call(this),this.children=[]},f.DisplayObjectContainer.prototype=Object.create(f.DisplayObject.prototype),f.DisplayObjectContainer.prototype.constructor=f.DisplayObjectContainer,f.DisplayObjectContainer.prototype.addChild=function(a){if(void 0!=a.parent&&a.parent.removeChild(a),a.parent=this,this.children.push(a),this.stage){var b=a;do b.interactive&&(this.stage.dirty=!0),b.stage=this.stage,b=b._iNext;while(b)}var c,d,e=a.first,f=a.last;d=this.filter?this.last._iPrev:this.last,c=d._iNext;for(var g=this,h=d;g;)g.last==h&&(g.last=a.last),g=g.parent;c&&(c._iPrev=f,f._iNext=c),e._iPrev=d,d._iNext=e,this.__renderGroup&&(a.__renderGroup&&a.__renderGroup.removeDisplayObjectAndChildren(a),this.__renderGroup.addDisplayObjectAndChildren(a))},f.DisplayObjectContainer.prototype.addChildAt=function(a,b){if(!(b>=0&&b<=this.children.length))throw new Error(a+\" The index \"+b+\" supplied is out of bounds \"+this.children.length);if(void 0!=a.parent&&a.parent.removeChild(a),a.parent=this,this.stage){var c=a;do c.interactive&&(this.stage.dirty=!0),c.stage=this.stage,c=c._iNext;while(c)}var d,e,f=a.first,g=a.last;if(b==this.children.length){e=this.last;for(var h=this,i=this.last;h;)h.last==i&&(h.last=a.last),h=h.parent}else e=0==b?this:this.children[b-1].last;d=e._iNext,d&&(d._iPrev=g,g._iNext=d),f._iPrev=e,e._iNext=f,this.children.splice(b,0,a),this.__renderGroup&&(a.__renderGroup&&a.__renderGroup.removeDisplayObjectAndChildren(a),this.__renderGroup.addDisplayObjectAndChildren(a))},f.DisplayObjectContainer.prototype.swapChildren=function(){},f.DisplayObjectContainer.prototype.getChildAt=function(a){if(a>=0&&a<this.children.length)return this.children[a];throw new Error(child+\" Both the supplied DisplayObjects must be a child of the caller \"+this)},f.DisplayObjectContainer.prototype.removeChild=function(a){var b=this.children.indexOf(a);if(-1===b)throw new Error(a+\" The supplied DisplayObject must be a child of the caller \"+this);var c=a.first,d=a.last,e=d._iNext,f=c._iPrev;if(e&&(e._iPrev=f),f._iNext=e,this.last==d)for(var g=c._iPrev,h=this;h.last==d.last&&(h.last=g,h=h.parent););if(d._iNext=null,c._iPrev=null,this.stage){var i=a;do i.interactive&&(this.stage.dirty=!0),i.stage=null,i=i._iNext;while(i)}a.__renderGroup&&a.__renderGroup.removeDisplayObjectAndChildren(a),a.parent=void 0,this.children.splice(b,1)},f.DisplayObjectContainer.prototype.updateTransform=function(){if(this.visible){f.DisplayObject.prototype.updateTransform.call(this);for(var a=0,b=this.children.length;b>a;a++)this.children[a].updateTransform()}},f.blendModes={},f.blendModes.NORMAL=0,f.blendModes.SCREEN=1,f.Sprite=function(a){f.DisplayObjectContainer.call(this),this.anchor=new f.Point,this.texture=a,this.blendMode=f.blendModes.NORMAL,this._width=0,this._height=0,a.baseTexture.hasLoaded?this.updateFrame=!0:(this.onTextureUpdateBind=this.onTextureUpdate.bind(this),this.texture.addEventListener(\"update\",this.onTextureUpdateBind)),this.renderable=!0},f.Sprite.prototype=Object.create(f.DisplayObjectContainer.prototype),f.Sprite.prototype.constructor=f.Sprite,Object.defineProperty(f.Sprite.prototype,\"width\",{get:function(){return this.scale.x*this.texture.frame.width},set:function(a){this.scale.x=a/this.texture.frame.width,this._width=a}}),Object.defineProperty(f.Sprite.prototype,\"height\",{get:function(){return this.scale.y*this.texture.frame.height},set:function(a){this.scale.y=a/this.texture.frame.height,this._height=a}}),f.Sprite.prototype.setTexture=function(a){this.texture.baseTexture!=a.baseTexture?(this.textureChange=!0,this.texture=a,this.__renderGroup&&this.__renderGroup.updateTexture(this)):this.texture=a,this.updateFrame=!0},f.Sprite.prototype.onTextureUpdate=function(){this._width&&(this.scale.x=this._width/this.texture.frame.width),this._height&&(this.scale.y=this._height/this.texture.frame.height),this.updateFrame=!0},f.Sprite.fromFrame=function(a){var b=f.TextureCache[a];if(!b)throw new Error(\"The frameId '\"+a+\"' does not exist in the texture cache\"+this);return new f.Sprite(b)},f.Sprite.fromImage=function(a){var b=f.Texture.fromImage(a);return new f.Sprite(b)},f.MovieClip=function(a){f.Sprite.call(this,a[0]),this.textures=a,this.animationSpeed=1,this.loop=!0,this.onComplete=null,this.currentFrame=0,this.playing=!1},f.MovieClip.prototype=Object.create(f.Sprite.prototype),f.MovieClip.prototype.constructor=f.MovieClip,f.MovieClip.prototype.stop=function(){this.playing=!1},f.MovieClip.prototype.play=function(){this.playing=!0},f.MovieClip.prototype.gotoAndStop=function(a){this.playing=!1,this.currentFrame=a;var b=0|this.currentFrame+.5;this.setTexture(this.textures[b%this.textures.length])},f.MovieClip.prototype.gotoAndPlay=function(a){this.currentFrame=a,this.playing=!0},f.MovieClip.prototype.updateTransform=function(){if(f.Sprite.prototype.updateTransform.call(this),this.playing){this.currentFrame+=this.animationSpeed;var a=0|this.currentFrame+.5;this.loop||a<this.textures.length?this.setTexture(this.textures[a%this.textures.length]):a>=this.textures.length&&(this.gotoAndStop(this.textures.length-1),this.onComplete&&this.onComplete())}},f.FilterBlock=function(a){this.graphics=a,this.visible=!0,this.renderable=!0},f.Text=function(a,b){this.canvas=document.createElement(\"canvas\"),this.context=this.canvas.getContext(\"2d\"),f.Sprite.call(this,f.Texture.fromCanvas(this.canvas)),this.setText(a),this.setStyle(b),this.updateText(),this.dirty=!1},f.Text.prototype=Object.create(f.Sprite.prototype),f.Text.prototype.constructor=f.Text,f.Text.prototype.setStyle=function(a){a=a||{},a.font=a.font||\"bold 20pt Arial\",a.fill=a.fill||\"black\",a.align=a.align||\"left\",a.stroke=a.stroke||\"black\",a.strokeThickness=a.strokeThickness||0,a.wordWrap=a.wordWrap||!1,a.wordWrapWidth=a.wordWrapWidth||100,this.style=a,this.dirty=!0},f.Sprite.prototype.setText=function(a){this.text=a.toString()||\" \",this.dirty=!0},f.Text.prototype.updateText=function(){this.context.font=this.style.font;var a=this.text;this.style.wordWrap&&(a=this.wordWrap(this.text));for(var b=a.split(/(?:\\r\\n|\\r|\\n)/),c=[],d=0,e=0;e<b.length;e++){var g=this.context.measureText(b[e]).width;c[e]=g,d=Math.max(d,g)}this.canvas.width=d+this.style.strokeThickness;var h=this.determineFontHeight(\"font: \"+this.style.font+\";\")+this.style.strokeThickness;for(this.canvas.height=h*b.length,this.context.fillStyle=this.style.fill,this.context.font=this.style.font,this.context.strokeStyle=this.style.stroke,this.context.lineWidth=this.style.strokeThickness,this.context.textBaseline=\"top\",e=0;e<b.length;e++){var i=new f.Point(this.style.strokeThickness/2,this.style.strokeThickness/2+e*h);\"right\"==this.style.align?i.x+=d-c[e]:\"center\"==this.style.align&&(i.x+=(d-c[e])/2),this.style.stroke&&this.style.strokeThickness&&this.context.strokeText(b[e],i.x,i.y),this.style.fill&&this.context.fillText(b[e],i.x,i.y)}this.updateTexture()},f.Text.prototype.updateTexture=function(){this.texture.baseTexture.width=this.canvas.width,this.texture.baseTexture.height=this.canvas.height,this.texture.frame.width=this.canvas.width,this.texture.frame.height=this.canvas.height,this._width=this.canvas.width,this._height=this.canvas.height,f.texturesToUpdate.push(this.texture.baseTexture)},f.Text.prototype.updateTransform=function(){this.dirty&&(this.updateText(),this.dirty=!1),f.Sprite.prototype.updateTransform.call(this)},f.Text.prototype.determineFontHeight=function(a){var b=f.Text.heightCache[a];if(!b){var c=document.getElementsByTagName(\"body\")[0],d=document.createElement(\"div\"),e=document.createTextNode(\"M\");d.appendChild(e),d.setAttribute(\"style\",a+\";position:absolute;top:0;left:0\"),c.appendChild(d),b=d.offsetHeight,f.Text.heightCache[a]=b,c.removeChild(d)}return b},f.Text.prototype.wordWrap=function(a){for(var b=function(a,b,c,d,e){var f=Math.floor((d-c)/2)+c;return f==c?1:a.measureText(b.substring(0,f)).width<=e?a.measureText(b.substring(0,f+1)).width>e?f:arguments.callee(a,b,f,d,e):arguments.callee(a,b,c,f,e)},c=function(a,c,d){if(a.measureText(c).width<=d||c.length<1)return c;var e=b(a,c,0,c.length,d);return c.substring(0,e)+\"\\n\"+arguments.callee(a,c.substring(e),d)},d=\"\",e=a.split(\"\\n\"),f=0;f<e.length;f++)d+=c(this.context,e[f],this.style.wordWrapWidth)+\"\\n\";return d},f.Text.prototype.destroy=function(a){a&&this.texture.destroy()},f.Text.heightCache={},f.BitmapText=function(a,b){f.DisplayObjectContainer.call(this),this.setText(a),this.setStyle(b),this.updateText(),this.dirty=!1},f.BitmapText.prototype=Object.create(f.DisplayObjectContainer.prototype),f.BitmapText.prototype.constructor=f.BitmapText,f.BitmapText.prototype.setText=function(a){this.text=a||\" \",this.dirty=!0},f.BitmapText.prototype.setStyle=function(a){a=a||{},a.align=a.align||\"left\",this.style=a;var b=a.font.split(\" \");this.fontName=b[b.length-1],this.fontSize=b.length>=2?parseInt(b[b.length-2],10):f.BitmapText.fonts[this.fontName].size,this.dirty=!0},f.BitmapText.prototype.updateText=function(){for(var a=f.BitmapText.fonts[this.fontName],b=new f.Point,c=null,d=[],e=0,g=[],h=0,i=this.fontSize/a.size,j=0;j<this.text.length;j++){var k=this.text.charCodeAt(j);if(/(?:\\r\\n|\\r|\\n)/.test(this.text.charAt(j)))g.push(b.x),e=Math.max(e,b.x),h++,b.x=0,b.y+=a.lineHeight,c=null;else{var l=a.chars[k];l&&(c&&l[c]&&(b.x+=l.kerning[c]),d.push({texture:l.texture,line:h,charCode:k,position:new f.Point(b.x+l.xOffset,b.y+l.yOffset)}),b.x+=l.xAdvance,c=k)}}g.push(b.x),e=Math.max(e,b.x);var m=[];for(j=0;h>=j;j++){var n=0;\"right\"==this.style.align?n=e-g[j]:\"center\"==this.style.align&&(n=(e-g[j])/2),m.push(n)}for(j=0;j<d.length;j++){var o=new f.Sprite(d[j].texture);o.position.x=(d[j].position.x+m[d[j].line])*i,o.position.y=d[j].position.y*i,o.scale.x=o.scale.y=i,this.addChild(o)}this.width=b.x*i,this.height=(b.y+a.lineHeight)*i},f.BitmapText.prototype.updateTransform=function(){if(this.dirty){for(;this.children.length>0;)this.removeChild(this.getChildAt(0));this.updateText(),this.dirty=!1}f.DisplayObjectContainer.prototype.updateTransform.call(this)},f.BitmapText.fonts={},f.InteractionManager=function(a){this.stage=a,this.mouse=new f.InteractionData,this.touchs={},this.tempPoint=new f.Point,this.mouseoverEnabled=!0,this.pool=[],this.interactiveItems=[],this.last=0},f.InteractionManager.prototype.constructor=f.InteractionManager,f.InteractionManager.prototype.collectInteractiveSprite=function(a,b){for(var c=a.children,d=c.length,e=d-1;e>=0;e--){var f=c[e];f.interactive?(b.interactiveChildren=!0,this.interactiveItems.push(f),f.children.length>0&&this.collectInteractiveSprite(f,f)):(f.__iParent=null,f.children.length>0&&this.collectInteractiveSprite(f,b))}},f.InteractionManager.prototype.setTarget=function(a){window.navigator.msPointerEnabled&&(a.view.style[\"-ms-content-zooming\"]=\"none\",a.view.style[\"-ms-touch-action\"]=\"none\"),this.target=a,a.view.addEventListener(\"mousemove\",this.onMouseMove.bind(this),!0),a.view.addEventListener(\"mousedown\",this.onMouseDown.bind(this),!0),document.body.addEventListener(\"mouseup\",this.onMouseUp.bind(this),!0),a.view.addEventListener(\"mouseout\",this.onMouseOut.bind(this),!0),a.view.addEventListener(\"touchstart\",this.onTouchStart.bind(this),!0),a.view.addEventListener(\"touchend\",this.onTouchEnd.bind(this),!0),a.view.addEventListener(\"touchmove\",this.onTouchMove.bind(this),!0)},f.InteractionManager.prototype.update=function(){if(this.target){var a=Date.now(),b=a-this.last;if(b=30*b/1e3,!(1>b)){if(this.last=a,this.dirty){this.dirty=!1;for(var c=this.interactiveItems.length,d=0;c>d;d++)this.interactiveItems[d].interactiveChildren=!1;this.interactiveItems=[],this.stage.interactive&&this.interactiveItems.push(this.stage),this.collectInteractiveSprite(this.stage,this.stage)}var e=this.interactiveItems.length;this.target.view.style.cursor=\"default\";for(var d=0;e>d;d++){var f=this.interactiveItems[d];(f.mouseover||f.mouseout||f.buttonMode)&&(f.__hit=this.hitTest(f,this.mouse),this.mouse.target=f,f.__hit?(f.buttonMode&&(this.target.view.style.cursor=\"pointer\"),f.__isOver||(f.mouseover&&f.mouseover(this.mouse),f.__isOver=!0)):f.__isOver&&(f.mouseout&&f.mouseout(this.mouse),f.__isOver=!1))}}}},f.InteractionManager.prototype.onMouseMove=function(a){this.mouse.originalEvent=a||window.event;var b=this.target.view.getBoundingClientRect();this.mouse.global.x=(a.clientX-b.left)*(this.target.width/b.width),this.mouse.global.y=(a.clientY-b.top)*(this.target.height/b.height);var c=this.interactiveItems.length;this.mouse.global;for(var d=0;c>d;d++){var e=this.interactiveItems[d];e.mousemove&&e.mousemove(this.mouse)}},f.InteractionManager.prototype.onMouseDown=function(a){this.mouse.originalEvent=a||window.event;var b=this.interactiveItems.length;this.mouse.global,this.stage;for(var c=0;b>c;c++){var d=this.interactiveItems[c];if((d.mousedown||d.click)&&(d.__mouseIsDown=!0,d.__hit=this.hitTest(d,this.mouse),d.__hit&&(d.mousedown&&d.mousedown(this.mouse),d.__isDown=!0,!d.interactiveChildren)))break}},f.InteractionManager.prototype.onMouseOut=function(){var a=this.interactiveItems.length;this.target.view.style.cursor=\"default\";for(var b=0;a>b;b++){var c=this.interactiveItems[b];c.__isOver&&(this.mouse.target=c,c.mouseout&&c.mouseout(this.mouse),c.__isOver=!1)}},f.InteractionManager.prototype.onMouseUp=function(a){this.mouse.originalEvent=a||window.event,this.mouse.global;for(var b=this.interactiveItems.length,c=!1,d=0;b>d;d++){var e=this.interactiveItems[d];(e.mouseup||e.mouseupoutside||e.click)&&(e.__hit=this.hitTest(e,this.mouse),e.__hit&&!c?(e.mouseup&&e.mouseup(this.mouse),e.__isDown&&e.click&&e.click(this.mouse),e.interactiveChildren||(c=!0)):e.__isDown&&e.mouseupoutside&&e.mouseupoutside(this.mouse),e.__isDown=!1)}},f.InteractionManager.prototype.hitTest=function(a,b){var c=b.global;if(a.vcount!==f.visibleCount)return!1;var d=a instanceof f.Sprite,e=a.worldTransform,g=e[0],h=e[1],i=e[2],j=e[3],k=e[4],l=e[5],m=1/(g*k+h*-j),n=k*m*c.x+-h*m*c.y+(l*h-i*k)*m,o=g*m*c.y+-j*m*c.x+(-l*g+i*j)*m;if(b.target=a,a.hitArea&&a.hitArea.contains)return a.hitArea.contains(n,o)?(b.target=a,!0):!1;if(d){var p,q=a.texture.frame.width,r=a.texture.frame.height,s=-q*a.anchor.x;if(n>s&&s+q>n&&(p=-r*a.anchor.y,o>p&&p+r>o))return b.target=a,!0}for(var t=a.children.length,u=0;t>u;u++){var v=a.children[u],w=this.hitTest(v,b);if(w)return b.target=a,!0}return!1},f.InteractionManager.prototype.onTouchMove=function(a){for(var b=this.target.view.getBoundingClientRect(),c=a.changedTouches,d=0;d<c.length;d++){var e=c[d],f=this.touchs[e.identifier];f.originalEvent=a||window.event,f.global.x=(e.clientX-b.left)*(this.target.width/b.width),f.global.y=(e.clientY-b.top)*(this.target.height/b.height)}for(var g=this.interactiveItems.length,d=0;g>d;d++){var h=this.interactiveItems[d];h.touchmove&&h.touchmove(f)}},f.InteractionManager.prototype.onTouchStart=function(a){for(var b=this.target.view.getBoundingClientRect(),c=a.changedTouches,d=0;d<c.length;d++){var e=c[d],g=this.pool.pop();g||(g=new f.InteractionData),g.originalEvent=a||window.event,this.touchs[e.identifier]=g,g.global.x=(e.clientX-b.left)*(this.target.width/b.width),g.global.y=(e.clientY-b.top)*(this.target.height/b.height);for(var h=this.interactiveItems.length,i=0;h>i;i++){var j=this.interactiveItems[i];if((j.touchstart||j.tap)&&(j.__hit=this.hitTest(j,g),j.__hit&&(j.touchstart&&j.touchstart(g),j.__isDown=!0,j.__touchData=g,!j.interactiveChildren)))break}}},f.InteractionManager.prototype.onTouchEnd=function(a){for(var b=this.target.view.getBoundingClientRect(),c=a.changedTouches,d=0;d<c.length;d++){var e=c[d],f=this.touchs[e.identifier],g=!1;f.global.x=(e.clientX-b.left)*(this.target.width/b.width),f.global.y=(e.clientY-b.top)*(this.target.height/b.height);for(var h=this.interactiveItems.length,i=0;h>i;i++){var j=this.interactiveItems[i],k=j.__touchData;j.__hit=this.hitTest(j,f),k==f&&(f.originalEvent=a||window.event,(j.touchend||j.tap)&&(j.__hit&&!g?(j.touchend&&j.touchend(f),j.__isDown&&j.tap&&j.tap(f),j.interactiveChildren||(g=!0)):j.__isDown&&j.touchendoutside&&j.touchendoutside(f),j.__isDown=!1),j.__touchData=null)}this.pool.push(f),this.touchs[e.identifier]=null}},f.InteractionData=function(){this.global=new f.Point,this.local=new f.Point,this.target,this.originalEvent},f.InteractionData.prototype.getLocalPosition=function(a){var b=a.worldTransform,c=this.global,d=b[0],e=b[1],g=b[2],h=b[3],i=b[4],j=b[5],k=1/(d*i+e*-h);return new f.Point(i*k*c.x+-e*k*c.y+(j*e-g*i)*k,d*k*c.y+-h*k*c.x+(-j*d+g*h)*k)},f.InteractionData.prototype.constructor=f.InteractionData,f.Stage=function(a,b){f.DisplayObjectContainer.call(this),this.worldTransform=f.mat3.create(),this.interactive=b,this.interactionManager=new f.InteractionManager(this),this.dirty=!0,this.__childrenAdded=[],this.__childrenRemoved=[],this.stage=this,this.stage.hitArea=new f.Rectangle(0,0,1e5,1e5),this.setBackgroundColor(a),this.worldVisible=!0},f.Stage.prototype=Object.create(f.DisplayObjectContainer.prototype),f.Stage.prototype.constructor=f.Stage,f.Stage.prototype.updateTransform=function(){this.worldAlpha=1,this.vcount=f.visibleCount;for(var a=0,b=this.children.length;b>a;a++)this.children[a].updateTransform();this.dirty&&(this.dirty=!1,this.interactionManager.dirty=!0),this.interactive&&this.interactionManager.update()},f.Stage.prototype.setBackgroundColor=function(a){this.backgroundColor=a||0,this.backgroundColorSplit=d(this.backgroundColor);var b=this.backgroundColor.toString(16);b=\"000000\".substr(0,6-b.length)+b,this.backgroundColorString=\"#\"+b},f.Stage.prototype.getMousePosition=function(){return this.interactionManager.mouse.global};for(var h=0,i=[\"ms\",\"moz\",\"webkit\",\"o\"],j=0;j<i.length&&!window.requestAnimationFrame;++j)window.requestAnimationFrame=window[i[j]+\"RequestAnimationFrame\"],window.cancelAnimationFrame=window[i[j]+\"CancelAnimationFrame\"]||window[i[j]+\"CancelRequestAnimationFrame\"];window.requestAnimationFrame||(window.requestAnimationFrame=function(a){var b=(new Date).getTime(),c=Math.max(0,16-(b-h)),d=window.setTimeout(function(){a(b+c)},c);return h=b+c,d}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)}),window.requestAnimFrame=window.requestAnimationFrame,\"function\"!=typeof Function.prototype.bind&&(Function.prototype.bind=function(){var a=Array.prototype.slice;return function(b){function c(){var f=e.concat(a.call(arguments));d.apply(this instanceof c?this:b,f)}var d=this,e=a.call(arguments,1);if(\"function\"!=typeof d)throw new TypeError;return c.prototype=function f(a){return a&&(f.prototype=a),this instanceof f?void 0:new f}(d.prototype),c}}());var k=f.AjaxRequest=function(){var a=[\"Msxml2.XMLHTTP\",\"Microsoft.XMLHTTP\"];if(!window.ActiveXObject)return window.XMLHttpRequest?new XMLHttpRequest:!1;for(var b=0;b<a.length;b++)try{return new ActiveXObject(a[b])}catch(c){}};f.runList=function(a){console.log(\">>>>>>>>>\"),console.log(\"_\");var b=0,c=a.first;for(console.log(c);c._iNext;)if(b++,c=c._iNext,console.log(c),b>100){console.log(\"BREAK\");break}},f.EventTarget=function(){var a={};this.addEventListener=this.on=function(b,c){void 0===a[b]&&(a[b]=[]),-1===a[b].indexOf(c)&&a[b].push(c)},this.dispatchEvent=this.emit=function(b){for(var c in a[b.type])a[b.type][c](b)},this.removeEventListener=this.off=function(b,c){var d=a[b].indexOf(c);-1!==d&&a[b].splice(d,1)}},f.autoDetectRenderer=function(a,b,c,d,e){a||(a=800),b||(b=600);var g=function(){try{return!!window.WebGLRenderingContext&&!!document.createElement(\"canvas\").getContext(\"experimental-webgl\")}catch(a){return!1}}();if(g){var h=-1!=navigator.userAgent.toLowerCase().indexOf(\"msie\");g=!h}return g?new f.WebGLRenderer(a,b,c,d,e):new f.CanvasRenderer(a,b,c,d)},f.PolyK={},f.PolyK.Triangulate=function(a){var b=!0,c=a.length>>1;if(3>c)return[];for(var d=[],e=[],g=0;c>g;g++)e.push(g);for(var g=0,h=c;h>3;){var i=e[(g+0)%h],j=e[(g+1)%h],k=e[(g+2)%h],l=a[2*i],m=a[2*i+1],n=a[2*j],o=a[2*j+1],p=a[2*k],q=a[2*k+1],r=!1;if(f.PolyK._convex(l,m,n,o,p,q,b)){r=!0;for(var s=0;h>s;s++){var t=e[s];if(t!=i&&t!=j&&t!=k&&f.PolyK._PointInTriangle(a[2*t],a[2*t+1],l,m,n,o,p,q)){r=!1;break}}}if(r)d.push(i,j,k),e.splice((g+1)%h,1),h--,g=0;else if(g++>3*h){if(!b)return console.log(\"PIXI Warning: shape too complex to fill\"),[];var d=[];e=[];for(var g=0;c>g;g++)e.push(g);g=0,h=c,b=!1}}return d.push(e[0],e[1],e[2]),d},f.PolyK._PointInTriangle=function(a,b,c,d,e,f,g,h){var i=g-c,j=h-d,k=e-c,l=f-d,m=a-c,n=b-d,o=i*i+j*j,p=i*k+j*l,q=i*m+j*n,r=k*k+l*l,s=k*m+l*n,t=1/(o*r-p*p),u=(r*q-p*s)*t,v=(o*s-p*q)*t;return u>=0&&v>=0&&1>u+v},f.PolyK._convex=function(a,b,c,d,e,f,g){return(b-d)*(e-c)+(c-a)*(f-d)>=0==g},f.shaderFragmentSrc=[\"precision mediump float;\",\"varying vec2 vTextureCoord;\",\"varying float vColor;\",\"uniform sampler2D uSampler;\",\"void main(void) {\",\"gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y));\",\"gl_FragColor = gl_FragColor * vColor;\",\"}\"],f.shaderVertexSrc=[\"attribute vec2 aVertexPosition;\",\"attribute vec2 aTextureCoord;\",\"attribute float aColor;\",\"uniform vec2 projectionVector;\",\"varying vec2 vTextureCoord;\",\"varying float vColor;\",\"void main(void) {\",\"gl_Position = vec4( aVertexPosition.x / projectionVector.x -1.0, aVertexPosition.y / -projectionVector.y + 1.0 , 0.0, 1.0);\",\"vTextureCoord = aTextureCoord;\",\"vColor = aColor;\",\"}\"],f.stripShaderFragmentSrc=[\"precision mediump float;\",\"varying vec2 vTextureCoord;\",\"varying float vColor;\",\"uniform float alpha;\",\"uniform sampler2D uSampler;\",\"void main(void) {\",\"gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y));\",\"gl_FragColor = gl_FragColor * alpha;\",\"}\"],f.stripShaderVertexSrc=[\"attribute vec2 aVertexPosition;\",\"attribute vec2 aTextureCoord;\",\"attribute float aColor;\",\"uniform mat3 translationMatrix;\",\"uniform vec2 projectionVector;\",\"varying vec2 vTextureCoord;\",\"varying float vColor;\",\"void main(void) {\",\"vec3 v = translationMatrix * vec3(aVertexPosition, 1.0);\",\"gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);\",\"vTextureCoord = aTextureCoord;\",\"vColor = aColor;\",\"}\"],f.primitiveShaderFragmentSrc=[\"precision mediump float;\",\"varying vec4 vColor;\",\"void main(void) {\",\"gl_FragColor = vColor;\",\"}\"],f.primitiveShaderVertexSrc=[\"attribute vec2 aVertexPosition;\",\"attribute vec4 aColor;\",\"uniform mat3 translationMatrix;\",\"uniform vec2 projectionVector;\",\"uniform float alpha;\",\"varying vec4 vColor;\",\"void main(void) {\",\"vec3 v = translationMatrix * vec3(aVertexPosition, 1.0);\",\"gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);\",\"vColor = aColor  * alpha;\",\"}\"],f.initPrimitiveShader=function(){var a=f.gl,b=f.compileProgram(f.primitiveShaderVertexSrc,f.primitiveShaderFragmentSrc);a.useProgram(b),b.vertexPositionAttribute=a.getAttribLocation(b,\"aVertexPosition\"),b.colorAttribute=a.getAttribLocation(b,\"aColor\"),b.projectionVector=a.getUniformLocation(b,\"projectionVector\"),b.translationMatrix=a.getUniformLocation(b,\"translationMatrix\"),b.alpha=a.getUniformLocation(b,\"alpha\"),f.primitiveProgram=b},f.initDefaultShader=function(){var a=this.gl,b=f.compileProgram(f.shaderVertexSrc,f.shaderFragmentSrc);a.useProgram(b),b.vertexPositionAttribute=a.getAttribLocation(b,\"aVertexPosition\"),b.projectionVector=a.getUniformLocation(b,\"projectionVector\"),b.textureCoordAttribute=a.getAttribLocation(b,\"aTextureCoord\"),b.colorAttribute=a.getAttribLocation(b,\"aColor\"),b.samplerUniform=a.getUniformLocation(b,\"uSampler\"),f.shaderProgram=b},f.initDefaultStripShader=function(){var a=this.gl,b=f.compileProgram(f.stripShaderVertexSrc,f.stripShaderFragmentSrc);a.useProgram(b),b.vertexPositionAttribute=a.getAttribLocation(b,\"aVertexPosition\"),b.projectionVector=a.getUniformLocation(b,\"projectionVector\"),b.textureCoordAttribute=a.getAttribLocation(b,\"aTextureCoord\"),b.translationMatrix=a.getUniformLocation(b,\"translationMatrix\"),b.alpha=a.getUniformLocation(b,\"alpha\"),b.colorAttribute=a.getAttribLocation(b,\"aColor\"),b.projectionVector=a.getUniformLocation(b,\"projectionVector\"),b.samplerUniform=a.getUniformLocation(b,\"uSampler\"),f.stripShaderProgram=b},f.CompileVertexShader=function(a,b){return f._CompileShader(a,b,a.VERTEX_SHADER)},f.CompileFragmentShader=function(a,b){return f._CompileShader(a,b,a.FRAGMENT_SHADER)},f._CompileShader=function(a,b,c){var d=b.join(\"\\n\"),e=a.createShader(c);return a.shaderSource(e,d),a.compileShader(e),a.getShaderParameter(e,a.COMPILE_STATUS)?e:(alert(a.getShaderInfoLog(e)),null)},f.compileProgram=function(a,b){var c=f.gl,d=f.CompileFragmentShader(c,b),e=f.CompileVertexShader(c,a),g=c.createProgram();return c.attachShader(g,e),c.attachShader(g,d),c.linkProgram(g),c.getProgramParameter(g,c.LINK_STATUS)||alert(\"Could not initialise shaders\"),g},f.activateDefaultShader=function(){var a=f.gl,b=f.shaderProgram;\na.useProgram(b),a.enableVertexAttribArray(b.vertexPositionAttribute),a.enableVertexAttribArray(b.textureCoordAttribute),a.enableVertexAttribArray(b.colorAttribute)},f.activatePrimitiveShader=function(){var a=f.gl;a.disableVertexAttribArray(f.shaderProgram.textureCoordAttribute),a.disableVertexAttribArray(f.shaderProgram.colorAttribute),a.useProgram(f.primitiveProgram),a.enableVertexAttribArray(f.primitiveProgram.vertexPositionAttribute),a.enableVertexAttribArray(f.primitiveProgram.colorAttribute)},f.WebGLGraphics=function(){},f.WebGLGraphics.renderGraphics=function(a,b){var c=f.gl;a._webGL||(a._webGL={points:[],indices:[],lastIndex:0,buffer:c.createBuffer(),indexBuffer:c.createBuffer()}),a.dirty&&(a.dirty=!1,a.clearDirty&&(a.clearDirty=!1,a._webGL.lastIndex=0,a._webGL.points=[],a._webGL.indices=[]),f.WebGLGraphics.updateGraphics(a)),f.activatePrimitiveShader();var d=f.mat3.clone(a.worldTransform);f.mat3.transpose(d),c.blendFunc(c.ONE,c.ONE_MINUS_SRC_ALPHA),c.uniformMatrix3fv(f.primitiveProgram.translationMatrix,!1,d),c.uniform2f(f.primitiveProgram.projectionVector,b.x,b.y),c.uniform1f(f.primitiveProgram.alpha,a.worldAlpha),c.bindBuffer(c.ARRAY_BUFFER,a._webGL.buffer),c.vertexAttribPointer(f.shaderProgram.vertexPositionAttribute,2,c.FLOAT,!1,0,0),c.vertexAttribPointer(f.primitiveProgram.vertexPositionAttribute,2,c.FLOAT,!1,24,0),c.vertexAttribPointer(f.primitiveProgram.colorAttribute,4,c.FLOAT,!1,24,8),c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,a._webGL.indexBuffer),c.drawElements(c.TRIANGLE_STRIP,a._webGL.indices.length,c.UNSIGNED_SHORT,0),f.activateDefaultShader()},f.WebGLGraphics.updateGraphics=function(a){for(var b=a._webGL.lastIndex;b<a.graphicsData.length;b++){var c=a.graphicsData[b];c.type==f.Graphics.POLY?(c.fill&&c.points.length>3&&f.WebGLGraphics.buildPoly(c,a._webGL),c.lineWidth>0&&f.WebGLGraphics.buildLine(c,a._webGL)):c.type==f.Graphics.RECT?f.WebGLGraphics.buildRectangle(c,a._webGL):(c.type==f.Graphics.CIRC||c.type==f.Graphics.ELIP)&&f.WebGLGraphics.buildCircle(c,a._webGL)}a._webGL.lastIndex=a.graphicsData.length;var d=f.gl;a._webGL.glPoints=new Float32Array(a._webGL.points),d.bindBuffer(d.ARRAY_BUFFER,a._webGL.buffer),d.bufferData(d.ARRAY_BUFFER,a._webGL.glPoints,d.STATIC_DRAW),a._webGL.glIndicies=new Uint16Array(a._webGL.indices),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,a._webGL.indexBuffer),d.bufferData(d.ELEMENT_ARRAY_BUFFER,a._webGL.glIndicies,d.STATIC_DRAW)},f.WebGLGraphics.buildRectangle=function(a,b){var c=a.points,e=c[0],g=c[1],h=c[2],i=c[3];if(a.fill){var j=d(a.fillColor),k=a.fillAlpha,l=j[0]*k,m=j[1]*k,n=j[2]*k,o=b.points,p=b.indices,q=o.length/6;o.push(e,g),o.push(l,m,n,k),o.push(e+h,g),o.push(l,m,n,k),o.push(e,g+i),o.push(l,m,n,k),o.push(e+h,g+i),o.push(l,m,n,k),p.push(q,q,q+1,q+2,q+3,q+3)}a.lineWidth&&(a.points=[e,g,e+h,g,e+h,g+i,e,g+i,e,g],f.WebGLGraphics.buildLine(a,b))},f.WebGLGraphics.buildCircle=function(a,b){var c=a.points,e=c[0],g=c[1],h=c[2],i=c[3],j=40,k=2*Math.PI/j;if(a.fill){var l=d(a.fillColor),m=a.fillAlpha,n=l[0]*m,o=l[1]*m,p=l[2]*m,q=b.points,r=b.indices,s=q.length/6;r.push(s);for(var t=0;j+1>t;t++)q.push(e,g,n,o,p,m),q.push(e+Math.sin(k*t)*h,g+Math.cos(k*t)*i,n,o,p,m),r.push(s++,s++);r.push(s-1)}if(a.lineWidth){a.points=[];for(var t=0;j+1>t;t++)a.points.push(e+Math.sin(k*t)*h,g+Math.cos(k*t)*i);f.WebGLGraphics.buildLine(a,b)}},f.WebGLGraphics.buildLine=function(a,b){var c=a.points;if(0!=c.length){var e=new f.Point(c[0],c[1]),g=new f.Point(c[c.length-2],c[c.length-1]);if(e.x==g.x&&e.y==g.y){c.pop(),c.pop(),g=new f.Point(c[c.length-2],c[c.length-1]);var h=g.x+.5*(e.x-g.x),i=g.y+.5*(e.y-g.y);c.unshift(h,i),c.push(h,i)}var j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E=b.points,F=b.indices,G=c.length/2,H=c.length,I=E.length/6,J=a.lineWidth/2,K=d(a.lineColor),L=a.lineAlpha,M=K[0]*L,N=K[1]*L,O=K[2]*L;j=c[0],k=c[1],l=c[2],m=c[3],p=-(k-m),q=j-l,D=Math.sqrt(p*p+q*q),p/=D,q/=D,p*=J,q*=J,E.push(j-p,k-q,M,N,O,L),E.push(j+p,k+q,M,N,O,L);for(var P=1;G-1>P;P++)j=c[2*(P-1)],k=c[2*(P-1)+1],l=c[2*P],m=c[2*P+1],n=c[2*(P+1)],o=c[2*(P+1)+1],p=-(k-m),q=j-l,D=Math.sqrt(p*p+q*q),p/=D,q/=D,p*=J,q*=J,r=-(m-o),s=l-n,D=Math.sqrt(r*r+s*s),r/=D,s/=D,r*=J,s*=J,v=-q+k-(-q+m),w=-p+l-(-p+j),x=(-p+j)*(-q+m)-(-p+l)*(-q+k),y=-s+o-(-s+m),z=-r+l-(-r+n),A=(-r+n)*(-s+m)-(-r+l)*(-s+o),B=v*z-y*w,0==B&&(B+=1),px=(w*A-z*x)/B,py=(y*x-v*A)/B,C=(px-l)*(px-l)+(py-m)+(py-m),C>19600?(t=p-r,u=q-s,D=Math.sqrt(t*t+u*u),t/=D,u/=D,t*=J,u*=J,E.push(l-t,m-u),E.push(M,N,O,L),E.push(l+t,m+u),E.push(M,N,O,L),E.push(l-t,m-u),E.push(M,N,O,L),H++):(E.push(px,py),E.push(M,N,O,L),E.push(l-(px-l),m-(py-m)),E.push(M,N,O,L));j=c[2*(G-2)],k=c[2*(G-2)+1],l=c[2*(G-1)],m=c[2*(G-1)+1],p=-(k-m),q=j-l,D=Math.sqrt(p*p+q*q),p/=D,q/=D,p*=J,q*=J,E.push(l-p,m-q),E.push(M,N,O,L),E.push(l+p,m+q),E.push(M,N,O,L),F.push(I);for(var P=0;H>P;P++)F.push(I++);F.push(I-1)}},f.WebGLGraphics.buildPoly=function(a,b){var c=a.points;if(!(c.length<6)){for(var e=b.points,g=b.indices,h=c.length/2,i=d(a.fillColor),j=a.fillAlpha,k=i[0]*j,l=i[1]*j,m=i[2]*j,n=f.PolyK.Triangulate(c),o=e.length/6,p=0;p<n.length;p+=3)g.push(n[p]+o),g.push(n[p]+o),g.push(n[p+1]+o),g.push(n[p+2]+o),g.push(n[p+2]+o);for(var p=0;h>p;p++)e.push(c[2*p],c[2*p+1],k,l,m,j)}},f._defaultFrame=new f.Rectangle(0,0,1,1),f.gl,f.WebGLRenderer=function(a,b,c,d,e){this.transparent=!!d,this.width=a||800,this.height=b||600,this.view=c||document.createElement(\"canvas\"),this.view.width=this.width,this.view.height=this.height;var g=this;this.view.addEventListener(\"webglcontextlost\",function(a){g.handleContextLost(a)},!1),this.view.addEventListener(\"webglcontextrestored\",function(a){g.handleContextRestored(a)},!1),this.batchs=[];try{f.gl=this.gl=this.view.getContext(\"experimental-webgl\",{alpha:this.transparent,antialias:!!e,premultipliedAlpha:!1,stencil:!0})}catch(h){throw new Error(\" This browser does not support webGL. Try using the canvas renderer\"+this)}f.initPrimitiveShader(),f.initDefaultShader(),f.initDefaultStripShader(),f.activateDefaultShader();var i=this.gl;f.WebGLRenderer.gl=i,this.batch=new f.WebGLBatch(i),i.disable(i.DEPTH_TEST),i.disable(i.CULL_FACE),i.enable(i.BLEND),i.colorMask(!0,!0,!0,this.transparent),f.projection=new f.Point(400,300),this.resize(this.width,this.height),this.contextLost=!1,this.stageRenderGroup=new f.WebGLRenderGroup(this.gl)},f.WebGLRenderer.prototype.constructor=f.WebGLRenderer,f.WebGLRenderer.getBatch=function(){return 0==f._batchs.length?new f.WebGLBatch(f.WebGLRenderer.gl):f._batchs.pop()},f.WebGLRenderer.returnBatch=function(a){a.clean(),f._batchs.push(a)},f.WebGLRenderer.prototype.render=function(a){if(!this.contextLost){this.__stage!==a&&(this.__stage=a,this.stageRenderGroup.setRenderable(a)),f.WebGLRenderer.updateTextures(),f.visibleCount++,a.updateTransform();var b=this.gl;if(b.colorMask(!0,!0,!0,this.transparent),b.viewport(0,0,this.width,this.height),b.bindFramebuffer(b.FRAMEBUFFER,null),b.clearColor(a.backgroundColorSplit[0],a.backgroundColorSplit[1],a.backgroundColorSplit[2],!this.transparent),b.clear(b.COLOR_BUFFER_BIT),this.stageRenderGroup.backgroundColor=a.backgroundColorSplit,this.stageRenderGroup.render(f.projection),a.interactive&&(a._interactiveEventsAdded||(a._interactiveEventsAdded=!0,a.interactionManager.setTarget(this))),f.Texture.frameUpdates.length>0){for(var c=0;c<f.Texture.frameUpdates.length;c++)f.Texture.frameUpdates[c].updateFrame=!1;f.Texture.frameUpdates=[]}}},f.WebGLRenderer.updateTextures=function(){for(var a=0;a<f.texturesToUpdate.length;a++)f.WebGLRenderer.updateTexture(f.texturesToUpdate[a]);for(var a=0;a<f.texturesToDestroy.length;a++)f.WebGLRenderer.destroyTexture(f.texturesToDestroy[a]);f.texturesToUpdate=[],f.texturesToDestroy=[]},f.WebGLRenderer.updateTexture=function(a){var b=f.gl;a._glTexture||(a._glTexture=b.createTexture()),a.hasLoaded&&(b.bindTexture(b.TEXTURE_2D,a._glTexture),b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),b.texImage2D(b.TEXTURE_2D,0,b.RGBA,b.RGBA,b.UNSIGNED_BYTE,a.source),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.LINEAR),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.LINEAR),a._powerOf2?(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.REPEAT),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.REPEAT)):(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE)),b.bindTexture(b.TEXTURE_2D,null))},f.WebGLRenderer.destroyTexture=function(a){var b=f.gl;a._glTexture&&(a._glTexture=b.createTexture(),b.deleteTexture(b.TEXTURE_2D,a._glTexture))},f.WebGLRenderer.prototype.resize=function(a,b){this.width=a,this.height=b,this.view.width=a,this.view.height=b,this.gl.viewport(0,0,this.width,this.height),f.projection.x=this.width/2,f.projection.y=this.height/2},f.WebGLRenderer.prototype.handleContextLost=function(a){a.preventDefault(),this.contextLost=!0},f.WebGLRenderer.prototype.handleContextRestored=function(){this.gl=this.view.getContext(\"experimental-webgl\",{alpha:!0}),this.initShaders();for(var a in f.TextureCache){var b=f.TextureCache[a].baseTexture;b._glTexture=null,f.WebGLRenderer.updateTexture(b)}for(var c=0;c<this.batchs.length;c++)this.batchs[c].restoreLostContext(this.gl),this.batchs[c].dirty=!0;f._restoreBatchs(this.gl),this.contextLost=!1},f._batchs=[],f._getBatch=function(a){return 0==f._batchs.length?new f.WebGLBatch(a):f._batchs.pop()},f._returnBatch=function(a){a.clean(),f._batchs.push(a)},f._restoreBatchs=function(a){for(var b=0;b<f._batchs.length;b++)f._batchs[b].restoreLostContext(a)},f.WebGLBatch=function(a){this.gl=a,this.size=0,this.vertexBuffer=a.createBuffer(),this.indexBuffer=a.createBuffer(),this.uvBuffer=a.createBuffer(),this.colorBuffer=a.createBuffer(),this.blendMode=f.blendModes.NORMAL,this.dynamicSize=1},f.WebGLBatch.prototype.constructor=f.WebGLBatch,f.WebGLBatch.prototype.clean=function(){this.verticies=[],this.uvs=[],this.indices=[],this.colors=[],this.dynamicSize=1,this.texture=null,this.last=null,this.size=0,this.head,this.tail},f.WebGLBatch.prototype.restoreLostContext=function(a){this.gl=a,this.vertexBuffer=a.createBuffer(),this.indexBuffer=a.createBuffer(),this.uvBuffer=a.createBuffer(),this.colorBuffer=a.createBuffer()},f.WebGLBatch.prototype.init=function(a){a.batch=this,this.dirty=!0,this.blendMode=a.blendMode,this.texture=a.texture.baseTexture,this.head=a,this.tail=a,this.size=1,this.growBatch()},f.WebGLBatch.prototype.insertBefore=function(a,b){this.size++,a.batch=this,this.dirty=!0;var c=b.__prev;b.__prev=a,a.__next=b,c?(a.__prev=c,c.__next=a):this.head=a},f.WebGLBatch.prototype.insertAfter=function(a,b){this.size++,a.batch=this,this.dirty=!0;var c=b.__next;b.__next=a,a.__prev=b,c?(a.__next=c,c.__prev=a):this.tail=a},f.WebGLBatch.prototype.remove=function(a){return this.size--,0==this.size?(a.batch=null,a.__prev=null,a.__next=null,void 0):(a.__prev?a.__prev.__next=a.__next:(this.head=a.__next,this.head.__prev=null),a.__next?a.__next.__prev=a.__prev:(this.tail=a.__prev,this.tail.__next=null),a.batch=null,a.__next=null,a.__prev=null,this.dirty=!0,void 0)},f.WebGLBatch.prototype.split=function(a){this.dirty=!0;var b=new f.WebGLBatch(this.gl);b.init(a),b.texture=this.texture,b.tail=this.tail,this.tail=a.__prev,this.tail.__next=null,a.__prev=null;for(var c=0;a;)c++,a.batch=b,a=a.__next;return b.size=c,this.size-=c,b},f.WebGLBatch.prototype.merge=function(a){this.dirty=!0,this.tail.__next=a.head,a.head.__prev=this.tail,this.size+=a.size,this.tail=a.tail;for(var b=a.head;b;)b.batch=this,b=b.__next},f.WebGLBatch.prototype.growBatch=function(){var a=this.gl;this.dynamicSize=1==this.size?1:1.5*this.size,this.verticies=new Float32Array(8*this.dynamicSize),a.bindBuffer(a.ARRAY_BUFFER,this.vertexBuffer),a.bufferData(a.ARRAY_BUFFER,this.verticies,a.DYNAMIC_DRAW),this.uvs=new Float32Array(8*this.dynamicSize),a.bindBuffer(a.ARRAY_BUFFER,this.uvBuffer),a.bufferData(a.ARRAY_BUFFER,this.uvs,a.DYNAMIC_DRAW),this.dirtyUVS=!0,this.colors=new Float32Array(4*this.dynamicSize),a.bindBuffer(a.ARRAY_BUFFER,this.colorBuffer),a.bufferData(a.ARRAY_BUFFER,this.colors,a.DYNAMIC_DRAW),this.dirtyColors=!0,this.indices=new Uint16Array(6*this.dynamicSize);for(var b=this.indices.length/6,c=0;b>c;c++){var d=6*c,e=4*c;this.indices[d+0]=e+0,this.indices[d+1]=e+1,this.indices[d+2]=e+2,this.indices[d+3]=e+0,this.indices[d+4]=e+2,this.indices[d+5]=e+3}a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,this.indexBuffer),a.bufferData(a.ELEMENT_ARRAY_BUFFER,this.indices,a.STATIC_DRAW)},f.WebGLBatch.prototype.refresh=function(){this.gl,this.dynamicSize<this.size&&this.growBatch();for(var a,b=0,c=this.head;c;){a=8*b;var d=c.texture,e=d.frame,f=d.baseTexture.width,g=d.baseTexture.height;this.uvs[a+0]=e.x/f,this.uvs[a+1]=e.y/g,this.uvs[a+2]=(e.x+e.width)/f,this.uvs[a+3]=e.y/g,this.uvs[a+4]=(e.x+e.width)/f,this.uvs[a+5]=(e.y+e.height)/g,this.uvs[a+6]=e.x/f,this.uvs[a+7]=(e.y+e.height)/g,c.updateFrame=!1,colorIndex=4*b,this.colors[colorIndex]=this.colors[colorIndex+1]=this.colors[colorIndex+2]=this.colors[colorIndex+3]=c.worldAlpha,c=c.__next,b++}this.dirtyUVS=!0,this.dirtyColors=!0},f.WebGLBatch.prototype.update=function(){this.gl;for(var a,b,c,d,e,g,h,i,j,k,l,m,n,o,p,q,r=0,s=this.head;s;){if(s.vcount===f.visibleCount){if(b=s.texture.frame.width,c=s.texture.frame.height,d=s.anchor.x,e=s.anchor.y,g=b*(1-d),h=b*-d,i=c*(1-e),j=c*-e,k=8*r,a=s.worldTransform,l=a[0],m=a[3],n=a[1],o=a[4],p=a[2],q=a[5],this.verticies[k+0]=l*h+n*j+p,this.verticies[k+1]=o*j+m*h+q,this.verticies[k+2]=l*g+n*j+p,this.verticies[k+3]=o*j+m*g+q,this.verticies[k+4]=l*g+n*i+p,this.verticies[k+5]=o*i+m*g+q,this.verticies[k+6]=l*h+n*i+p,this.verticies[k+7]=o*i+m*h+q,s.updateFrame||s.texture.updateFrame){this.dirtyUVS=!0;var t=s.texture,u=t.frame,v=t.baseTexture.width,w=t.baseTexture.height;this.uvs[k+0]=u.x/v,this.uvs[k+1]=u.y/w,this.uvs[k+2]=(u.x+u.width)/v,this.uvs[k+3]=u.y/w,this.uvs[k+4]=(u.x+u.width)/v,this.uvs[k+5]=(u.y+u.height)/w,this.uvs[k+6]=u.x/v,this.uvs[k+7]=(u.y+u.height)/w,s.updateFrame=!1}if(s.cacheAlpha!=s.worldAlpha){s.cacheAlpha=s.worldAlpha;var x=4*r;this.colors[x]=this.colors[x+1]=this.colors[x+2]=this.colors[x+3]=s.worldAlpha,this.dirtyColors=!0}}else k=8*r,this.verticies[k+0]=0,this.verticies[k+1]=0,this.verticies[k+2]=0,this.verticies[k+3]=0,this.verticies[k+4]=0,this.verticies[k+5]=0,this.verticies[k+6]=0,this.verticies[k+7]=0;r++,s=s.__next}},f.WebGLBatch.prototype.render=function(a,b){if(a=a||0,void 0==b&&(b=this.size),this.dirty&&(this.refresh(),this.dirty=!1),0!=this.size){this.update();var c=this.gl,d=f.shaderProgram;c.useProgram(d),c.bindBuffer(c.ARRAY_BUFFER,this.vertexBuffer),c.bufferSubData(c.ARRAY_BUFFER,0,this.verticies),c.vertexAttribPointer(d.vertexPositionAttribute,2,c.FLOAT,!1,0,0),c.bindBuffer(c.ARRAY_BUFFER,this.uvBuffer),this.dirtyUVS&&(this.dirtyUVS=!1,c.bufferSubData(c.ARRAY_BUFFER,0,this.uvs)),c.vertexAttribPointer(d.textureCoordAttribute,2,c.FLOAT,!1,0,0),c.activeTexture(c.TEXTURE0),c.bindTexture(c.TEXTURE_2D,this.texture._glTexture),c.bindBuffer(c.ARRAY_BUFFER,this.colorBuffer),this.dirtyColors&&(this.dirtyColors=!1,c.bufferSubData(c.ARRAY_BUFFER,0,this.colors)),c.vertexAttribPointer(d.colorAttribute,1,c.FLOAT,!1,0,0),c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,this.indexBuffer);var e=b-a;c.drawElements(c.TRIANGLES,6*e,c.UNSIGNED_SHORT,6*2*a)}},f.WebGLRenderGroup=function(a){this.gl=a,this.root,this.backgroundColor,this.batchs=[],this.toRemove=[]},f.WebGLRenderGroup.prototype.constructor=f.WebGLRenderGroup,f.WebGLRenderGroup.prototype.setRenderable=function(a){this.root&&this.removeDisplayObjectAndChildren(this.root),a.worldVisible=a.visible,this.root=a,this.addDisplayObjectAndChildren(a)},f.WebGLRenderGroup.prototype.render=function(a){f.WebGLRenderer.updateTextures();var b=this.gl;b.uniform2f(f.shaderProgram.projectionVector,a.x,a.y),b.blendFunc(b.ONE,b.ONE_MINUS_SRC_ALPHA);for(var c,d=0;d<this.batchs.length;d++)if(c=this.batchs[d],c instanceof f.WebGLBatch)this.batchs[d].render();else{var e=c.vcount===f.visibleCount;c instanceof f.TilingSprite?e&&this.renderTilingSprite(c,a):c instanceof f.Strip?e&&this.renderStrip(c,a):c instanceof f.Graphics?e&&c.renderable&&f.WebGLGraphics.renderGraphics(c,a):c instanceof f.FilterBlock&&(c.open?(b.enable(b.STENCIL_TEST),b.colorMask(!1,!1,!1,!1),b.stencilFunc(b.ALWAYS,1,255),b.stencilOp(b.KEEP,b.KEEP,b.REPLACE),f.WebGLGraphics.renderGraphics(c.mask,a),b.colorMask(!0,!0,!0,!1),b.stencilFunc(b.NOTEQUAL,0,255),b.stencilOp(b.KEEP,b.KEEP,b.KEEP)):b.disable(b.STENCIL_TEST))}},f.WebGLRenderGroup.prototype.handleFilter=function(){},f.WebGLRenderGroup.prototype.renderSpecific=function(a,b){f.WebGLRenderer.updateTextures();var c=this.gl;c.uniform2f(f.shaderProgram.projectionVector,b.x,b.y);for(var d,e,g,h,i=a.first;i._iNext&&(i=i._iNext,!i.renderable||!i.__renderGroup););var j=i.batch;if(i instanceof f.Sprite){j=i.batch;var k=j.head;if(k==i)d=0;else for(d=1;k.__next!=i;)d++,k=k.__next}else j=i;for(var l,m=a,n=a;n.children.length>0;)n=n.children[n.children.length-1],n.renderable&&(m=n);if(m instanceof f.Sprite){l=m.batch;var k=l.head;if(k==m)g=0;else for(g=1;k.__next!=m;)g++,k=k.__next}else l=m;if(j==l)return j instanceof f.WebGLBatch?j.render(d,g+1):this.renderSpecial(j,b),void 0;e=this.batchs.indexOf(j),h=this.batchs.indexOf(l),j instanceof f.WebGLBatch?j.render(d):this.renderSpecial(j,b);for(var o=e+1;h>o;o++)renderable=this.batchs[o],renderable instanceof f.WebGLBatch?this.batchs[o].render():this.renderSpecial(renderable,b);l instanceof f.WebGLBatch?l.render(0,g+1):this.renderSpecial(l,b)},f.WebGLRenderGroup.prototype.renderSpecial=function(a,b){var c=a.vcount===f.visibleCount;if(a instanceof f.TilingSprite)c&&this.renderTilingSprite(a,b);else if(a instanceof f.Strip)c&&this.renderStrip(a,b);else if(a instanceof f.CustomRenderable)c&&a.renderWebGL(this,b);else if(a instanceof f.Graphics)c&&a.renderable&&f.WebGLGraphics.renderGraphics(a,b);else if(a instanceof f.FilterBlock){var d=f.gl;a.open?(d.enable(d.STENCIL_TEST),d.colorMask(!1,!1,!1,!1),d.stencilFunc(d.ALWAYS,1,255),d.stencilOp(d.KEEP,d.KEEP,d.REPLACE),f.WebGLGraphics.renderGraphics(a.mask,b),d.colorMask(!0,!0,!0,!0),d.stencilFunc(d.NOTEQUAL,0,255),d.stencilOp(d.KEEP,d.KEEP,d.KEEP)):d.disable(d.STENCIL_TEST)}},f.WebGLRenderGroup.prototype.updateTexture=function(a){this.removeObject(a);for(var b=a.first;b!=this.root&&(b=b._iPrev,!b.renderable||!b.__renderGroup););for(var c=a.last;c._iNext&&(c=c._iNext,!c.renderable||!c.__renderGroup););this.insertObject(a,b,c)},f.WebGLRenderGroup.prototype.addFilterBlocks=function(a,b){a.__renderGroup=this,b.__renderGroup=this;for(var c=a;c!=this.root&&(c=c._iPrev,!c.renderable||!c.__renderGroup););this.insertAfter(a,c);for(var d=b;d!=this.root&&(d=d._iPrev,!d.renderable||!d.__renderGroup););this.insertAfter(b,d)},f.WebGLRenderGroup.prototype.removeFilterBlocks=function(a,b){this.removeObject(a),this.removeObject(b)},f.WebGLRenderGroup.prototype.addDisplayObjectAndChildren=function(a){a.__renderGroup&&a.__renderGroup.removeDisplayObjectAndChildren(a);for(var b=a.first;b!=this.root.first&&(b=b._iPrev,!b.renderable||!b.__renderGroup););for(var c=a.last;c._iNext&&(c=c._iNext,!c.renderable||!c.__renderGroup););var d=a.first,e=a.last._iNext;do d.__renderGroup=this,d.renderable&&(this.insertObject(d,b,c),b=d),d=d._iNext;while(d!=e)},f.WebGLRenderGroup.prototype.removeDisplayObjectAndChildren=function(a){if(a.__renderGroup==this){a.last;do a.__renderGroup=null,a.renderable&&this.removeObject(a),a=a._iNext;while(a)}},f.WebGLRenderGroup.prototype.insertObject=function(a,b,c){var d=b,e=c;if(a instanceof f.Sprite){var g,h;if(d instanceof f.Sprite){if(g=d.batch,g&&g.texture==a.texture.baseTexture&&g.blendMode==a.blendMode)return g.insertAfter(a,d),void 0}else g=d;if(e)if(e instanceof f.Sprite){if(h=e.batch){if(h.texture==a.texture.baseTexture&&h.blendMode==a.blendMode)return h.insertBefore(a,e),void 0;if(h==g){var i=g.split(e),j=f.WebGLRenderer.getBatch(),k=this.batchs.indexOf(g);return j.init(a),this.batchs.splice(k+1,0,j,i),void 0}}}else h=e;var j=f.WebGLRenderer.getBatch();if(j.init(a),g){var k=this.batchs.indexOf(g);this.batchs.splice(k+1,0,j)}else this.batchs.push(j)}else a instanceof f.TilingSprite?this.initTilingSprite(a):a instanceof f.Strip&&this.initStrip(a),this.insertAfter(a,d)},f.WebGLRenderGroup.prototype.insertAfter=function(a,b){if(b instanceof f.Sprite){var c=b.batch;if(c)if(c.tail==b){var d=this.batchs.indexOf(c);this.batchs.splice(d+1,0,a)}else{var e=c.split(b.__next),d=this.batchs.indexOf(c);this.batchs.splice(d+1,0,a,e)}else this.batchs.push(a)}else{var d=this.batchs.indexOf(b);this.batchs.splice(d+1,0,a)}},f.WebGLRenderGroup.prototype.removeObject=function(a){var b;if(a instanceof f.Sprite){var c=a.batch;if(!c)return;c.remove(a),0==c.size&&(b=c)}else b=a;if(b){var d=this.batchs.indexOf(b);if(-1==d)return;if(0==d||d==this.batchs.length-1)return this.batchs.splice(d,1),b instanceof f.WebGLBatch&&f.WebGLRenderer.returnBatch(b),void 0;if(this.batchs[d-1]instanceof f.WebGLBatch&&this.batchs[d+1]instanceof f.WebGLBatch&&this.batchs[d-1].texture==this.batchs[d+1].texture&&this.batchs[d-1].blendMode==this.batchs[d+1].blendMode)return this.batchs[d-1].merge(this.batchs[d+1]),b instanceof f.WebGLBatch&&f.WebGLRenderer.returnBatch(b),f.WebGLRenderer.returnBatch(this.batchs[d+1]),this.batchs.splice(d,2),void 0;this.batchs.splice(d,1),b instanceof f.WebGLBatch&&f.WebGLRenderer.returnBatch(b)}},f.WebGLRenderGroup.prototype.initTilingSprite=function(a){var b=this.gl;a.verticies=new Float32Array([0,0,a.width,0,a.width,a.height,0,a.height]),a.uvs=new Float32Array([0,0,1,0,1,1,0,1]),a.colors=new Float32Array([1,1,1,1]),a.indices=new Uint16Array([0,1,3,2]),a._vertexBuffer=b.createBuffer(),a._indexBuffer=b.createBuffer(),a._uvBuffer=b.createBuffer(),a._colorBuffer=b.createBuffer(),b.bindBuffer(b.ARRAY_BUFFER,a._vertexBuffer),b.bufferData(b.ARRAY_BUFFER,a.verticies,b.STATIC_DRAW),b.bindBuffer(b.ARRAY_BUFFER,a._uvBuffer),b.bufferData(b.ARRAY_BUFFER,a.uvs,b.DYNAMIC_DRAW),b.bindBuffer(b.ARRAY_BUFFER,a._colorBuffer),b.bufferData(b.ARRAY_BUFFER,a.colors,b.STATIC_DRAW),b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,a._indexBuffer),b.bufferData(b.ELEMENT_ARRAY_BUFFER,a.indices,b.STATIC_DRAW),a.texture.baseTexture._glTexture?(b.bindTexture(b.TEXTURE_2D,a.texture.baseTexture._glTexture),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.REPEAT),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.REPEAT),a.texture.baseTexture._powerOf2=!0):a.texture.baseTexture._powerOf2=!0},f.WebGLRenderGroup.prototype.renderStrip=function(a,b){var c=this.gl,d=f.shaderProgram;c.useProgram(f.stripShaderProgram);var e=f.mat3.clone(a.worldTransform);f.mat3.transpose(e),c.uniformMatrix3fv(f.stripShaderProgram.translationMatrix,!1,e),c.uniform2f(f.stripShaderProgram.projectionVector,b.x,b.y),c.uniform1f(f.stripShaderProgram.alpha,a.worldAlpha),a.dirty?(a.dirty=!1,c.bindBuffer(c.ARRAY_BUFFER,a._vertexBuffer),c.bufferData(c.ARRAY_BUFFER,a.verticies,c.STATIC_DRAW),c.vertexAttribPointer(d.vertexPositionAttribute,2,c.FLOAT,!1,0,0),c.bindBuffer(c.ARRAY_BUFFER,a._uvBuffer),c.bufferData(c.ARRAY_BUFFER,a.uvs,c.STATIC_DRAW),c.vertexAttribPointer(d.textureCoordAttribute,2,c.FLOAT,!1,0,0),c.activeTexture(c.TEXTURE0),c.bindTexture(c.TEXTURE_2D,a.texture.baseTexture._glTexture),c.bindBuffer(c.ARRAY_BUFFER,a._colorBuffer),c.bufferData(c.ARRAY_BUFFER,a.colors,c.STATIC_DRAW),c.vertexAttribPointer(d.colorAttribute,1,c.FLOAT,!1,0,0),c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,a._indexBuffer),c.bufferData(c.ELEMENT_ARRAY_BUFFER,a.indices,c.STATIC_DRAW)):(c.bindBuffer(c.ARRAY_BUFFER,a._vertexBuffer),c.bufferSubData(c.ARRAY_BUFFER,0,a.verticies),c.vertexAttribPointer(d.vertexPositionAttribute,2,c.FLOAT,!1,0,0),c.bindBuffer(c.ARRAY_BUFFER,a._uvBuffer),c.vertexAttribPointer(d.textureCoordAttribute,2,c.FLOAT,!1,0,0),c.activeTexture(c.TEXTURE0),c.bindTexture(c.TEXTURE_2D,a.texture.baseTexture._glTexture),c.bindBuffer(c.ARRAY_BUFFER,a._colorBuffer),c.vertexAttribPointer(d.colorAttribute,1,c.FLOAT,!1,0,0),c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,a._indexBuffer)),c.drawElements(c.TRIANGLE_STRIP,a.indices.length,c.UNSIGNED_SHORT,0),c.useProgram(f.shaderProgram)},f.WebGLRenderGroup.prototype.renderTilingSprite=function(a,b){var c=this.gl;f.shaderProgram;var d=a.tilePosition,e=a.tileScale,g=d.x/a.texture.baseTexture.width,h=d.y/a.texture.baseTexture.height,i=a.width/a.texture.baseTexture.width/e.x,j=a.height/a.texture.baseTexture.height/e.y;a.uvs[0]=0-g,a.uvs[1]=0-h,a.uvs[2]=1*i-g,a.uvs[3]=0-h,a.uvs[4]=1*i-g,a.uvs[5]=1*j-h,a.uvs[6]=0-g,a.uvs[7]=1*j-h,c.bindBuffer(c.ARRAY_BUFFER,a._uvBuffer),c.bufferSubData(c.ARRAY_BUFFER,0,a.uvs),this.renderStrip(a,b)},f.WebGLRenderGroup.prototype.initStrip=function(a){var b=this.gl;this.shaderProgram,a._vertexBuffer=b.createBuffer(),a._indexBuffer=b.createBuffer(),a._uvBuffer=b.createBuffer(),a._colorBuffer=b.createBuffer(),b.bindBuffer(b.ARRAY_BUFFER,a._vertexBuffer),b.bufferData(b.ARRAY_BUFFER,a.verticies,b.DYNAMIC_DRAW),b.bindBuffer(b.ARRAY_BUFFER,a._uvBuffer),b.bufferData(b.ARRAY_BUFFER,a.uvs,b.STATIC_DRAW),b.bindBuffer(b.ARRAY_BUFFER,a._colorBuffer),b.bufferData(b.ARRAY_BUFFER,a.colors,b.STATIC_DRAW),b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,a._indexBuffer),b.bufferData(b.ELEMENT_ARRAY_BUFFER,a.indices,b.STATIC_DRAW)},f.CanvasRenderer=function(a,b,c,d){this.transparent=d,this.width=a||800,this.height=b||600,this.view=c||document.createElement(\"canvas\"),this.context=this.view.getContext(\"2d\"),this.refresh=!0,this.view.width=this.width,this.view.height=this.height,this.count=0},f.CanvasRenderer.prototype.constructor=f.CanvasRenderer,f.CanvasRenderer.prototype.render=function(a){f.texturesToUpdate=[],f.texturesToDestroy=[],f.visibleCount++,a.updateTransform(),this.view.style.backgroundColor==a.backgroundColorString||this.transparent||(this.view.style.backgroundColor=a.backgroundColorString),this.context.setTransform(1,0,0,1,0,0),this.context.clearRect(0,0,this.width,this.height),this.renderDisplayObject(a),a.interactive&&(a._interactiveEventsAdded||(a._interactiveEventsAdded=!0,a.interactionManager.setTarget(this))),f.Texture.frameUpdates.length>0&&(f.Texture.frameUpdates=[])},f.CanvasRenderer.prototype.resize=function(a,b){this.width=a,this.height=b,this.view.width=a,this.view.height=b},f.CanvasRenderer.prototype.renderDisplayObject=function(a){var b,c=this.context;c.globalCompositeOperation=\"source-over\";var d=a.last._iNext;a=a.first;do if(b=a.worldTransform,a.visible)if(a.renderable){if(a instanceof f.Sprite){var e=a.texture.frame;e&&(c.globalAlpha=a.worldAlpha,c.setTransform(b[0],b[3],b[1],b[4],b[2],b[5]),c.drawImage(a.texture.baseTexture.source,e.x,e.y,e.width,e.height,a.anchor.x*-e.width,a.anchor.y*-e.height,e.width,e.height))}else if(a instanceof f.Strip)c.setTransform(b[0],b[3],b[1],b[4],b[2],b[5]),this.renderStrip(a);else if(a instanceof f.TilingSprite)c.setTransform(b[0],b[3],b[1],b[4],b[2],b[5]),this.renderTilingSprite(a);else if(a instanceof f.CustomRenderable)a.renderCanvas(this);else if(a instanceof f.Graphics)c.setTransform(b[0],b[3],b[1],b[4],b[2],b[5]),f.CanvasGraphics.renderGraphics(a,c);else if(a instanceof f.FilterBlock)if(a.open){c.save();var g=a.mask.alpha,h=a.mask.worldTransform;c.setTransform(h[0],h[3],h[1],h[4],h[2],h[5]),a.mask.worldAlpha=.5,c.worldAlpha=0,f.CanvasGraphics.renderGraphicsMask(a.mask,c),c.clip(),a.mask.worldAlpha=g}else c.restore();a=a._iNext}else a=a._iNext;else a=a.last._iNext;while(a!=d)},f.CanvasRenderer.prototype.renderStripFlat=function(a){var b=this.context,c=a.verticies;a.uvs;var d=c.length/2;this.count++,b.beginPath();for(var e=1;d-2>e;e++){var f=2*e,g=c[f],h=c[f+2],i=c[f+4],j=c[f+1],k=c[f+3],l=c[f+5];b.moveTo(g,j),b.lineTo(h,k),b.lineTo(i,l)}b.fillStyle=\"#FF0000\",b.fill(),b.closePath()},f.CanvasRenderer.prototype.renderTilingSprite=function(a){var b=this.context;b.globalAlpha=a.worldAlpha,a.__tilePattern||(a.__tilePattern=b.createPattern(a.texture.baseTexture.source,\"repeat\")),b.beginPath();var c=a.tilePosition,d=a.tileScale;b.scale(d.x,d.y),b.translate(c.x,c.y),b.fillStyle=a.__tilePattern,b.fillRect(-c.x,-c.y,a.width/d.x,a.height/d.y),b.scale(1/d.x,1/d.y),b.translate(-c.x,-c.y),b.closePath()},f.CanvasRenderer.prototype.renderStrip=function(a){var b=this.context,c=a.verticies,d=a.uvs,e=c.length/2;this.count++;for(var f=1;e-2>f;f++){var g=2*f,h=c[g],i=c[g+2],j=c[g+4],k=c[g+1],l=c[g+3],m=c[g+5],n=d[g]*a.texture.width,o=d[g+2]*a.texture.width,p=d[g+4]*a.texture.width,q=d[g+1]*a.texture.height,r=d[g+3]*a.texture.height,s=d[g+5]*a.texture.height;b.save(),b.beginPath(),b.moveTo(h,k),b.lineTo(i,l),b.lineTo(j,m),b.closePath(),b.clip();var t=n*r+q*p+o*s-r*p-q*o-n*s,u=h*r+q*j+i*s-r*j-q*i-h*s,v=n*i+h*p+o*j-i*p-h*o-n*j,w=n*r*j+q*i*p+h*o*s-h*r*p-q*o*j-n*i*s,x=k*r+q*m+l*s-r*m-q*l-k*s,y=n*l+k*p+o*m-l*p-k*o-n*m,z=n*r*m+q*l*p+k*o*s-k*r*p-q*o*m-n*l*s;b.transform(u/t,x/t,v/t,y/t,w/t,z/t),b.drawImage(a.texture.baseTexture.source,0,0),b.restore()}},f.CanvasGraphics=function(){},f.CanvasGraphics.renderGraphics=function(a,b){for(var c=a.worldAlpha,d=0;d<a.graphicsData.length;d++){var e=a.graphicsData[d],g=e.points;if(b.strokeStyle=color=\"#\"+(\"00000\"+(0|e.lineColor).toString(16)).substr(-6),b.lineWidth=e.lineWidth,e.type===f.Graphics.POLY){b.beginPath(),b.moveTo(g[0],g[1]);for(var h=1;h<g.length/2;h++)b.lineTo(g[2*h],g[2*h+1]);g[0]===g[g.length-2]&&g[1]===g[g.length-1]&&b.closePath(),e.fill&&(b.globalAlpha=e.fillAlpha*c,b.fillStyle=color=\"#\"+(\"00000\"+(0|e.fillColor).toString(16)).substr(-6),b.fill()),e.lineWidth&&(b.globalAlpha=e.lineAlpha*c,b.stroke())}else if(e.type===f.Graphics.RECT)void 0!=e.fillColor&&(b.globalAlpha=e.fillAlpha*c,b.fillStyle=color=\"#\"+(\"00000\"+(0|e.fillColor).toString(16)).substr(-6),b.fillRect(g[0],g[1],g[2],g[3])),e.lineWidth&&(b.globalAlpha=e.lineAlpha*c,b.strokeRect(g[0],g[1],g[2],g[3]));else if(e.type==f.Graphics.CIRC)b.beginPath(),b.arc(g[0],g[1],g[2],0,2*Math.PI),b.closePath(),e.fill&&(b.globalAlpha=e.fillAlpha*c,b.fillStyle=color=\"#\"+(\"00000\"+(0|e.fillColor).toString(16)).substr(-6),b.fill()),e.lineWidth&&(b.globalAlpha=e.lineAlpha*c,b.stroke());else if(e.type==f.Graphics.ELIP){var i=e.points,j=2*i[2],k=2*i[3],l=i[0]-j/2,m=i[1]-k/2;b.beginPath();var n=.5522848,o=j/2*n,p=k/2*n,q=l+j,r=m+k,s=l+j/2,t=m+k/2;b.moveTo(l,t),b.bezierCurveTo(l,t-p,s-o,m,s,m),b.bezierCurveTo(s+o,m,q,t-p,q,t),b.bezierCurveTo(q,t+p,s+o,r,s,r),b.bezierCurveTo(s-o,r,l,t+p,l,t),b.closePath(),e.fill&&(b.globalAlpha=e.fillAlpha*c,b.fillStyle=color=\"#\"+(\"00000\"+(0|e.fillColor).toString(16)).substr(-6),b.fill()),e.lineWidth&&(b.globalAlpha=e.lineAlpha*c,b.stroke())}}},f.CanvasGraphics.renderGraphicsMask=function(a,b){a.worldAlpha;var c=a.graphicsData.length;c>1&&(c=1,console.log(\"Pixi.js warning: masks in canvas can only mask using the first path in the graphics object\"));for(var d=0;1>d;d++){var e=a.graphicsData[d],g=e.points;if(e.type==f.Graphics.POLY){b.beginPath(),b.moveTo(g[0],g[1]);for(var h=1;h<g.length/2;h++)b.lineTo(g[2*h],g[2*h+1]);g[0]==g[g.length-2]&&g[1]==g[g.length-1]&&b.closePath()}else if(e.type==f.Graphics.RECT)b.beginPath(),b.rect(g[0],g[1],g[2],g[3]),b.closePath();else if(e.type==f.Graphics.CIRC)b.beginPath(),b.arc(g[0],g[1],g[2],0,2*Math.PI),b.closePath();else if(e.type==f.Graphics.ELIP){var i=e.points,j=2*i[2],k=2*i[3],l=i[0]-j/2,m=i[1]-k/2;b.beginPath();var n=.5522848,o=j/2*n,p=k/2*n,q=l+j,r=m+k,s=l+j/2,t=m+k/2;b.moveTo(l,t),b.bezierCurveTo(l,t-p,s-o,m,s,m),b.bezierCurveTo(s+o,m,q,t-p,q,t),b.bezierCurveTo(q,t+p,s+o,r,s,r),b.bezierCurveTo(s-o,r,l,t+p,l,t),b.closePath()}}},f.Graphics=function(){f.DisplayObjectContainer.call(this),this.renderable=!0,this.fillAlpha=1,this.lineWidth=0,this.lineColor=\"black\",this.graphicsData=[],this.currentPath={points:[]}},f.Graphics.prototype=Object.create(f.DisplayObjectContainer.prototype),f.Graphics.prototype.constructor=f.Graphics,f.Graphics.prototype.lineStyle=function(a,b,c){0==this.currentPath.points.length&&this.graphicsData.pop(),this.lineWidth=a||0,this.lineColor=b||0,this.lineAlpha=void 0==c?1:c,this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[],type:f.Graphics.POLY},this.graphicsData.push(this.currentPath)\n},f.Graphics.prototype.moveTo=function(a,b){0==this.currentPath.points.length&&this.graphicsData.pop(),this.currentPath=this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[],type:f.Graphics.POLY},this.currentPath.points.push(a,b),this.graphicsData.push(this.currentPath)},f.Graphics.prototype.lineTo=function(a,b){this.currentPath.points.push(a,b),this.dirty=!0},f.Graphics.prototype.beginFill=function(a,b){this.filling=!0,this.fillColor=a||0,this.fillAlpha=void 0==b?1:b},f.Graphics.prototype.endFill=function(){this.filling=!1,this.fillColor=null,this.fillAlpha=1},f.Graphics.prototype.drawRect=function(a,b,c,d){0==this.currentPath.points.length&&this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[a,b,c,d],type:f.Graphics.RECT},this.graphicsData.push(this.currentPath),this.dirty=!0},f.Graphics.prototype.drawCircle=function(a,b,c){0==this.currentPath.points.length&&this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[a,b,c,c],type:f.Graphics.CIRC},this.graphicsData.push(this.currentPath),this.dirty=!0},f.Graphics.prototype.drawElipse=function(a,b,c,d){0==this.currentPath.points.length&&this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[a,b,c,d],type:f.Graphics.ELIP},this.graphicsData.push(this.currentPath),this.dirty=!0},f.Graphics.prototype.clear=function(){this.lineWidth=0,this.filling=!1,this.dirty=!0,this.clearDirty=!0,this.graphicsData=[]},f.Graphics.POLY=0,f.Graphics.RECT=1,f.Graphics.CIRC=2,f.Graphics.ELIP=3,f.Strip=function(a,b,c){f.DisplayObjectContainer.call(this),this.texture=a,this.blendMode=f.blendModes.NORMAL;try{this.uvs=new Float32Array([0,1,1,1,1,0,0,1]),this.verticies=new Float32Array([0,0,0,0,0,0,0,0,0]),this.colors=new Float32Array([1,1,1,1]),this.indices=new Uint16Array([0,1,2,3])}catch(d){this.uvs=[0,1,1,1,1,0,0,1],this.verticies=[0,0,0,0,0,0,0,0,0],this.colors=[1,1,1,1],this.indices=[0,1,2,3]}this.width=b,this.height=c,a.baseTexture.hasLoaded?(this.width=this.texture.frame.width,this.height=this.texture.frame.height,this.updateFrame=!0):(this.onTextureUpdateBind=this.onTextureUpdate.bind(this),this.texture.addEventListener(\"update\",this.onTextureUpdateBind)),this.renderable=!0},f.Strip.prototype=Object.create(f.DisplayObjectContainer.prototype),f.Strip.prototype.constructor=f.Strip,f.Strip.prototype.setTexture=function(a){this.texture=a,this.width=a.frame.width,this.height=a.frame.height,this.updateFrame=!0},f.Strip.prototype.onTextureUpdate=function(){this.updateFrame=!0},f.Rope=function(a,b){f.Strip.call(this,a),this.points=b;try{this.verticies=new Float32Array(4*b.length),this.uvs=new Float32Array(4*b.length),this.colors=new Float32Array(2*b.length),this.indices=new Uint16Array(2*b.length)}catch(c){this.verticies=verticies,this.uvs=uvs,this.colors=colors,this.indices=indices}this.refresh()},f.Rope.prototype=Object.create(f.Strip.prototype),f.Rope.prototype.constructor=f.Rope,f.Rope.prototype.refresh=function(){var a=this.points;if(!(a.length<1)){var b=this.uvs,c=this.indices,d=this.colors,e=a[0],f=a[0];this.count-=.2,b[0]=0,b[1]=1,b[2]=0,b[3]=1,d[0]=1,d[1]=1,c[0]=0,c[1]=1;for(var g=a.length,h=1;g>h;h++){var f=a[h],i=4*h,j=h/(g-1);h%2?(b[i]=j,b[i+1]=0,b[i+2]=j,b[i+3]=1):(b[i]=j,b[i+1]=0,b[i+2]=j,b[i+3]=1),i=2*h,d[i]=1,d[i+1]=1,i=2*h,c[i]=i,c[i+1]=i+1,e=f}}},f.Rope.prototype.updateTransform=function(){var a=this.points;if(!(a.length<1)){var b,c=this.verticies,d=a[0],e={x:0,y:0},g=a[0];this.count-=.2,c[0]=g.x+e.x,c[1]=g.y+e.y,c[2]=g.x-e.x,c[3]=g.y-e.y;for(var h=a.length,i=1;h>i;i++){var g=a[i],j=4*i;b=i<a.length-1?a[i+1]:g,e.y=-(b.x-d.x),e.x=b.y-d.y;var k=10*(1-i/(h-1));k>1&&(k=1);var l=Math.sqrt(e.x*e.x+e.y*e.y),m=this.texture.height/2;e.x/=l,e.y/=l,e.x*=m,e.y*=m,c[j]=g.x+e.x,c[j+1]=g.y+e.y,c[j+2]=g.x-e.x,c[j+3]=g.y-e.y,d=g}f.DisplayObjectContainer.prototype.updateTransform.call(this)}},f.Rope.prototype.setTexture=function(a){this.texture=a,this.updateFrame=!0},f.TilingSprite=function(a,b,c){f.DisplayObjectContainer.call(this),this.texture=a,this.width=b,this.height=c,this.tileScale=new f.Point(1,1),this.tilePosition=new f.Point(0,0),this.renderable=!0,this.blendMode=f.blendModes.NORMAL},f.TilingSprite.prototype=Object.create(f.DisplayObjectContainer.prototype),f.TilingSprite.prototype.constructor=f.TilingSprite,f.TilingSprite.prototype.setTexture=function(a){this.texture=a,this.updateFrame=!0},f.TilingSprite.prototype.onTextureUpdate=function(){this.updateFrame=!0},f.Spine=function(a){if(f.DisplayObjectContainer.call(this),this.spineData=f.AnimCache[a],!this.spineData)throw new Error(\"Spine data must be preloaded using PIXI.SpineLoader or PIXI.AssetLoader: \"+a);this.skeleton=new l.Skeleton(this.spineData),this.skeleton.updateWorldTransform(),this.stateData=new l.AnimationStateData(this.spineData),this.state=new l.AnimationState(this.stateData),this.slotContainers=[];for(var b=0,c=this.skeleton.drawOrder.length;c>b;b++){var d=this.skeleton.drawOrder[b],e=d.attachment,g=new f.DisplayObjectContainer;if(this.slotContainers.push(g),this.addChild(g),e instanceof l.RegionAttachment){var h=e.rendererObject.name,i=this.createSprite(d,e.rendererObject);d.currentSprite=i,d.currentSpriteName=h,g.addChild(i)}}},f.Spine.prototype=Object.create(f.DisplayObjectContainer.prototype),f.Spine.prototype.constructor=f.Spine,f.Spine.prototype.updateTransform=function(){this.lastTime=this.lastTime||Date.now();var a=.001*(Date.now()-this.lastTime);this.lastTime=Date.now(),this.state.update(a),this.state.apply(this.skeleton),this.skeleton.updateWorldTransform();for(var b=this.skeleton.drawOrder,c=0,d=b.length;d>c;c++){var e=b[c],g=e.attachment,h=this.slotContainers[c];if(g instanceof l.RegionAttachment){if(g.rendererObject&&(!e.currentSpriteName||e.currentSpriteName!=g.name)){var i=g.rendererObject.name;if(void 0!==e.currentSprite&&(e.currentSprite.visible=!1),e.sprites=e.sprites||{},void 0!==e.sprites[i])e.sprites[i].visible=!0;else{var j=this.createSprite(e,g.rendererObject);h.addChild(j)}e.currentSprite=e.sprites[i],e.currentSpriteName=i}h.visible=!0;var k=e.bone;h.position.x=k.worldX+g.x*k.m00+g.y*k.m01,h.position.y=k.worldY+g.x*k.m10+g.y*k.m11,h.scale.x=k.worldScaleX,h.scale.y=k.worldScaleY,h.rotation=-(e.bone.worldRotation*Math.PI/180)}else h.visible=!1}f.DisplayObjectContainer.prototype.updateTransform.call(this)},f.Spine.prototype.createSprite=function(a,b){var c=f.TextureCache[b.name]?b.name:b.name+\".png\",d=new f.Sprite(f.Texture.fromFrame(c));return d.scale=b.scale,d.rotation=b.rotation,d.anchor.x=d.anchor.y=.5,a.sprites=a.sprites||{},a.sprites[b.name]=d,d};var l={};l.BoneData=function(a,b){this.name=a,this.parent=b},l.BoneData.prototype={length:0,x:0,y:0,rotation:0,scaleX:1,scaleY:1},l.SlotData=function(a,b){this.name=a,this.boneData=b},l.SlotData.prototype={r:1,g:1,b:1,a:1,attachmentName:null},l.Bone=function(a,b){this.data=a,this.parent=b,this.setToSetupPose()},l.Bone.yDown=!1,l.Bone.prototype={x:0,y:0,rotation:0,scaleX:1,scaleY:1,m00:0,m01:0,worldX:0,m10:0,m11:0,worldY:0,worldRotation:0,worldScaleX:1,worldScaleY:1,updateWorldTransform:function(a,b){var c=this.parent;null!=c?(this.worldX=this.x*c.m00+this.y*c.m01+c.worldX,this.worldY=this.x*c.m10+this.y*c.m11+c.worldY,this.worldScaleX=c.worldScaleX*this.scaleX,this.worldScaleY=c.worldScaleY*this.scaleY,this.worldRotation=c.worldRotation+this.rotation):(this.worldX=this.x,this.worldY=this.y,this.worldScaleX=this.scaleX,this.worldScaleY=this.scaleY,this.worldRotation=this.rotation);var d=this.worldRotation*Math.PI/180,e=Math.cos(d),f=Math.sin(d);this.m00=e*this.worldScaleX,this.m10=f*this.worldScaleX,this.m01=-f*this.worldScaleY,this.m11=e*this.worldScaleY,a&&(this.m00=-this.m00,this.m01=-this.m01),b&&(this.m10=-this.m10,this.m11=-this.m11),l.Bone.yDown&&(this.m10=-this.m10,this.m11=-this.m11)},setToSetupPose:function(){var a=this.data;this.x=a.x,this.y=a.y,this.rotation=a.rotation,this.scaleX=a.scaleX,this.scaleY=a.scaleY}},l.Slot=function(a,b,c){this.data=a,this.skeleton=b,this.bone=c,this.setToSetupPose()},l.Slot.prototype={r:1,g:1,b:1,a:1,_attachmentTime:0,attachment:null,setAttachment:function(a){this.attachment=a,this._attachmentTime=this.skeleton.time},setAttachmentTime:function(a){this._attachmentTime=this.skeleton.time-a},getAttachmentTime:function(){return this.skeleton.time-this._attachmentTime},setToSetupPose:function(){var a=this.data;this.r=a.r,this.g=a.g,this.b=a.b,this.a=a.a;for(var b=this.skeleton.data.slots,c=0,d=b.length;d>c;c++)if(b[c]==a){this.setAttachment(a.attachmentName?this.skeleton.getAttachmentBySlotIndex(c,a.attachmentName):null);break}}},l.Skin=function(a){this.name=a,this.attachments={}},l.Skin.prototype={addAttachment:function(a,b,c){this.attachments[a+\":\"+b]=c},getAttachment:function(a,b){return this.attachments[a+\":\"+b]},_attachAll:function(a,b){for(var c in b.attachments){var d=c.indexOf(\":\"),e=parseInt(c.substring(0,d)),f=c.substring(d+1),g=a.slots[e];if(g.attachment&&g.attachment.name==f){var h=this.getAttachment(e,f);h&&g.setAttachment(h)}}}},l.Animation=function(a,b,c){this.name=a,this.timelines=b,this.duration=c},l.Animation.prototype={apply:function(a,b,c){c&&0!=this.duration&&(b%=this.duration);for(var d=this.timelines,e=0,f=d.length;f>e;e++)d[e].apply(a,b,1)},mix:function(a,b,c,d){c&&0!=this.duration&&(b%=this.duration);for(var e=this.timelines,f=0,g=e.length;g>f;f++)e[f].apply(a,b,d)}},l.binarySearch=function(a,b,c){var d=0,e=Math.floor(a.length/c)-2;if(0==e)return c;for(var f=e>>>1;;){if(a[(f+1)*c]<=b?d=f+1:e=f,d==e)return(d+1)*c;f=d+e>>>1}},l.linearSearch=function(a,b,c){for(var d=0,e=a.length-c;e>=d;d+=c)if(a[d]>b)return d;return-1},l.Curves=function(a){this.curves=[],this.curves.length=6*(a-1)},l.Curves.prototype={setLinear:function(a){this.curves[6*a]=0},setStepped:function(a){this.curves[6*a]=-1},setCurve:function(a,b,c,d,e){var f=.1,g=f*f,h=g*f,i=3*f,j=3*g,k=6*g,l=6*h,m=2*-b+d,n=2*-c+e,o=3*(b-d)+1,p=3*(c-e)+1,q=6*a,r=this.curves;r[q]=b*i+m*j+o*h,r[q+1]=c*i+n*j+p*h,r[q+2]=m*k+o*l,r[q+3]=n*k+p*l,r[q+4]=o*l,r[q+5]=p*l},getCurvePercent:function(a,b){b=0>b?0:b>1?1:b;var c=6*a,d=this.curves,e=d[c];if(!e)return b;if(-1==e)return 0;for(var f=d[c+1],g=d[c+2],h=d[c+3],i=d[c+4],j=d[c+5],k=e,l=f,m=8;;){if(k>=b){var n=k-e,o=l-f;return o+(l-o)*(b-n)/(k-n)}if(0==m)break;m--,e+=g,f+=h,g+=i,h+=j,k+=e,l+=f}return l+(1-l)*(b-k)/(1-k)}},l.RotateTimeline=function(a){this.curves=new l.Curves(a),this.frames=[],this.frames.length=2*a},l.RotateTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/2},setFrame:function(a,b,c){a*=2,this.frames[a]=b,this.frames[a+1]=c},apply:function(a,b,c){var d=this.frames;if(!(b<d[0])){var e=a.bones[this.boneIndex];if(b>=d[d.length-2]){for(var f=e.data.rotation+d[d.length-1]-e.rotation;f>180;)f-=360;for(;-180>f;)f+=360;return e.rotation+=f*c,void 0}var g=l.binarySearch(d,b,2),h=d[g-1],i=d[g],j=1-(b-i)/(d[g-2]-i);j=this.curves.getCurvePercent(g/2-1,j);for(var f=d[g+1]-h;f>180;)f-=360;for(;-180>f;)f+=360;for(f=e.data.rotation+(h+f*j)-e.rotation;f>180;)f-=360;for(;-180>f;)f+=360;e.rotation+=f*c}}},l.TranslateTimeline=function(a){this.curves=new l.Curves(a),this.frames=[],this.frames.length=3*a},l.TranslateTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/3},setFrame:function(a,b,c,d){a*=3,this.frames[a]=b,this.frames[a+1]=c,this.frames[a+2]=d},apply:function(a,b,c){var d=this.frames;if(!(b<d[0])){var e=a.bones[this.boneIndex];if(b>=d[d.length-3])return e.x+=(e.data.x+d[d.length-2]-e.x)*c,e.y+=(e.data.y+d[d.length-1]-e.y)*c,void 0;var f=l.binarySearch(d,b,3),g=d[f-2],h=d[f-1],i=d[f],j=1-(b-i)/(d[f+-3]-i);j=this.curves.getCurvePercent(f/3-1,j),e.x+=(e.data.x+g+(d[f+1]-g)*j-e.x)*c,e.y+=(e.data.y+h+(d[f+2]-h)*j-e.y)*c}}},l.ScaleTimeline=function(a){this.curves=new l.Curves(a),this.frames=[],this.frames.length=3*a},l.ScaleTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/3},setFrame:function(a,b,c,d){a*=3,this.frames[a]=b,this.frames[a+1]=c,this.frames[a+2]=d},apply:function(a,b,c){var d=this.frames;if(!(b<d[0])){var e=a.bones[this.boneIndex];if(b>=d[d.length-3])return e.scaleX+=(e.data.scaleX-1+d[d.length-2]-e.scaleX)*c,e.scaleY+=(e.data.scaleY-1+d[d.length-1]-e.scaleY)*c,void 0;var f=l.binarySearch(d,b,3),g=d[f-2],h=d[f-1],i=d[f],j=1-(b-i)/(d[f+-3]-i);j=this.curves.getCurvePercent(f/3-1,j),e.scaleX+=(e.data.scaleX-1+g+(d[f+1]-g)*j-e.scaleX)*c,e.scaleY+=(e.data.scaleY-1+h+(d[f+2]-h)*j-e.scaleY)*c}}},l.ColorTimeline=function(a){this.curves=new l.Curves(a),this.frames=[],this.frames.length=5*a},l.ColorTimeline.prototype={slotIndex:0,getFrameCount:function(){return this.frames.length/2},setFrame:function(c,d){c*=5,this.frames[c]=d,this.frames[c+1]=r,this.frames[c+2]=g,this.frames[c+3]=b,this.frames[c+4]=a},apply:function(a,b,c){var d=this.frames;if(!(b<d[0])){var e=a.slots[this.slotIndex];if(b>=d[d.length-5]){var f=d.length-1;return e.r=d[f-3],e.g=d[f-2],e.b=d[f-1],e.a=d[f],void 0}var g=l.binarySearch(d,b,5),h=d[g-4],i=d[g-3],j=d[g-2],k=d[g-1],m=d[g],n=1-(b-m)/(d[g-5]-m);n=this.curves.getCurvePercent(g/5-1,n);var o=h+(d[g+1]-h)*n,p=i+(d[g+2]-i)*n,q=j+(d[g+3]-j)*n,r=k+(d[g+4]-k)*n;1>c?(e.r+=(o-e.r)*c,e.g+=(p-e.g)*c,e.b+=(q-e.b)*c,e.a+=(r-e.a)*c):(e.r=o,e.g=p,e.b=q,e.a=r)}}},l.AttachmentTimeline=function(a){this.curves=new l.Curves(a),this.frames=[],this.frames.length=a,this.attachmentNames=[],this.attachmentNames.length=a},l.AttachmentTimeline.prototype={slotIndex:0,getFrameCount:function(){return this.frames.length},setFrame:function(a,b,c){this.frames[a]=b,this.attachmentNames[a]=c},apply:function(a,b){var c=this.frames;if(!(b<c[0])){var d;d=b>=c[c.length-1]?c.length-1:l.binarySearch(c,b,1)-1;var e=this.attachmentNames[d];a.slots[this.slotIndex].setAttachment(e?a.getAttachmentBySlotIndex(this.slotIndex,e):null)}}},l.SkeletonData=function(){this.bones=[],this.slots=[],this.skins=[],this.animations=[]},l.SkeletonData.prototype={defaultSkin:null,findBone:function(a){for(var b=this.bones,c=0,d=b.length;d>c;c++)if(b[c].name==a)return b[c];return null},findBoneIndex:function(a){for(var b=this.bones,c=0,d=b.length;d>c;c++)if(b[c].name==a)return c;return-1},findSlot:function(a){for(var b=this.slots,c=0,d=b.length;d>c;c++)if(b[c].name==a)return slot[c];return null},findSlotIndex:function(a){for(var b=this.slots,c=0,d=b.length;d>c;c++)if(b[c].name==a)return c;return-1},findSkin:function(a){for(var b=this.skins,c=0,d=b.length;d>c;c++)if(b[c].name==a)return b[c];return null},findAnimation:function(a){for(var b=this.animations,c=0,d=b.length;d>c;c++)if(b[c].name==a)return b[c];return null}},l.Skeleton=function(a){this.data=a,this.bones=[];for(var b=0,c=a.bones.length;c>b;b++){var d=a.bones[b],e=d.parent?this.bones[a.bones.indexOf(d.parent)]:null;this.bones.push(new l.Bone(d,e))}this.slots=[],this.drawOrder=[];for(var b=0,c=a.slots.length;c>b;b++){var f=a.slots[b],g=this.bones[a.bones.indexOf(f.boneData)],h=new l.Slot(f,this,g);this.slots.push(h),this.drawOrder.push(h)}},l.Skeleton.prototype={x:0,y:0,skin:null,r:1,g:1,b:1,a:1,time:0,flipX:!1,flipY:!1,updateWorldTransform:function(){for(var a=this.flipX,b=this.flipY,c=this.bones,d=0,e=c.length;e>d;d++)c[d].updateWorldTransform(a,b)},setToSetupPose:function(){this.setBonesToSetupPose(),this.setSlotsToSetupPose()},setBonesToSetupPose:function(){for(var a=this.bones,b=0,c=a.length;c>b;b++)a[b].setToSetupPose()},setSlotsToSetupPose:function(){for(var a=this.slots,b=0,c=a.length;c>b;b++)a[b].setToSetupPose(b)},getRootBone:function(){return 0==this.bones.length?null:this.bones[0]},findBone:function(a){for(var b=this.bones,c=0,d=b.length;d>c;c++)if(b[c].data.name==a)return b[c];return null},findBoneIndex:function(a){for(var b=this.bones,c=0,d=b.length;d>c;c++)if(b[c].data.name==a)return c;return-1},findSlot:function(a){for(var b=this.slots,c=0,d=b.length;d>c;c++)if(b[c].data.name==a)return b[c];return null},findSlotIndex:function(a){for(var b=this.slots,c=0,d=b.length;d>c;c++)if(b[c].data.name==a)return c;return-1},setSkinByName:function(a){var b=this.data.findSkin(a);if(!b)throw\"Skin not found: \"+a;this.setSkin(b)},setSkin:function(a){this.skin&&a&&a._attachAll(this,this.skin),this.skin=a},getAttachmentBySlotName:function(a,b){return this.getAttachmentBySlotIndex(this.data.findSlotIndex(a),b)},getAttachmentBySlotIndex:function(a,b){if(this.skin){var c=this.skin.getAttachment(a,b);if(c)return c}return this.data.defaultSkin?this.data.defaultSkin.getAttachment(a,b):null},setAttachment:function(a,b){for(var c=this.slots,d=0,e=c.size;e>d;d++){var f=c[d];if(f.data.name==a){var g=null;if(b&&(g=this.getAttachment(d,b),null==g))throw\"Attachment not found: \"+b+\", for slot: \"+a;return f.setAttachment(g),void 0}}throw\"Slot not found: \"+a},update:function(a){time+=a}},l.AttachmentType={region:0},l.RegionAttachment=function(){this.offset=[],this.offset.length=8,this.uvs=[],this.uvs.length=8},l.RegionAttachment.prototype={x:0,y:0,rotation:0,scaleX:1,scaleY:1,width:0,height:0,rendererObject:null,regionOffsetX:0,regionOffsetY:0,regionWidth:0,regionHeight:0,regionOriginalWidth:0,regionOriginalHeight:0,setUVs:function(a,b,c,d,e){var f=this.uvs;e?(f[2]=a,f[3]=d,f[4]=a,f[5]=b,f[6]=c,f[7]=b,f[0]=c,f[1]=d):(f[0]=a,f[1]=d,f[2]=a,f[3]=b,f[4]=c,f[5]=b,f[6]=c,f[7]=d)},updateOffset:function(){var a=this.width/this.regionOriginalWidth*this.scaleX,b=this.height/this.regionOriginalHeight*this.scaleY,c=-this.width/2*this.scaleX+this.regionOffsetX*a,d=-this.height/2*this.scaleY+this.regionOffsetY*b,e=c+this.regionWidth*a,f=d+this.regionHeight*b,g=this.rotation*Math.PI/180,h=Math.cos(g),i=Math.sin(g),j=c*h+this.x,k=c*i,l=d*h+this.y,m=d*i,n=e*h+this.x,o=e*i,p=f*h+this.y,q=f*i,r=this.offset;r[0]=j-m,r[1]=l+k,r[2]=j-q,r[3]=p+k,r[4]=n-q,r[5]=p+o,r[6]=n-m,r[7]=l+o},computeVertices:function(a,b,c,d){a+=c.worldX,b+=c.worldY;var e=c.m00,f=c.m01,g=c.m10,h=c.m11,i=this.offset;d[0]=i[0]*e+i[1]*f+a,d[1]=i[0]*g+i[1]*h+b,d[2]=i[2]*e+i[3]*f+a,d[3]=i[2]*g+i[3]*h+b,d[4]=i[4]*e+i[5]*f+a,d[5]=i[4]*g+i[5]*h+b,d[6]=i[6]*e+i[7]*f+a,d[7]=i[6]*g+i[7]*h+b}},l.AnimationStateData=function(a){this.skeletonData=a,this.animationToMixTime={}},l.AnimationStateData.prototype={defaultMix:0,setMixByName:function(a,b,c){var d=this.skeletonData.findAnimation(a);if(!d)throw\"Animation not found: \"+a;var e=this.skeletonData.findAnimation(b);if(!e)throw\"Animation not found: \"+b;this.setMix(d,e,c)},setMix:function(a,b,c){this.animationToMixTime[a.name+\":\"+b.name]=c},getMix:function(a,b){var c=this.animationToMixTime[a.name+\":\"+b.name];return c?c:this.defaultMix}},l.AnimationState=function(a){this.data=a,this.queue=[]},l.AnimationState.prototype={current:null,previous:null,currentTime:0,previousTime:0,currentLoop:!1,previousLoop:!1,mixTime:0,mixDuration:0,update:function(a){if(this.currentTime+=a,this.previousTime+=a,this.mixTime+=a,this.queue.length>0){var b=this.queue[0];this.currentTime>=b.delay&&(this._setAnimation(b.animation,b.loop),this.queue.shift())}},apply:function(a){if(this.current)if(this.previous){this.previous.apply(a,this.previousTime,this.previousLoop);var b=this.mixTime/this.mixDuration;b>=1&&(b=1,this.previous=null),this.current.mix(a,this.currentTime,this.currentLoop,b)}else this.current.apply(a,this.currentTime,this.currentLoop)},clearAnimation:function(){this.previous=null,this.current=null,this.queue.length=0},_setAnimation:function(a,b){this.previous=null,a&&this.current&&(this.mixDuration=this.data.getMix(this.current,a),this.mixDuration>0&&(this.mixTime=0,this.previous=this.current,this.previousTime=this.currentTime,this.previousLoop=this.currentLoop)),this.current=a,this.currentLoop=b,this.currentTime=0},setAnimationByName:function(a,b){var c=this.data.skeletonData.findAnimation(a);if(!c)throw\"Animation not found: \"+a;this.setAnimation(c,b)},setAnimation:function(a,b){this.queue.length=0,this._setAnimation(a,b)},addAnimationByName:function(a,b,c){var d=this.data.skeletonData.findAnimation(a);if(!d)throw\"Animation not found: \"+a;this.addAnimation(d,b,c)},addAnimation:function(a,b,c){var d={};if(d.animation=a,d.loop=b,!c||0>=c){var e=0==this.queue.length?this.current:this.queue[this.queue.length-1].animation;c=null!=e?e.duration-this.data.getMix(e,a)+(c||0):0}d.delay=c,this.queue.push(d)},isComplete:function(){return!this.current||this.currentTime>=this.current.duration}},l.SkeletonJson=function(a){this.attachmentLoader=a},l.SkeletonJson.prototype={scale:1,readSkeletonData:function(a){for(var b=new l.SkeletonData,c=a.bones,d=0,e=c.length;e>d;d++){var f=c[d],g=null;if(f.parent&&(g=b.findBone(f.parent),!g))throw\"Parent bone not found: \"+f.parent;var h=new l.BoneData(f.name,g);h.length=(f.length||0)*this.scale,h.x=(f.x||0)*this.scale,h.y=(f.y||0)*this.scale,h.rotation=f.rotation||0,h.scaleX=f.scaleX||1,h.scaleY=f.scaleY||1,b.bones.push(h)}for(var i=a.slots,d=0,e=i.length;e>d;d++){var j=i[d],h=b.findBone(j.bone);if(!h)throw\"Slot bone not found: \"+j.bone;var k=new l.SlotData(j.name,h),m=j.color;m&&(k.r=l.SkeletonJson.toColor(m,0),k.g=l.SkeletonJson.toColor(m,1),k.b=l.SkeletonJson.toColor(m,2),k.a=l.SkeletonJson.toColor(m,3)),k.attachmentName=j.attachment,b.slots.push(k)}var n=a.skins;for(var o in n)if(n.hasOwnProperty(o)){var p=n[o],q=new l.Skin(o);for(var r in p)if(p.hasOwnProperty(r)){var s=b.findSlotIndex(r),t=p[r];for(var u in t)if(t.hasOwnProperty(u)){var v=this.readAttachment(q,u,t[u]);null!=v&&q.addAttachment(s,u,v)}}b.skins.push(q),\"default\"==q.name&&(b.defaultSkin=q)}var w=a.animations;for(var x in w)w.hasOwnProperty(x)&&this.readAnimation(x,w[x],b);return b},readAttachment:function(a,b,c){b=c.name||b;var d=l.AttachmentType[c.type||\"region\"];if(d==l.AttachmentType.region){var e=new l.RegionAttachment;return e.x=(c.x||0)*this.scale,e.y=(c.y||0)*this.scale,e.scaleX=c.scaleX||1,e.scaleY=c.scaleY||1,e.rotation=c.rotation||0,e.width=(c.width||32)*this.scale,e.height=(c.height||32)*this.scale,e.updateOffset(),e.rendererObject={},e.rendererObject.name=b,e.rendererObject.scale={},e.rendererObject.scale.x=e.scaleX,e.rendererObject.scale.y=e.scaleY,e.rendererObject.rotation=-e.rotation*Math.PI/180,e}throw\"Unknown attachment type: \"+d},readAnimation:function(a,b,c){var d=[],e=0,f=b.bones;for(var g in f)if(f.hasOwnProperty(g)){var h=c.findBoneIndex(g);if(-1==h)throw\"Bone not found: \"+g;var i=f[g];for(var j in i)if(i.hasOwnProperty(j)){var k=i[j];if(\"rotate\"==j){var m=new l.RotateTimeline(k.length);m.boneIndex=h;for(var n=0,o=0,p=k.length;p>o;o++){var q=k[o];m.setFrame(n,q.time,q.angle),l.SkeletonJson.readCurve(m,n,q),n++}d.push(m),e=Math.max(e,m.frames[2*m.getFrameCount()-2])}else{if(\"translate\"!=j&&\"scale\"!=j)throw\"Invalid timeline type for a bone: \"+j+\" (\"+g+\")\";var m,r=1;\"scale\"==j?m=new l.ScaleTimeline(k.length):(m=new l.TranslateTimeline(k.length),r=this.scale),m.boneIndex=h;for(var n=0,o=0,p=k.length;p>o;o++){var q=k[o],s=(q.x||0)*r,t=(q.y||0)*r;m.setFrame(n,q.time,s,t),l.SkeletonJson.readCurve(m,n,q),n++}d.push(m),e=Math.max(e,m.frames[3*m.getFrameCount()-3])}}}var u=b.slots;for(var v in u)if(u.hasOwnProperty(v)){var w=u[v],x=c.findSlotIndex(v);for(var j in w)if(w.hasOwnProperty(j)){var k=w[j];if(\"color\"==j){var m=new l.ColorTimeline(k.length);m.slotIndex=x;for(var n=0,o=0,p=k.length;p>o;o++){var q=k[o],y=q.color,z=l.SkeletonJson.toColor(y,0),A=l.SkeletonJson.toColor(y,1),B=l.SkeletonJson.toColor(y,2),C=l.SkeletonJson.toColor(y,3);m.setFrame(n,q.time,z,A,B,C),l.SkeletonJson.readCurve(m,n,q),n++}d.push(m),e=Math.max(e,m.frames[5*m.getFrameCount()-5])}else{if(\"attachment\"!=j)throw\"Invalid timeline type for a slot: \"+j+\" (\"+v+\")\";var m=new l.AttachmentTimeline(k.length);m.slotIndex=x;for(var n=0,o=0,p=k.length;p>o;o++){var q=k[o];m.setFrame(n++,q.time,q.name)}d.push(m),e=Math.max(e,m.frames[m.getFrameCount()-1])}}}c.animations.push(new l.Animation(a,d,e))}},l.SkeletonJson.readCurve=function(a,b,c){var d=c.curve;d&&(\"stepped\"==d?a.curves.setStepped(b):d instanceof Array&&a.curves.setCurve(b,d[0],d[1],d[2],d[3]))},l.SkeletonJson.toColor=function(a,b){if(8!=a.length)throw\"Color hexidecimal length must be 8, recieved: \"+a;return parseInt(a.substring(2*b,2),16)/255},l.Atlas=function(a,b){this.textureLoader=b,this.pages=[],this.regions=[];var c=new l.AtlasReader(a),d=[];d.length=4;for(var e=null;;){var f=c.readLine();if(null==f)break;if(f=c.trim(f),0==f.length)e=null;else if(e){var g=new l.AtlasRegion;g.name=f,g.page=e,g.rotate=\"true\"==c.readValue(),c.readTuple(d);var h=parseInt(d[0]),i=parseInt(d[1]);c.readTuple(d);var j=parseInt(d[0]),k=parseInt(d[1]);g.u=h/e.width,g.v=i/e.height,g.rotate?(g.u2=(h+k)/e.width,g.v2=(i+j)/e.height):(g.u2=(h+j)/e.width,g.v2=(i+k)/e.height),g.x=h,g.y=i,g.width=Math.abs(j),g.height=Math.abs(k),4==c.readTuple(d)&&(g.splits=[parseInt(d[0]),parseInt(d[1]),parseInt(d[2]),parseInt(d[3])],4==c.readTuple(d)&&(g.pads=[parseInt(d[0]),parseInt(d[1]),parseInt(d[2]),parseInt(d[3])],c.readTuple(d))),g.originalWidth=parseInt(d[0]),g.originalHeight=parseInt(d[1]),c.readTuple(d),g.offsetX=parseInt(d[0]),g.offsetY=parseInt(d[1]),g.index=parseInt(c.readValue()),this.regions.push(g)}else{e=new l.AtlasPage,e.name=f,e.format=l.Atlas.Format[c.readValue()],c.readTuple(d),e.minFilter=l.Atlas.TextureFilter[d[0]],e.magFilter=l.Atlas.TextureFilter[d[1]];var m=c.readValue();e.uWrap=l.Atlas.TextureWrap.clampToEdge,e.vWrap=l.Atlas.TextureWrap.clampToEdge,\"x\"==m?e.uWrap=l.Atlas.TextureWrap.repeat:\"y\"==m?e.vWrap=l.Atlas.TextureWrap.repeat:\"xy\"==m&&(e.uWrap=e.vWrap=l.Atlas.TextureWrap.repeat),b.load(e,f),this.pages.push(e)}}},l.Atlas.prototype={findRegion:function(a){for(var b=this.regions,c=0,d=b.length;d>c;c++)if(b[c].name==a)return b[c];return null},dispose:function(){for(var a=this.pages,b=0,c=a.length;c>b;b++)this.textureLoader.unload(a[b].rendererObject)},updateUVs:function(a){for(var b=this.regions,c=0,d=b.length;d>c;c++){var e=b[c];e.page==a&&(e.u=e.x/a.width,e.v=e.y/a.height,e.rotate?(e.u2=(e.x+e.height)/a.width,e.v2=(e.y+e.width)/a.height):(e.u2=(e.x+e.width)/a.width,e.v2=(e.y+e.height)/a.height))}}},l.Atlas.Format={alpha:0,intensity:1,luminanceAlpha:2,rgb565:3,rgba4444:4,rgb888:5,rgba8888:6},l.Atlas.TextureFilter={nearest:0,linear:1,mipMap:2,mipMapNearestNearest:3,mipMapLinearNearest:4,mipMapNearestLinear:5,mipMapLinearLinear:6},l.Atlas.TextureWrap={mirroredRepeat:0,clampToEdge:1,repeat:2},l.AtlasPage=function(){},l.AtlasPage.prototype={name:null,format:null,minFilter:null,magFilter:null,uWrap:null,vWrap:null,rendererObject:null,width:0,height:0},l.AtlasRegion=function(){},l.AtlasRegion.prototype={page:null,name:null,x:0,y:0,width:0,height:0,u:0,v:0,u2:0,v2:0,offsetX:0,offsetY:0,originalWidth:0,originalHeight:0,index:0,rotate:!1,splits:null,pads:null},l.AtlasReader=function(a){this.lines=a.split(/\\r\\n|\\r|\\n/)},l.AtlasReader.prototype={index:0,trim:function(a){return a.replace(/^\\s+|\\s+$/g,\"\")},readLine:function(){return this.index>=this.lines.length?null:this.lines[this.index++]},readValue:function(){var a=this.readLine(),b=a.indexOf(\":\");if(-1==b)throw\"Invalid line: \"+a;return this.trim(a.substring(b+1))},readTuple:function(a){var b=this.readLine(),c=b.indexOf(\":\");if(-1==c)throw\"Invalid line: \"+b;for(var d=0,e=c+1;3>d;d++){var f=b.indexOf(\",\",e);if(-1==f){if(0==d)throw\"Invalid line: \"+b;break}a[d]=this.trim(b.substr(e,f-e)),e=f+1}return a[d]=this.trim(b.substring(e)),d+1}},l.AtlasAttachmentLoader=function(a){this.atlas=a},l.AtlasAttachmentLoader.prototype={newAttachment:function(a,b,c){switch(b){case l.AttachmentType.region:var d=this.atlas.findRegion(c);if(!d)throw\"Region not found in atlas: \"+c+\" (\"+b+\")\";var e=new l.RegionAttachment(c);return e.rendererObject=d,e.setUVs(d.u,d.v,d.u2,d.v2,d.rotate),e.regionOffsetX=d.offsetX,e.regionOffsetY=d.offsetY,e.regionWidth=d.width,e.regionHeight=d.height,e.regionOriginalWidth=d.originalWidth,e.regionOriginalHeight=d.originalHeight,e}throw\"Unknown attachment type: \"+b}},f.AnimCache={},l.Bone.yDown=!0,f.CustomRenderable=function(){f.DisplayObject.call(this)},f.CustomRenderable.prototype=Object.create(f.DisplayObject.prototype),f.CustomRenderable.prototype.constructor=f.CustomRenderable,f.CustomRenderable.prototype.renderCanvas=function(){},f.CustomRenderable.prototype.initWebGL=function(){},f.CustomRenderable.prototype.renderWebGL=function(){},f.BaseTextureCache={},f.texturesToUpdate=[],f.texturesToDestroy=[],f.BaseTexture=function(a){if(f.EventTarget.call(this),this.width=100,this.height=100,this.hasLoaded=!1,this.source=a,a){if(this.source instanceof Image||this.source instanceof HTMLImageElement)if(this.source.complete)this.hasLoaded=!0,this.width=this.source.width,this.height=this.source.height,f.texturesToUpdate.push(this);else{var b=this;this.source.onload=function(){b.hasLoaded=!0,b.width=b.source.width,b.height=b.source.height,f.texturesToUpdate.push(b),b.dispatchEvent({type:\"loaded\",content:b})}}else this.hasLoaded=!0,this.width=this.source.width,this.height=this.source.height,f.texturesToUpdate.push(this);this._powerOf2=!1}},f.BaseTexture.prototype.constructor=f.BaseTexture,f.BaseTexture.prototype.destroy=function(){this.source instanceof Image&&(this.source.src=null),this.source=null,f.texturesToDestroy.push(this)},f.BaseTexture.fromImage=function(a,b){var c=f.BaseTextureCache[a];if(!c){var d=new Image;b&&(d.crossOrigin=\"\"),d.src=a,c=new f.BaseTexture(d),f.BaseTextureCache[a]=c}return c},f.TextureCache={},f.FrameCache={},f.Texture=function(a,b){if(f.EventTarget.call(this),b||(this.noFrame=!0,b=new f.Rectangle(0,0,1,1)),a instanceof f.Texture&&(a=a.baseTexture),this.baseTexture=a,this.frame=b,this.trim=new f.Point,this.scope=this,a.hasLoaded)this.noFrame&&(b=new f.Rectangle(0,0,a.width,a.height)),this.setFrame(b);else{var c=this;a.addEventListener(\"loaded\",function(){c.onBaseTextureLoaded()})}},f.Texture.prototype.constructor=f.Texture,f.Texture.prototype.onBaseTextureLoaded=function(){var a=this.baseTexture;a.removeEventListener(\"loaded\",this.onLoaded),this.noFrame&&(this.frame=new f.Rectangle(0,0,a.width,a.height)),this.noFrame=!1,this.width=this.frame.width,this.height=this.frame.height,this.scope.dispatchEvent({type:\"update\",content:this})},f.Texture.prototype.destroy=function(a){a&&this.baseTexture.destroy()},f.Texture.prototype.setFrame=function(a){if(this.frame=a,this.width=a.width,this.height=a.height,a.x+a.width>this.baseTexture.width||a.y+a.height>this.baseTexture.height)throw new Error(\"Texture Error: frame does not fit inside the base Texture dimensions \"+this);this.updateFrame=!0,f.Texture.frameUpdates.push(this)},f.Texture.fromImage=function(a,b){var c=f.TextureCache[a];return c||(c=new f.Texture(f.BaseTexture.fromImage(a,b)),f.TextureCache[a]=c),c},f.Texture.fromFrame=function(a){var b=f.TextureCache[a];if(!b)throw new Error(\"The frameId '\"+a+\"' does not exist in the texture cache \"+this);return b},f.Texture.fromCanvas=function(a){var b=new f.BaseTexture(a);return new f.Texture(b)},f.Texture.addTextureToCache=function(a,b){f.TextureCache[b]=a},f.Texture.removeTextureFromCache=function(a){var b=f.TextureCache[a];return f.TextureCache[a]=null,b},f.Texture.frameUpdates=[],f.RenderTexture=function(a,b){f.EventTarget.call(this),this.width=a||100,this.height=b||100,this.indetityMatrix=f.mat3.create(),this.frame=new f.Rectangle(0,0,this.width,this.height),f.gl?this.initWebGL():this.initCanvas()},f.RenderTexture.prototype=Object.create(f.Texture.prototype),f.RenderTexture.prototype.constructor=f.RenderTexture,f.RenderTexture.prototype.initWebGL=function(){var a=f.gl;this.glFramebuffer=a.createFramebuffer(),a.bindFramebuffer(a.FRAMEBUFFER,this.glFramebuffer),this.glFramebuffer.width=this.width,this.glFramebuffer.height=this.height,this.baseTexture=new f.BaseTexture,this.baseTexture.width=this.width,this.baseTexture.height=this.height,this.baseTexture._glTexture=a.createTexture(),a.bindTexture(a.TEXTURE_2D,this.baseTexture._glTexture),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.width,this.height,0,a.RGBA,a.UNSIGNED_BYTE,null),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),this.baseTexture.isRender=!0,a.bindFramebuffer(a.FRAMEBUFFER,this.glFramebuffer),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,this.baseTexture._glTexture,0),this.projection=new f.Point(this.width/2,this.height/2),this.render=this.renderWebGL\n},f.RenderTexture.prototype.resize=function(a,b){if(this.width=a,this.height=b,f.gl){this.projection.x=this.width/2,this.projection.y=this.height/2;var c=f.gl;c.bindTexture(c.TEXTURE_2D,this.baseTexture._glTexture),c.texImage2D(c.TEXTURE_2D,0,c.RGBA,this.width,this.height,0,c.RGBA,c.UNSIGNED_BYTE,null)}else this.frame.width=this.width,this.frame.height=this.height,this.renderer.resize(this.width,this.height)},f.RenderTexture.prototype.initCanvas=function(){this.renderer=new f.CanvasRenderer(this.width,this.height,null,0),this.baseTexture=new f.BaseTexture(this.renderer.view),this.frame=new f.Rectangle(0,0,this.width,this.height),this.render=this.renderCanvas},f.RenderTexture.prototype.renderWebGL=function(a,b,c){var d=f.gl;d.colorMask(!0,!0,!0,!0),d.viewport(0,0,this.width,this.height),d.bindFramebuffer(d.FRAMEBUFFER,this.glFramebuffer),c&&(d.clearColor(0,0,0,0),d.clear(d.COLOR_BUFFER_BIT));var e=a.children,g=a.worldTransform;a.worldTransform=f.mat3.create(),a.worldTransform[4]=-1,a.worldTransform[5]=2*this.projection.y,b&&(a.worldTransform[2]=b.x,a.worldTransform[5]-=b.y),f.visibleCount++,a.vcount=f.visibleCount;for(var h=0,i=e.length;i>h;h++)e[h].updateTransform();var j=a.__renderGroup;j?a==j.root?j.render(this.projection):j.renderSpecific(a,this.projection):(this.renderGroup||(this.renderGroup=new f.WebGLRenderGroup(d)),this.renderGroup.setRenderable(a),this.renderGroup.render(this.projection)),a.worldTransform=g},f.RenderTexture.prototype.renderCanvas=function(a,b,c){var d=a.children;a.worldTransform=f.mat3.create(),b&&(a.worldTransform[2]=b.x,a.worldTransform[5]=b.y);for(var e=0,g=d.length;g>e;e++)d[e].updateTransform();c&&this.renderer.context.clearRect(0,0,this.width,this.height),this.renderer.renderDisplayObject(a),this.renderer.context.setTransform(1,0,0,1,0,0)},f.AssetLoader=function(a,b){f.EventTarget.call(this),this.assetURLs=a,this.crossorigin=b,this.loadersByType={jpg:f.ImageLoader,jpeg:f.ImageLoader,png:f.ImageLoader,gif:f.ImageLoader,json:f.JsonLoader,anim:f.SpineLoader,xml:f.BitmapFontLoader,fnt:f.BitmapFontLoader}},f.AssetLoader.prototype.constructor=f.AssetLoader,f.AssetLoader.prototype.load=function(){var a=this;this.loadCount=this.assetURLs.length;for(var b=0;b<this.assetURLs.length;b++){var c=this.assetURLs[b],d=c.split(\".\").pop().toLowerCase(),e=this.loadersByType[d];if(!e)throw new Error(d+\" is an unsupported file type\");var f=new e(c,this.crossorigin);f.addEventListener(\"loaded\",function(){a.onAssetLoaded()}),f.load()}},f.AssetLoader.prototype.onAssetLoaded=function(){this.loadCount--,this.dispatchEvent({type:\"onProgress\",content:this}),this.onProgress&&this.onProgress(),0==this.loadCount&&(this.dispatchEvent({type:\"onComplete\",content:this}),this.onComplete&&this.onComplete())},f.JsonLoader=function(a,b){f.EventTarget.call(this),this.url=a,this.crossorigin=b,this.baseUrl=a.replace(/[^\\/]*$/,\"\"),this.loaded=!1},f.JsonLoader.prototype.constructor=f.JsonLoader,f.JsonLoader.prototype.load=function(){this.ajaxRequest=new k;var a=this;this.ajaxRequest.onreadystatechange=function(){a.onJSONLoaded()},this.ajaxRequest.open(\"GET\",this.url,!0),this.ajaxRequest.overrideMimeType&&this.ajaxRequest.overrideMimeType(\"application/json\"),this.ajaxRequest.send(null)},f.JsonLoader.prototype.onJSONLoaded=function(){if(4==this.ajaxRequest.readyState)if(200==this.ajaxRequest.status||-1==window.location.href.indexOf(\"http\"))if(this.json=JSON.parse(this.ajaxRequest.responseText),this.json.frames){var a=this,b=this.baseUrl+this.json.meta.image,c=new f.ImageLoader(b,this.crossorigin),d=this.json.frames;this.texture=c.texture.baseTexture,c.addEventListener(\"loaded\",function(){a.onLoaded()});for(var e in d){var g=d[e].frame;g&&(f.TextureCache[e]=new f.Texture(this.texture,{x:g.x,y:g.y,width:g.w,height:g.h}),d[e].trimmed&&(f.TextureCache[e].realSize=d[e].spriteSourceSize,f.TextureCache[e].trim.x=0))}c.load()}else if(this.json.bones){var h=new l.SkeletonJson,i=h.readSkeletonData(this.json);f.AnimCache[this.url]=i,this.onLoaded()}else this.onLoaded();else this.onError()},f.JsonLoader.prototype.onLoaded=function(){this.loaded=!0,this.dispatchEvent({type:\"loaded\",content:this})},f.JsonLoader.prototype.onError=function(){this.dispatchEvent({type:\"error\",content:this})},f.SpriteSheetLoader=function(a,b){f.EventTarget.call(this),this.url=a,this.crossorigin=b,this.baseUrl=a.replace(/[^\\/]*$/,\"\"),this.texture=null,this.frames={}},f.SpriteSheetLoader.prototype.constructor=f.SpriteSheetLoader,f.SpriteSheetLoader.prototype.load=function(){var a=this,b=new f.JsonLoader(this.url,this.crossorigin);b.addEventListener(\"loaded\",function(b){a.json=b.content.json,a.onJSONLoaded()}),b.load()},f.SpriteSheetLoader.prototype.onJSONLoaded=function(){var a=this,b=this.baseUrl+this.json.meta.image,c=new f.ImageLoader(b,this.crossorigin),d=this.json.frames;this.texture=c.texture.baseTexture,c.addEventListener(\"loaded\",function(){a.onLoaded()});for(var e in d){var g=d[e].frame;g&&(f.TextureCache[e]=new f.Texture(this.texture,{x:g.x,y:g.y,width:g.w,height:g.h}),d[e].trimmed&&(f.TextureCache[e].realSize=d[e].spriteSourceSize,f.TextureCache[e].trim.x=0))}c.load()},f.SpriteSheetLoader.prototype.onLoaded=function(){this.dispatchEvent({type:\"loaded\",content:this})},f.ImageLoader=function(a,b){f.EventTarget.call(this),this.texture=f.Texture.fromImage(a,b)},f.ImageLoader.prototype.constructor=f.ImageLoader,f.ImageLoader.prototype.load=function(){if(this.texture.baseTexture.hasLoaded)this.onLoaded();else{var a=this;this.texture.baseTexture.addEventListener(\"loaded\",function(){a.onLoaded()})}},f.ImageLoader.prototype.onLoaded=function(){this.dispatchEvent({type:\"loaded\",content:this})},f.BitmapFontLoader=function(a,b){f.EventTarget.call(this),this.url=a,this.crossorigin=b,this.baseUrl=a.replace(/[^\\/]*$/,\"\"),this.texture=null},f.BitmapFontLoader.prototype.constructor=f.BitmapFontLoader,f.BitmapFontLoader.prototype.load=function(){this.ajaxRequest=new XMLHttpRequest;var a=this;this.ajaxRequest.onreadystatechange=function(){a.onXMLLoaded()},this.ajaxRequest.open(\"GET\",this.url,!0),this.ajaxRequest.overrideMimeType&&this.ajaxRequest.overrideMimeType(\"application/xml\"),this.ajaxRequest.send(null)},f.BitmapFontLoader.prototype.onXMLLoaded=function(){if(4==this.ajaxRequest.readyState&&(200==this.ajaxRequest.status||-1==window.location.href.indexOf(\"http\"))){var a=this.baseUrl+this.ajaxRequest.responseXML.getElementsByTagName(\"page\")[0].attributes.getNamedItem(\"file\").nodeValue,b=new f.ImageLoader(a,this.crossorigin);this.texture=b.texture.baseTexture;var c={},d=this.ajaxRequest.responseXML.getElementsByTagName(\"info\")[0],e=this.ajaxRequest.responseXML.getElementsByTagName(\"common\")[0];c.font=d.attributes.getNamedItem(\"face\").nodeValue,c.size=parseInt(d.attributes.getNamedItem(\"size\").nodeValue,10),c.lineHeight=parseInt(e.attributes.getNamedItem(\"lineHeight\").nodeValue,10),c.chars={};for(var g=this.ajaxRequest.responseXML.getElementsByTagName(\"char\"),h=0;h<g.length;h++){var i=parseInt(g[h].attributes.getNamedItem(\"id\").nodeValue,10),j={x:parseInt(g[h].attributes.getNamedItem(\"x\").nodeValue,10),y:parseInt(g[h].attributes.getNamedItem(\"y\").nodeValue,10),width:parseInt(g[h].attributes.getNamedItem(\"width\").nodeValue,10),height:parseInt(g[h].attributes.getNamedItem(\"height\").nodeValue,10)};f.TextureCache[i]=new f.Texture(this.texture,j),c.chars[i]={xOffset:parseInt(g[h].attributes.getNamedItem(\"xoffset\").nodeValue,10),yOffset:parseInt(g[h].attributes.getNamedItem(\"yoffset\").nodeValue,10),xAdvance:parseInt(g[h].attributes.getNamedItem(\"xadvance\").nodeValue,10),kerning:{},texture:new f.Texture(this.texture,j)}}var k=this.ajaxRequest.responseXML.getElementsByTagName(\"kerning\");for(h=0;h<k.length;h++){var l=parseInt(k[h].attributes.getNamedItem(\"first\").nodeValue,10),m=parseInt(k[h].attributes.getNamedItem(\"second\").nodeValue,10),n=parseInt(k[h].attributes.getNamedItem(\"amount\").nodeValue,10);c.chars[m].kerning[l]=n}f.BitmapText.fonts[c.font]=c;var o=this;b.addEventListener(\"loaded\",function(){o.onLoaded()}),b.load()}},f.BitmapFontLoader.prototype.onLoaded=function(){this.dispatchEvent({type:\"loaded\",content:this})},f.SpineLoader=function(a,b){f.EventTarget.call(this),this.url=a,this.crossorigin=b,this.loaded=!1},f.SpineLoader.prototype.constructor=f.SpineLoader,f.SpineLoader.prototype.load=function(){var a=this,b=new f.JsonLoader(this.url,this.crossorigin);b.addEventListener(\"loaded\",function(b){a.json=b.content.json,a.onJSONLoaded()}),b.load()},f.SpineLoader.prototype.onJSONLoaded=function(){var a=new l.SkeletonJson,b=a.readSkeletonData(this.json);f.AnimCache[this.url]=b,this.onLoaded()},f.SpineLoader.prototype.onLoaded=function(){this.loaded=!0,this.dispatchEvent({type:\"loaded\",content:this})},\"undefined\"!=typeof exports?(\"undefined\"!=typeof module&&module.exports&&(exports=module.exports=f),exports.PIXI=f):e.PIXI=f}.call(this);","/**\n * @author mrdoob / http://mrdoob.com/\n * @author Larry Battle / http://bateru.com/news\n * @author bhouston / http://exocortex.com\n */\n\nvar THREE = { REVISION: '62' };\n\nself.console = self.console || {\n\n    info: function () {},\n    log: function () {},\n    debug: function () {},\n    warn: function () {},\n    error: function () {}\n\n};\n\nString.prototype.trim = String.prototype.trim || function () {\n\n    return this.replace( /^\\s+|\\s+$/g, '' );\n\n};\n\n// based on https://github.com/documentcloud/underscore/blob/bf657be243a075b5e72acc8a83e6f12a564d8f55/underscore.js#L767\nTHREE.extend = function ( obj, source ) {\n\n    // ECMAScript5 compatibility based on: http://www.nczonline.net/blog/2012/12/11/are-your-mixins-ecmascript-5-compatible/\n    if ( Object.keys ) {\n\n        var keys = Object.keys( source );\n\n        for (var i = 0, il = keys.length; i < il; i++) {\n\n            var prop = keys[i];\n            Object.defineProperty( obj, prop, Object.getOwnPropertyDescriptor( source, prop ) );\n\n        }\n\n    } else {\n\n        var safeHasOwnProperty = {}.hasOwnProperty;\n\n        for ( var prop in source ) {\n\n            if ( safeHasOwnProperty.call( source, prop ) ) {\n\n                obj[prop] = source[prop];\n\n            }\n\n        }\n\n    }\n\n    return obj;\n\n};\n\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n// requestAnimationFrame polyfill by Erik Möller\n// fixes from Paul Irish and Tino Zijdel\n// using 'self' instead of 'window' for compatibility with both NodeJS and IE10.\n( function () {\n\n    var lastTime = 0;\n    var vendors = [ 'ms', 'moz', 'webkit', 'o' ];\n\n    for ( var x = 0; x < vendors.length && !self.requestAnimationFrame; ++ x ) {\n\n        self.requestAnimationFrame = self[ vendors[ x ] + 'RequestAnimationFrame' ];\n        self.cancelAnimationFrame = self[ vendors[ x ] + 'CancelAnimationFrame' ] || self[ vendors[ x ] + 'CancelRequestAnimationFrame' ];\n\n    }\n\n    if ( self.requestAnimationFrame === undefined && self['setTimeout'] !== undefined ) {\n\n        self.requestAnimationFrame = function ( callback ) {\n\n            var currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );\n            var id = self.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\n            lastTime = currTime + timeToCall;\n            return id;\n\n        };\n\n    }\n\n    if( self.cancelAnimationFrame === undefined && self['clearTimeout'] !== undefined ) {\n\n        self.cancelAnimationFrame = function ( id ) { self.clearTimeout( id ) };\n\n    }\n\n}() );\n\n// GL STATE CONSTANTS\n\nTHREE.CullFaceNone = 0;\nTHREE.CullFaceBack = 1;\nTHREE.CullFaceFront = 2;\nTHREE.CullFaceFrontBack = 3;\n\nTHREE.FrontFaceDirectionCW = 0;\nTHREE.FrontFaceDirectionCCW = 1;\n\n// SHADOWING TYPES\n\nTHREE.BasicShadowMap = 0;\nTHREE.PCFShadowMap = 1;\nTHREE.PCFSoftShadowMap = 2;\n\n// MATERIAL CONSTANTS\n\n// side\n\nTHREE.FrontSide = 0;\nTHREE.BackSide = 1;\nTHREE.DoubleSide = 2;\n\n// shading\n\nTHREE.NoShading = 0;\nTHREE.FlatShading = 1;\nTHREE.SmoothShading = 2;\n\n// colors\n\nTHREE.NoColors = 0;\nTHREE.FaceColors = 1;\nTHREE.VertexColors = 2;\n\n// blending modes\n\nTHREE.NoBlending = 0;\nTHREE.NormalBlending = 1;\nTHREE.AdditiveBlending = 2;\nTHREE.SubtractiveBlending = 3;\nTHREE.MultiplyBlending = 4;\nTHREE.CustomBlending = 5;\n\n// custom blending equations\n// (numbers start from 100 not to clash with other\n//  mappings to OpenGL constants defined in Texture.js)\n\nTHREE.AddEquation = 100;\nTHREE.SubtractEquation = 101;\nTHREE.ReverseSubtractEquation = 102;\n\n// custom blending destination factors\n\nTHREE.ZeroFactor = 200;\nTHREE.OneFactor = 201;\nTHREE.SrcColorFactor = 202;\nTHREE.OneMinusSrcColorFactor = 203;\nTHREE.SrcAlphaFactor = 204;\nTHREE.OneMinusSrcAlphaFactor = 205;\nTHREE.DstAlphaFactor = 206;\nTHREE.OneMinusDstAlphaFactor = 207;\n\n// custom blending source factors\n\n//THREE.ZeroFactor = 200;\n//THREE.OneFactor = 201;\n//THREE.SrcAlphaFactor = 204;\n//THREE.OneMinusSrcAlphaFactor = 205;\n//THREE.DstAlphaFactor = 206;\n//THREE.OneMinusDstAlphaFactor = 207;\nTHREE.DstColorFactor = 208;\nTHREE.OneMinusDstColorFactor = 209;\nTHREE.SrcAlphaSaturateFactor = 210;\n\n\n// TEXTURE CONSTANTS\n\nTHREE.MultiplyOperation = 0;\nTHREE.MixOperation = 1;\nTHREE.AddOperation = 2;\n\n// Mapping modes\n\nTHREE.UVMapping = function () {};\n\nTHREE.CubeReflectionMapping = function () {};\nTHREE.CubeRefractionMapping = function () {};\n\nTHREE.SphericalReflectionMapping = function () {};\nTHREE.SphericalRefractionMapping = function () {};\n\n// Wrapping modes\n\nTHREE.RepeatWrapping = 1000;\nTHREE.ClampToEdgeWrapping = 1001;\nTHREE.MirroredRepeatWrapping = 1002;\n\n// Filters\n\nTHREE.NearestFilter = 1003;\nTHREE.NearestMipMapNearestFilter = 1004;\nTHREE.NearestMipMapLinearFilter = 1005;\nTHREE.LinearFilter = 1006;\nTHREE.LinearMipMapNearestFilter = 1007;\nTHREE.LinearMipMapLinearFilter = 1008;\n\n// Data types\n\nTHREE.UnsignedByteType = 1009;\nTHREE.ByteType = 1010;\nTHREE.ShortType = 1011;\nTHREE.UnsignedShortType = 1012;\nTHREE.IntType = 1013;\nTHREE.UnsignedIntType = 1014;\nTHREE.FloatType = 1015;\n\n// Pixel types\n\n//THREE.UnsignedByteType = 1009;\nTHREE.UnsignedShort4444Type = 1016;\nTHREE.UnsignedShort5551Type = 1017;\nTHREE.UnsignedShort565Type = 1018;\n\n// Pixel formats\n\nTHREE.AlphaFormat = 1019;\nTHREE.RGBFormat = 1020;\nTHREE.RGBAFormat = 1021;\nTHREE.LuminanceFormat = 1022;\nTHREE.LuminanceAlphaFormat = 1023;\n\n// Compressed texture formats\n\nTHREE.RGB_S3TC_DXT1_Format = 2001;\nTHREE.RGBA_S3TC_DXT1_Format = 2002;\nTHREE.RGBA_S3TC_DXT3_Format = 2003;\nTHREE.RGBA_S3TC_DXT5_Format = 2004;\n\n/*\n // Potential future PVRTC compressed texture formats\n THREE.RGB_PVRTC_4BPPV1_Format = 2100;\n THREE.RGB_PVRTC_2BPPV1_Format = 2101;\n THREE.RGBA_PVRTC_4BPPV1_Format = 2102;\n THREE.RGBA_PVRTC_2BPPV1_Format = 2103;\n */\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Color = function ( value ) {\n\n    if ( value !== undefined ) this.set( value );\n\n    return this;\n\n};\n\nTHREE.Color.prototype = {\n\n    constructor: THREE.Color,\n\n    r: 1, g: 1, b: 1,\n\n    set: function ( value ) {\n\n        if ( value instanceof THREE.Color ) {\n\n            this.copy( value );\n\n        } else if ( typeof value === 'number' ) {\n\n            this.setHex( value );\n\n        } else if ( typeof value === 'string' ) {\n\n            this.setStyle( value );\n\n        }\n\n        return this;\n\n    },\n\n    setHex: function ( hex ) {\n\n        hex = Math.floor( hex );\n\n        this.r = ( hex >> 16 & 255 ) / 255;\n        this.g = ( hex >> 8 & 255 ) / 255;\n        this.b = ( hex & 255 ) / 255;\n\n        return this;\n\n    },\n\n    setRGB: function ( r, g, b ) {\n\n        this.r = r;\n        this.g = g;\n        this.b = b;\n\n        return this;\n\n    },\n\n    setHSL: function ( h, s, l ) {\n\n        // h,s,l ranges are in 0.0 - 1.0\n\n        if ( s === 0 ) {\n\n            this.r = this.g = this.b = l;\n\n        } else {\n\n            var hue2rgb = function ( p, q, t ) {\n\n                if ( t < 0 ) t += 1;\n                if ( t > 1 ) t -= 1;\n                if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n                if ( t < 1 / 2 ) return q;\n                if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n                return p;\n\n            };\n\n            var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n            var q = ( 2 * l ) - p;\n\n            this.r = hue2rgb( q, p, h + 1 / 3 );\n            this.g = hue2rgb( q, p, h );\n            this.b = hue2rgb( q, p, h - 1 / 3 );\n\n        }\n\n        return this;\n\n    },\n\n    setStyle: function ( style ) {\n\n        // rgb(255,0,0)\n\n        if ( /^rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)$/i.test( style ) ) {\n\n            var color = /^rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)$/i.exec( style );\n\n            this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n            this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n            this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n            return this;\n\n        }\n\n        // rgb(100%,0%,0%)\n\n        if ( /^rgb\\((\\d+)\\%, ?(\\d+)\\%, ?(\\d+)\\%\\)$/i.test( style ) ) {\n\n            var color = /^rgb\\((\\d+)\\%, ?(\\d+)\\%, ?(\\d+)\\%\\)$/i.exec( style );\n\n            this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n            this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n            this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n            return this;\n\n        }\n\n        // #ff0000\n\n        if ( /^\\#([0-9a-f]{6})$/i.test( style ) ) {\n\n            var color = /^\\#([0-9a-f]{6})$/i.exec( style );\n\n            this.setHex( parseInt( color[ 1 ], 16 ) );\n\n            return this;\n\n        }\n\n        // #f00\n\n        if ( /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {\n\n            var color = /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );\n\n            this.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );\n\n            return this;\n\n        }\n\n        // red\n\n        if ( /^(\\w+)$/i.test( style ) ) {\n\n            this.setHex( THREE.ColorKeywords[ style ] );\n\n            return this;\n\n        }\n\n\n    },\n\n    copy: function ( color ) {\n\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n\n        return this;\n\n    },\n\n    copyGammaToLinear: function ( color ) {\n\n        this.r = color.r * color.r;\n        this.g = color.g * color.g;\n        this.b = color.b * color.b;\n\n        return this;\n\n    },\n\n    copyLinearToGamma: function ( color ) {\n\n        this.r = Math.sqrt( color.r );\n        this.g = Math.sqrt( color.g );\n        this.b = Math.sqrt( color.b );\n\n        return this;\n\n    },\n\n    convertGammaToLinear: function () {\n\n        var r = this.r, g = this.g, b = this.b;\n\n        this.r = r * r;\n        this.g = g * g;\n        this.b = b * b;\n\n        return this;\n\n    },\n\n    convertLinearToGamma: function () {\n\n        this.r = Math.sqrt( this.r );\n        this.g = Math.sqrt( this.g );\n        this.b = Math.sqrt( this.b );\n\n        return this;\n\n    },\n\n    getHex: function () {\n\n        return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n    },\n\n    getHexString: function () {\n\n        return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n    },\n\n    getHSL: function () {\n\n        var hsl = { h: 0, s: 0, l: 0 };\n\n        return function () {\n\n            // h,s,l ranges are in 0.0 - 1.0\n\n            var r = this.r, g = this.g, b = this.b;\n\n            var max = Math.max( r, g, b );\n            var min = Math.min( r, g, b );\n\n            var hue, saturation;\n            var lightness = ( min + max ) / 2.0;\n\n            if ( min === max ) {\n\n                hue = 0;\n                saturation = 0;\n\n            } else {\n\n                var delta = max - min;\n\n                saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n                switch ( max ) {\n\n                    case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n                    case g: hue = ( b - r ) / delta + 2; break;\n                    case b: hue = ( r - g ) / delta + 4; break;\n\n                }\n\n                hue /= 6;\n\n            }\n\n            hsl.h = hue;\n            hsl.s = saturation;\n            hsl.l = lightness;\n\n            return hsl;\n\n        };\n\n    }(),\n\n    getStyle: function () {\n\n        return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n    },\n\n    offsetHSL: function ( h, s, l ) {\n\n        var hsl = this.getHSL();\n\n        hsl.h += h; hsl.s += s; hsl.l += l;\n\n        this.setHSL( hsl.h, hsl.s, hsl.l );\n\n        return this;\n\n    },\n\n    add: function ( color ) {\n\n        this.r += color.r;\n        this.g += color.g;\n        this.b += color.b;\n\n        return this;\n\n    },\n\n    addColors: function ( color1, color2 ) {\n\n        this.r = color1.r + color2.r;\n        this.g = color1.g + color2.g;\n        this.b = color1.b + color2.b;\n\n        return this;\n\n    },\n\n    addScalar: function ( s ) {\n\n        this.r += s;\n        this.g += s;\n        this.b += s;\n\n        return this;\n\n    },\n\n    multiply: function ( color ) {\n\n        this.r *= color.r;\n        this.g *= color.g;\n        this.b *= color.b;\n\n        return this;\n\n    },\n\n    multiplyScalar: function ( s ) {\n\n        this.r *= s;\n        this.g *= s;\n        this.b *= s;\n\n        return this;\n\n    },\n\n    lerp: function ( color, alpha ) {\n\n        this.r += ( color.r - this.r ) * alpha;\n        this.g += ( color.g - this.g ) * alpha;\n        this.b += ( color.b - this.b ) * alpha;\n\n        return this;\n\n    },\n\n    equals: function ( c ) {\n\n        return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n    },\n\n    fromArray: function ( array ) {\n\n        this.r = array[ 0 ];\n        this.g = array[ 1 ];\n        this.b = array[ 2 ];\n\n        return this;\n\n    },\n\n    toArray: function () {\n\n        return [ this.r, this.g, this.b ];\n\n    },\n\n    clone: function () {\n\n        return new THREE.Color().setRGB( this.r, this.g, this.b );\n\n    }\n\n};\n\nTHREE.ColorKeywords = { \"aliceblue\": 0xF0F8FF, \"antiquewhite\": 0xFAEBD7, \"aqua\": 0x00FFFF, \"aquamarine\": 0x7FFFD4, \"azure\": 0xF0FFFF,\n    \"beige\": 0xF5F5DC, \"bisque\": 0xFFE4C4, \"black\": 0x000000, \"blanchedalmond\": 0xFFEBCD, \"blue\": 0x0000FF, \"blueviolet\": 0x8A2BE2,\n    \"brown\": 0xA52A2A, \"burlywood\": 0xDEB887, \"cadetblue\": 0x5F9EA0, \"chartreuse\": 0x7FFF00, \"chocolate\": 0xD2691E, \"coral\": 0xFF7F50,\n    \"cornflowerblue\": 0x6495ED, \"cornsilk\": 0xFFF8DC, \"crimson\": 0xDC143C, \"cyan\": 0x00FFFF, \"darkblue\": 0x00008B, \"darkcyan\": 0x008B8B,\n    \"darkgoldenrod\": 0xB8860B, \"darkgray\": 0xA9A9A9, \"darkgreen\": 0x006400, \"darkgrey\": 0xA9A9A9, \"darkkhaki\": 0xBDB76B, \"darkmagenta\": 0x8B008B,\n    \"darkolivegreen\": 0x556B2F, \"darkorange\": 0xFF8C00, \"darkorchid\": 0x9932CC, \"darkred\": 0x8B0000, \"darksalmon\": 0xE9967A, \"darkseagreen\": 0x8FBC8F,\n    \"darkslateblue\": 0x483D8B, \"darkslategray\": 0x2F4F4F, \"darkslategrey\": 0x2F4F4F, \"darkturquoise\": 0x00CED1, \"darkviolet\": 0x9400D3,\n    \"deeppink\": 0xFF1493, \"deepskyblue\": 0x00BFFF, \"dimgray\": 0x696969, \"dimgrey\": 0x696969, \"dodgerblue\": 0x1E90FF, \"firebrick\": 0xB22222,\n    \"floralwhite\": 0xFFFAF0, \"forestgreen\": 0x228B22, \"fuchsia\": 0xFF00FF, \"gainsboro\": 0xDCDCDC, \"ghostwhite\": 0xF8F8FF, \"gold\": 0xFFD700,\n    \"goldenrod\": 0xDAA520, \"gray\": 0x808080, \"green\": 0x008000, \"greenyellow\": 0xADFF2F, \"grey\": 0x808080, \"honeydew\": 0xF0FFF0, \"hotpink\": 0xFF69B4,\n    \"indianred\": 0xCD5C5C, \"indigo\": 0x4B0082, \"ivory\": 0xFFFFF0, \"khaki\": 0xF0E68C, \"lavender\": 0xE6E6FA, \"lavenderblush\": 0xFFF0F5, \"lawngreen\": 0x7CFC00,\n    \"lemonchiffon\": 0xFFFACD, \"lightblue\": 0xADD8E6, \"lightcoral\": 0xF08080, \"lightcyan\": 0xE0FFFF, \"lightgoldenrodyellow\": 0xFAFAD2, \"lightgray\": 0xD3D3D3,\n    \"lightgreen\": 0x90EE90, \"lightgrey\": 0xD3D3D3, \"lightpink\": 0xFFB6C1, \"lightsalmon\": 0xFFA07A, \"lightseagreen\": 0x20B2AA, \"lightskyblue\": 0x87CEFA,\n    \"lightslategray\": 0x778899, \"lightslategrey\": 0x778899, \"lightsteelblue\": 0xB0C4DE, \"lightyellow\": 0xFFFFE0, \"lime\": 0x00FF00, \"limegreen\": 0x32CD32,\n    \"linen\": 0xFAF0E6, \"magenta\": 0xFF00FF, \"maroon\": 0x800000, \"mediumaquamarine\": 0x66CDAA, \"mediumblue\": 0x0000CD, \"mediumorchid\": 0xBA55D3,\n    \"mediumpurple\": 0x9370DB, \"mediumseagreen\": 0x3CB371, \"mediumslateblue\": 0x7B68EE, \"mediumspringgreen\": 0x00FA9A, \"mediumturquoise\": 0x48D1CC,\n    \"mediumvioletred\": 0xC71585, \"midnightblue\": 0x191970, \"mintcream\": 0xF5FFFA, \"mistyrose\": 0xFFE4E1, \"moccasin\": 0xFFE4B5, \"navajowhite\": 0xFFDEAD,\n    \"navy\": 0x000080, \"oldlace\": 0xFDF5E6, \"olive\": 0x808000, \"olivedrab\": 0x6B8E23, \"orange\": 0xFFA500, \"orangered\": 0xFF4500, \"orchid\": 0xDA70D6,\n    \"palegoldenrod\": 0xEEE8AA, \"palegreen\": 0x98FB98, \"paleturquoise\": 0xAFEEEE, \"palevioletred\": 0xDB7093, \"papayawhip\": 0xFFEFD5, \"peachpuff\": 0xFFDAB9,\n    \"peru\": 0xCD853F, \"pink\": 0xFFC0CB, \"plum\": 0xDDA0DD, \"powderblue\": 0xB0E0E6, \"purple\": 0x800080, \"red\": 0xFF0000, \"rosybrown\": 0xBC8F8F,\n    \"royalblue\": 0x4169E1, \"saddlebrown\": 0x8B4513, \"salmon\": 0xFA8072, \"sandybrown\": 0xF4A460, \"seagreen\": 0x2E8B57, \"seashell\": 0xFFF5EE,\n    \"sienna\": 0xA0522D, \"silver\": 0xC0C0C0, \"skyblue\": 0x87CEEB, \"slateblue\": 0x6A5ACD, \"slategray\": 0x708090, \"slategrey\": 0x708090, \"snow\": 0xFFFAFA,\n    \"springgreen\": 0x00FF7F, \"steelblue\": 0x4682B4, \"tan\": 0xD2B48C, \"teal\": 0x008080, \"thistle\": 0xD8BFD8, \"tomato\": 0xFF6347, \"turquoise\": 0x40E0D0,\n    \"violet\": 0xEE82EE, \"wheat\": 0xF5DEB3, \"white\": 0xFFFFFF, \"whitesmoke\": 0xF5F5F5, \"yellow\": 0xFFFF00, \"yellowgreen\": 0x9ACD32 };\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Quaternion = function ( x, y, z, w ) {\n\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n    this._w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Quaternion.prototype = {\n\n    constructor: THREE.Quaternion,\n\n    _x: 0,_y: 0, _z: 0, _w: 0,\n\n    _euler: undefined,\n\n    _updateEuler: function ( callback ) {\n\n        if ( this._euler !== undefined ) {\n\n            this._euler.setFromQuaternion( this, undefined, false );\n\n        }\n\n    },\n\n    get x () {\n\n        return this._x;\n\n    },\n\n    set x ( value ) {\n\n        this._x = value;\n        this._updateEuler();\n\n    },\n\n    get y () {\n\n        return this._y;\n\n    },\n\n    set y ( value ) {\n\n        this._y = value;\n        this._updateEuler();\n\n    },\n\n    get z () {\n\n        return this._z;\n\n    },\n\n    set z ( value ) {\n\n        this._z = value;\n        this._updateEuler();\n\n    },\n\n    get w () {\n\n        return this._w;\n\n    },\n\n    set w ( value ) {\n\n        this._w = value;\n        this._updateEuler();\n\n    },\n\n    set: function ( x, y, z, w ) {\n\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n\n        this._updateEuler();\n\n        return this;\n\n    },\n\n    copy: function ( quaternion ) {\n\n        this._x = quaternion._x;\n        this._y = quaternion._y;\n        this._z = quaternion._z;\n        this._w = quaternion._w;\n\n        this._updateEuler();\n\n        return this;\n\n    },\n\n    setFromEuler: function ( euler, update ) {\n\n        if ( euler instanceof THREE.Euler === false ) {\n\n            throw new Error( 'ERROR: Quaternion\\'s .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );\n        }\n\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n\n        var c1 = Math.cos( euler._x / 2 );\n        var c2 = Math.cos( euler._y / 2 );\n        var c3 = Math.cos( euler._z / 2 );\n        var s1 = Math.sin( euler._x / 2 );\n        var s2 = Math.sin( euler._y / 2 );\n        var s3 = Math.sin( euler._z / 2 );\n\n        if ( euler.order === 'XYZ' ) {\n\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if ( euler.order === 'YXZ' ) {\n\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if ( euler.order === 'ZXY' ) {\n\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if ( euler.order === 'ZYX' ) {\n\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if ( euler.order === 'YZX' ) {\n\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if ( euler.order === 'XZY' ) {\n\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n        }\n\n        if ( update !== false ) this._updateEuler();\n\n        return this;\n\n    },\n\n    setFromAxisAngle: function ( axis, angle ) {\n\n        // from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n        // axis have to be normalized\n\n        var halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n        this._x = axis.x * s;\n        this._y = axis.y * s;\n        this._z = axis.z * s;\n        this._w = Math.cos( halfAngle );\n\n        this._updateEuler();\n\n        return this;\n\n    },\n\n    setFromRotationMatrix: function ( m ) {\n\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        var te = m.elements,\n\n            m11 = te[0], m12 = te[4], m13 = te[8],\n            m21 = te[1], m22 = te[5], m23 = te[9],\n            m31 = te[2], m32 = te[6], m33 = te[10],\n\n            trace = m11 + m22 + m33,\n            s;\n\n        if ( trace > 0 ) {\n\n            s = 0.5 / Math.sqrt( trace + 1.0 );\n\n            this._w = 0.25 / s;\n            this._x = ( m32 - m23 ) * s;\n            this._y = ( m13 - m31 ) * s;\n            this._z = ( m21 - m12 ) * s;\n\n        } else if ( m11 > m22 && m11 > m33 ) {\n\n            s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n            this._w = (m32 - m23 ) / s;\n            this._x = 0.25 * s;\n            this._y = (m12 + m21 ) / s;\n            this._z = (m13 + m31 ) / s;\n\n        } else if ( m22 > m33 ) {\n\n            s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n            this._w = (m13 - m31 ) / s;\n            this._x = (m12 + m21 ) / s;\n            this._y = 0.25 * s;\n            this._z = (m23 + m32 ) / s;\n\n        } else {\n\n            s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n            this._w = ( m21 - m12 ) / s;\n            this._x = ( m13 + m31 ) / s;\n            this._y = ( m23 + m32 ) / s;\n            this._z = 0.25 * s;\n\n        }\n\n        this._updateEuler();\n\n        return this;\n\n    },\n\n    inverse: function () {\n\n        this.conjugate().normalize();\n\n        return this;\n\n    },\n\n    conjugate: function () {\n\n        this._x *= -1;\n        this._y *= -1;\n        this._z *= -1;\n\n        this._updateEuler();\n\n        return this;\n\n    },\n\n    lengthSq: function () {\n\n        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n    },\n\n    length: function () {\n\n        return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n    },\n\n    normalize: function () {\n\n        var l = this.length();\n\n        if ( l === 0 ) {\n\n            this._x = 0;\n            this._y = 0;\n            this._z = 0;\n            this._w = 1;\n\n        } else {\n\n            l = 1 / l;\n\n            this._x = this._x * l;\n            this._y = this._y * l;\n            this._z = this._z * l;\n            this._w = this._w * l;\n\n        }\n\n        return this;\n\n    },\n\n    multiply: function ( q, p ) {\n\n        if ( p !== undefined ) {\n\n            console.warn( 'DEPRECATED: Quaternion\\'s .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n            return this.multiplyQuaternions( q, p );\n\n        }\n\n        return this.multiplyQuaternions( this, q );\n\n    },\n\n    multiplyQuaternions: function ( a, b ) {\n\n        // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n        var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n        var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n        this._updateEuler();\n\n        return this;\n\n    },\n\n    multiplyVector3: function ( vector ) {\n\n        console.warn( 'DEPRECATED: Quaternion\\'s .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n        return vector.applyQuaternion( this );\n\n    },\n\n    slerp: function ( qb, t ) {\n\n        var x = this._x, y = this._y, z = this._z, w = this._w;\n\n        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n        var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n        if ( cosHalfTheta < 0 ) {\n\n            this._w = -qb._w;\n            this._x = -qb._x;\n            this._y = -qb._y;\n            this._z = -qb._z;\n\n            cosHalfTheta = -cosHalfTheta;\n\n        } else {\n\n            this.copy( qb );\n\n        }\n\n        if ( cosHalfTheta >= 1.0 ) {\n\n            this._w = w;\n            this._x = x;\n            this._y = y;\n            this._z = z;\n\n            return this;\n\n        }\n\n        var halfTheta = Math.acos( cosHalfTheta );\n        var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n        if ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n            this._w = 0.5 * ( w + this._w );\n            this._x = 0.5 * ( x + this._x );\n            this._y = 0.5 * ( y + this._y );\n            this._z = 0.5 * ( z + this._z );\n\n            return this;\n\n        }\n\n        var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n            ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n        this._w = ( w * ratioA + this._w * ratioB );\n        this._x = ( x * ratioA + this._x * ratioB );\n        this._y = ( y * ratioA + this._y * ratioB );\n        this._z = ( z * ratioA + this._z * ratioB );\n\n        this._updateEuler();\n\n        return this;\n\n    },\n\n    equals: function ( quaternion ) {\n\n        return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n    },\n\n    fromArray: function ( array ) {\n\n        this._x = array[ 0 ];\n        this._y = array[ 1 ];\n        this._z = array[ 2 ];\n        this._w = array[ 3 ];\n\n        this._updateEuler();\n\n        return this;\n\n    },\n\n    toArray: function () {\n\n        return [ this._x, this._y, this._z, this._w ];\n\n    },\n\n    clone: function () {\n\n        return new THREE.Quaternion( this._x, this._y, this._z, this._w );\n\n    }\n\n};\n\nTHREE.Quaternion.slerp = function ( qa, qb, qm, t ) {\n\n    return qm.copy( qa ).slerp( qb, t );\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.Vector2 = function ( x, y ) {\n\n    this.x = x || 0;\n    this.y = y || 0;\n\n};\n\nTHREE.Vector2.prototype = {\n\n    constructor: THREE.Vector2,\n\n    set: function ( x, y ) {\n\n        this.x = x;\n        this.y = y;\n\n        return this;\n\n    },\n\n    setX: function ( x ) {\n\n        this.x = x;\n\n        return this;\n\n    },\n\n    setY: function ( y ) {\n\n        this.y = y;\n\n        return this;\n\n    },\n\n\n    setComponent: function ( index, value ) {\n\n        switch ( index ) {\n\n            case 0: this.x = value; break;\n            case 1: this.y = value; break;\n            default: throw new Error( \"index is out of range: \" + index );\n\n        }\n\n    },\n\n    getComponent: function ( index ) {\n\n        switch ( index ) {\n\n            case 0: return this.x;\n            case 1: return this.y;\n            default: throw new Error( \"index is out of range: \" + index );\n\n        }\n\n    },\n\n    copy: function ( v ) {\n\n        this.x = v.x;\n        this.y = v.y;\n\n        return this;\n\n    },\n\n    add: function ( v, w ) {\n\n        if ( w !== undefined ) {\n\n            console.warn( 'DEPRECATED: Vector2\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n            return this.addVectors( v, w );\n\n        }\n\n        this.x += v.x;\n        this.y += v.y;\n\n        return this;\n\n    },\n\n    addVectors: function ( a, b ) {\n\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n\n        return this;\n\n    },\n\n    addScalar: function ( s ) {\n\n        this.x += s;\n        this.y += s;\n\n        return this;\n\n    },\n\n    sub: function ( v, w ) {\n\n        if ( w !== undefined ) {\n\n            console.warn( 'DEPRECATED: Vector2\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n            return this.subVectors( v, w );\n\n        }\n\n        this.x -= v.x;\n        this.y -= v.y;\n\n        return this;\n\n    },\n\n    subVectors: function ( a, b ) {\n\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n\n        return this;\n\n    },\n\n    multiplyScalar: function ( s ) {\n\n        this.x *= s;\n        this.y *= s;\n\n        return this;\n\n    },\n\n    divideScalar: function ( scalar ) {\n\n        if ( scalar !== 0 ) {\n\n            var invScalar = 1 / scalar;\n\n            this.x *= invScalar;\n            this.y *= invScalar;\n\n        } else {\n\n            this.x = 0;\n            this.y = 0;\n\n        }\n\n        return this;\n\n    },\n\n    min: function ( v ) {\n\n        if ( this.x > v.x ) {\n\n            this.x = v.x;\n\n        }\n\n        if ( this.y > v.y ) {\n\n            this.y = v.y;\n\n        }\n\n        return this;\n\n    },\n\n    max: function ( v ) {\n\n        if ( this.x < v.x ) {\n\n            this.x = v.x;\n\n        }\n\n        if ( this.y < v.y ) {\n\n            this.y = v.y;\n\n        }\n\n        return this;\n\n    },\n\n    clamp: function ( min, max ) {\n\n        // This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n        if ( this.x < min.x ) {\n\n            this.x = min.x;\n\n        } else if ( this.x > max.x ) {\n\n            this.x = max.x;\n\n        }\n\n        if ( this.y < min.y ) {\n\n            this.y = min.y;\n\n        } else if ( this.y > max.y ) {\n\n            this.y = max.y;\n\n        }\n\n        return this;\n\n    },\n\n    negate: function() {\n\n        return this.multiplyScalar( - 1 );\n\n    },\n\n    dot: function ( v ) {\n\n        return this.x * v.x + this.y * v.y;\n\n    },\n\n    lengthSq: function () {\n\n        return this.x * this.x + this.y * this.y;\n\n    },\n\n    length: function () {\n\n        return Math.sqrt( this.x * this.x + this.y * this.y );\n\n    },\n\n    normalize: function () {\n\n        return this.divideScalar( this.length() );\n\n    },\n\n    distanceTo: function ( v ) {\n\n        return Math.sqrt( this.distanceToSquared( v ) );\n\n    },\n\n    distanceToSquared: function ( v ) {\n\n        var dx = this.x - v.x, dy = this.y - v.y;\n        return dx * dx + dy * dy;\n\n    },\n\n    setLength: function ( l ) {\n\n        var oldLength = this.length();\n\n        if ( oldLength !== 0 && l !== oldLength ) {\n\n            this.multiplyScalar( l / oldLength );\n        }\n\n        return this;\n\n    },\n\n    lerp: function ( v, alpha ) {\n\n        this.x += ( v.x - this.x ) * alpha;\n        this.y += ( v.y - this.y ) * alpha;\n\n        return this;\n\n    },\n\n    equals: function( v ) {\n\n        return ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n    },\n\n    fromArray: function ( array ) {\n\n        this.x = array[ 0 ];\n        this.y = array[ 1 ];\n\n        return this;\n\n    },\n\n    toArray: function () {\n\n        return [ this.x, this.y ];\n\n    },\n\n    clone: function () {\n\n        return new THREE.Vector2( this.x, this.y );\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector3 = function ( x, y, z ) {\n\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n\n};\n\nTHREE.Vector3.prototype = {\n\n    constructor: THREE.Vector3,\n\n    set: function ( x, y, z ) {\n\n        this.x = x;\n        this.y = y;\n        this.z = z;\n\n        return this;\n\n    },\n\n    setX: function ( x ) {\n\n        this.x = x;\n\n        return this;\n\n    },\n\n    setY: function ( y ) {\n\n        this.y = y;\n\n        return this;\n\n    },\n\n    setZ: function ( z ) {\n\n        this.z = z;\n\n        return this;\n\n    },\n\n    setComponent: function ( index, value ) {\n\n        switch ( index ) {\n\n            case 0: this.x = value; break;\n            case 1: this.y = value; break;\n            case 2: this.z = value; break;\n            default: throw new Error( \"index is out of range: \" + index );\n\n        }\n\n    },\n\n    getComponent: function ( index ) {\n\n        switch ( index ) {\n\n            case 0: return this.x;\n            case 1: return this.y;\n            case 2: return this.z;\n            default: throw new Error( \"index is out of range: \" + index );\n\n        }\n\n    },\n\n    copy: function ( v ) {\n\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n\n        return this;\n\n    },\n\n    add: function ( v, w ) {\n\n        if ( w !== undefined ) {\n\n            console.warn( 'DEPRECATED: Vector3\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n            return this.addVectors( v, w );\n\n        }\n\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n\n        return this;\n\n    },\n\n    addScalar: function ( s ) {\n\n        this.x += s;\n        this.y += s;\n        this.z += s;\n\n        return this;\n\n    },\n\n    addVectors: function ( a, b ) {\n\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        this.z = a.z + b.z;\n\n        return this;\n\n    },\n\n    sub: function ( v, w ) {\n\n        if ( w !== undefined ) {\n\n            console.warn( 'DEPRECATED: Vector3\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n            return this.subVectors( v, w );\n\n        }\n\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n\n        return this;\n\n    },\n\n    subVectors: function ( a, b ) {\n\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        this.z = a.z - b.z;\n\n        return this;\n\n    },\n\n    multiply: function ( v, w ) {\n\n        if ( w !== undefined ) {\n\n            console.warn( 'DEPRECATED: Vector3\\'s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n            return this.multiplyVectors( v, w );\n\n        }\n\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n\n        return this;\n\n    },\n\n    multiplyScalar: function ( scalar ) {\n\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n\n        return this;\n\n    },\n\n    multiplyVectors: function ( a, b ) {\n\n        this.x = a.x * b.x;\n        this.y = a.y * b.y;\n        this.z = a.z * b.z;\n\n        return this;\n\n    },\n\n    applyMatrix3: function ( m ) {\n\n        var x = this.x;\n        var y = this.y;\n        var z = this.z;\n\n        var e = m.elements;\n\n        this.x = e[0] * x + e[3] * y + e[6] * z;\n        this.y = e[1] * x + e[4] * y + e[7] * z;\n        this.z = e[2] * x + e[5] * y + e[8] * z;\n\n        return this;\n\n    },\n\n    applyMatrix4: function ( m ) {\n\n        // input: THREE.Matrix4 affine matrix\n\n        var x = this.x, y = this.y, z = this.z;\n\n        var e = m.elements;\n\n        this.x = e[0] * x + e[4] * y + e[8]  * z + e[12];\n        this.y = e[1] * x + e[5] * y + e[9]  * z + e[13];\n        this.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n\n        return this;\n\n    },\n\n    applyProjection: function ( m ) {\n\n        // input: THREE.Matrix4 projection matrix\n\n        var x = this.x, y = this.y, z = this.z;\n\n        var e = m.elements;\n        var d = 1 / ( e[3] * x + e[7] * y + e[11] * z + e[15] ); // perspective divide\n\n        this.x = ( e[0] * x + e[4] * y + e[8]  * z + e[12] ) * d;\n        this.y = ( e[1] * x + e[5] * y + e[9]  * z + e[13] ) * d;\n        this.z = ( e[2] * x + e[6] * y + e[10] * z + e[14] ) * d;\n\n        return this;\n\n    },\n\n    applyQuaternion: function ( q ) {\n\n        var x = this.x;\n        var y = this.y;\n        var z = this.z;\n\n        var qx = q.x;\n        var qy = q.y;\n        var qz = q.z;\n        var qw = q.w;\n\n        // calculate quat * vector\n\n        var ix =  qw * x + qy * z - qz * y;\n        var iy =  qw * y + qz * x - qx * z;\n        var iz =  qw * z + qx * y - qy * x;\n        var iw = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n        return this;\n\n    },\n\n    transformDirection: function ( m ) {\n\n        // input: THREE.Matrix4 affine matrix\n        // vector interpreted as a direction\n\n        var x = this.x, y = this.y, z = this.z;\n\n        var e = m.elements;\n\n        this.x = e[0] * x + e[4] * y + e[8]  * z;\n        this.y = e[1] * x + e[5] * y + e[9]  * z;\n        this.z = e[2] * x + e[6] * y + e[10] * z;\n\n        this.normalize();\n\n        return this;\n\n    },\n\n    divide: function ( v ) {\n\n        this.x /= v.x;\n        this.y /= v.y;\n        this.z /= v.z;\n\n        return this;\n\n    },\n\n    divideScalar: function ( scalar ) {\n\n        if ( scalar !== 0 ) {\n\n            var invScalar = 1 / scalar;\n\n            this.x *= invScalar;\n            this.y *= invScalar;\n            this.z *= invScalar;\n\n        } else {\n\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n\n        }\n\n        return this;\n\n    },\n\n    min: function ( v ) {\n\n        if ( this.x > v.x ) {\n\n            this.x = v.x;\n\n        }\n\n        if ( this.y > v.y ) {\n\n            this.y = v.y;\n\n        }\n\n        if ( this.z > v.z ) {\n\n            this.z = v.z;\n\n        }\n\n        return this;\n\n    },\n\n    max: function ( v ) {\n\n        if ( this.x < v.x ) {\n\n            this.x = v.x;\n\n        }\n\n        if ( this.y < v.y ) {\n\n            this.y = v.y;\n\n        }\n\n        if ( this.z < v.z ) {\n\n            this.z = v.z;\n\n        }\n\n        return this;\n\n    },\n\n    clamp: function ( min, max ) {\n\n        // This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n        if ( this.x < min.x ) {\n\n            this.x = min.x;\n\n        } else if ( this.x > max.x ) {\n\n            this.x = max.x;\n\n        }\n\n        if ( this.y < min.y ) {\n\n            this.y = min.y;\n\n        } else if ( this.y > max.y ) {\n\n            this.y = max.y;\n\n        }\n\n        if ( this.z < min.z ) {\n\n            this.z = min.z;\n\n        } else if ( this.z > max.z ) {\n\n            this.z = max.z;\n\n        }\n\n        return this;\n\n    },\n\n    negate: function () {\n\n        return this.multiplyScalar( - 1 );\n\n    },\n\n    dot: function ( v ) {\n\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n\n    },\n\n    lengthSq: function () {\n\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n\n    },\n\n    length: function () {\n\n        return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n    },\n\n    lengthManhattan: function () {\n\n        return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n    },\n\n    normalize: function () {\n\n        return this.divideScalar( this.length() );\n\n    },\n\n    setLength: function ( l ) {\n\n        var oldLength = this.length();\n\n        if ( oldLength !== 0 && l !== oldLength  ) {\n\n            this.multiplyScalar( l / oldLength );\n        }\n\n        return this;\n\n    },\n\n    lerp: function ( v, alpha ) {\n\n        this.x += ( v.x - this.x ) * alpha;\n        this.y += ( v.y - this.y ) * alpha;\n        this.z += ( v.z - this.z ) * alpha;\n\n        return this;\n\n    },\n\n    cross: function ( v, w ) {\n\n        if ( w !== undefined ) {\n\n            console.warn( 'DEPRECATED: Vector3\\'s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n            return this.crossVectors( v, w );\n\n        }\n\n        var x = this.x, y = this.y, z = this.z;\n\n        this.x = y * v.z - z * v.y;\n        this.y = z * v.x - x * v.z;\n        this.z = x * v.y - y * v.x;\n\n        return this;\n\n    },\n\n    crossVectors: function ( a, b ) {\n\n        var ax = a.x, ay = a.y, az = a.z;\n        var bx = b.x, by = b.y, bz = b.z;\n\n        this.x = ay * bz - az * by;\n        this.y = az * bx - ax * bz;\n        this.z = ax * by - ay * bx;\n\n        return this;\n\n    },\n\n    angleTo: function ( v ) {\n\n        var theta = this.dot( v ) / ( this.length() * v.length() );\n\n        // clamp, to handle numerical problems\n\n        return Math.acos( THREE.Math.clamp( theta, -1, 1 ) );\n\n    },\n\n    distanceTo: function ( v ) {\n\n        return Math.sqrt( this.distanceToSquared( v ) );\n\n    },\n\n    distanceToSquared: function ( v ) {\n\n        var dx = this.x - v.x;\n        var dy = this.y - v.y;\n        var dz = this.z - v.z;\n\n        return dx * dx + dy * dy + dz * dz;\n\n    },\n\n    setEulerFromRotationMatrix: function ( m, order ) {\n\n        console.error( \"REMOVED: Vector3\\'s setEulerFromRotationMatrix has been removed in favor of Euler.setFromRotationMatrix(), please update your code.\");\n\n    },\n\n    setEulerFromQuaternion: function ( q, order ) {\n\n        console.error( \"REMOVED: Vector3\\'s setEulerFromQuaternion: has been removed in favor of Euler.setFromQuaternion(), please update your code.\");\n\n    },\n\n    getPositionFromMatrix: function ( m ) {\n\n        this.x = m.elements[12];\n        this.y = m.elements[13];\n        this.z = m.elements[14];\n\n        return this;\n\n    },\n\n    getScaleFromMatrix: function ( m ) {\n\n        var sx = this.set( m.elements[0], m.elements[1], m.elements[2] ).length();\n        var sy = this.set( m.elements[4], m.elements[5], m.elements[6] ).length();\n        var sz = this.set( m.elements[8], m.elements[9], m.elements[10] ).length();\n\n        this.x = sx;\n        this.y = sy;\n        this.z = sz;\n\n        return this;\n    },\n\n    getColumnFromMatrix: function ( index, matrix ) {\n\n        var offset = index * 4;\n\n        var me = matrix.elements;\n\n        this.x = me[ offset ];\n        this.y = me[ offset + 1 ];\n        this.z = me[ offset + 2 ];\n\n        return this;\n\n    },\n\n    equals: function ( v ) {\n\n        return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n    },\n\n    fromArray: function ( array ) {\n\n        this.x = array[ 0 ];\n        this.y = array[ 1 ];\n        this.z = array[ 2 ];\n\n        return this;\n\n    },\n\n    toArray: function () {\n\n        return [ this.x, this.y, this.z ];\n\n    },\n\n    clone: function () {\n\n        return new THREE.Vector3( this.x, this.y, this.z );\n\n    }\n\n};\n\nTHREE.extend( THREE.Vector3.prototype, {\n\n    applyEuler: function () {\n\n        var quaternion = new THREE.Quaternion();\n\n        return function ( euler ) {\n\n            if ( euler instanceof THREE.Euler === false ) {\n\n                console.error( 'ERROR: Vector3\\'s .applyEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );\n\n            }\n\n            this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n            return this;\n\n        };\n\n    }(),\n\n    applyAxisAngle: function () {\n\n        var quaternion = new THREE.Quaternion();\n\n        return function ( axis, angle ) {\n\n            this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n            return this;\n\n        };\n\n    }(),\n\n    projectOnVector: function () {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( vector ) {\n\n            v1.copy( vector ).normalize();\n            var d = this.dot( v1 );\n            return this.copy( v1 ).multiplyScalar( d );\n\n        };\n\n    }(),\n\n    projectOnPlane: function () {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( planeNormal ) {\n\n            v1.copy( this ).projectOnVector( planeNormal );\n\n            return this.sub( v1 );\n\n        }\n\n    }(),\n\n    reflect: function () {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( vector ) {\n\n            v1.copy( this ).projectOnVector( vector ).multiplyScalar( 2 );\n\n            return this.subVectors( v1, this );\n\n        }\n\n    }()\n\n} );\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector4 = function ( x, y, z, w ) {\n\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n    this.w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Vector4.prototype = {\n\n    constructor: THREE.Vector4,\n\n    set: function ( x, y, z, w ) {\n\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n\n        return this;\n\n    },\n\n    setX: function ( x ) {\n\n        this.x = x;\n\n        return this;\n\n    },\n\n    setY: function ( y ) {\n\n        this.y = y;\n\n        return this;\n\n    },\n\n    setZ: function ( z ) {\n\n        this.z = z;\n\n        return this;\n\n    },\n\n    setW: function ( w ) {\n\n        this.w = w;\n\n        return this;\n\n    },\n\n    setComponent: function ( index, value ) {\n\n        switch ( index ) {\n\n            case 0: this.x = value; break;\n            case 1: this.y = value; break;\n            case 2: this.z = value; break;\n            case 3: this.w = value; break;\n            default: throw new Error( \"index is out of range: \" + index );\n\n        }\n\n    },\n\n    getComponent: function ( index ) {\n\n        switch ( index ) {\n\n            case 0: return this.x;\n            case 1: return this.y;\n            case 2: return this.z;\n            case 3: return this.w;\n            default: throw new Error( \"index is out of range: \" + index );\n\n        }\n\n    },\n\n    copy: function ( v ) {\n\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n        this.w = ( v.w !== undefined ) ? v.w : 1;\n\n        return this;\n\n    },\n\n    add: function ( v, w ) {\n\n        if ( w !== undefined ) {\n\n            console.warn( 'DEPRECATED: Vector4\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n            return this.addVectors( v, w );\n\n        }\n\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        this.w += v.w;\n\n        return this;\n\n    },\n\n    addScalar: function ( s ) {\n\n        this.x += s;\n        this.y += s;\n        this.z += s;\n        this.w += s;\n\n        return this;\n\n    },\n\n    addVectors: function ( a, b ) {\n\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        this.z = a.z + b.z;\n        this.w = a.w + b.w;\n\n        return this;\n\n    },\n\n    sub: function ( v, w ) {\n\n        if ( w !== undefined ) {\n\n            console.warn( 'DEPRECATED: Vector4\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n            return this.subVectors( v, w );\n\n        }\n\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        this.w -= v.w;\n\n        return this;\n\n    },\n\n    subVectors: function ( a, b ) {\n\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        this.z = a.z - b.z;\n        this.w = a.w - b.w;\n\n        return this;\n\n    },\n\n    multiplyScalar: function ( scalar ) {\n\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        this.w *= scalar;\n\n        return this;\n\n    },\n\n    applyMatrix4: function ( m ) {\n\n        var x = this.x;\n        var y = this.y;\n        var z = this.z;\n        var w = this.w;\n\n        var e = m.elements;\n\n        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\n        return this;\n\n    },\n\n    divideScalar: function ( scalar ) {\n\n        if ( scalar !== 0 ) {\n\n            var invScalar = 1 / scalar;\n\n            this.x *= invScalar;\n            this.y *= invScalar;\n            this.z *= invScalar;\n            this.w *= invScalar;\n\n        } else {\n\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.w = 1;\n\n        }\n\n        return this;\n\n    },\n\n    setAxisAngleFromQuaternion: function ( q ) {\n\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n        // q is assumed to be normalized\n\n        this.w = 2 * Math.acos( q.w );\n\n        var s = Math.sqrt( 1 - q.w * q.w );\n\n        if ( s < 0.0001 ) {\n\n            this.x = 1;\n            this.y = 0;\n            this.z = 0;\n\n        } else {\n\n            this.x = q.x / s;\n            this.y = q.y / s;\n            this.z = q.z / s;\n\n        }\n\n        return this;\n\n    },\n\n    setAxisAngleFromRotationMatrix: function ( m ) {\n\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        var angle, x, y, z,\t\t// variables for result\n            epsilon = 0.01,\t\t// margin to allow for rounding errors\n            epsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n            te = m.elements,\n\n            m11 = te[0], m12 = te[4], m13 = te[8],\n            m21 = te[1], m22 = te[5], m23 = te[9],\n            m31 = te[2], m32 = te[6], m33 = te[10];\n\n        if ( ( Math.abs( m12 - m21 ) < epsilon )\n            && ( Math.abs( m13 - m31 ) < epsilon )\n            && ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n            // singularity found\n            // first check for identity matrix which must have +1 for all terms\n            // in leading diagonal and zero in other terms\n\n            if ( ( Math.abs( m12 + m21 ) < epsilon2 )\n                && ( Math.abs( m13 + m31 ) < epsilon2 )\n                && ( Math.abs( m23 + m32 ) < epsilon2 )\n                && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n                // this singularity is identity matrix so angle = 0\n\n                this.set( 1, 0, 0, 0 );\n\n                return this; // zero angle, arbitrary axis\n\n            }\n\n            // otherwise this singularity is angle = 180\n\n            angle = Math.PI;\n\n            var xx = ( m11 + 1 ) / 2;\n            var yy = ( m22 + 1 ) / 2;\n            var zz = ( m33 + 1 ) / 2;\n            var xy = ( m12 + m21 ) / 4;\n            var xz = ( m13 + m31 ) / 4;\n            var yz = ( m23 + m32 ) / 4;\n\n            if ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term\n\n                if ( xx < epsilon ) {\n\n                    x = 0;\n                    y = 0.707106781;\n                    z = 0.707106781;\n\n                } else {\n\n                    x = Math.sqrt( xx );\n                    y = xy / x;\n                    z = xz / x;\n\n                }\n\n            } else if ( yy > zz ) { // m22 is the largest diagonal term\n\n                if ( yy < epsilon ) {\n\n                    x = 0.707106781;\n                    y = 0;\n                    z = 0.707106781;\n\n                } else {\n\n                    y = Math.sqrt( yy );\n                    x = xy / y;\n                    z = yz / y;\n\n                }\n\n            } else { // m33 is the largest diagonal term so base result on this\n\n                if ( zz < epsilon ) {\n\n                    x = 0.707106781;\n                    y = 0.707106781;\n                    z = 0;\n\n                } else {\n\n                    z = Math.sqrt( zz );\n                    x = xz / z;\n                    y = yz / z;\n\n                }\n\n            }\n\n            this.set( x, y, z, angle );\n\n            return this; // return 180 deg rotation\n\n        }\n\n        // as we have reached here there are no singularities so we can handle normally\n\n        var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\n            + ( m13 - m31 ) * ( m13 - m31 )\n            + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n        if ( Math.abs( s ) < 0.001 ) s = 1;\n\n        // prevent divide by zero, should not happen if matrix is orthogonal and should be\n        // caught by singularity test above, but I've left it in just in case\n\n        this.x = ( m32 - m23 ) / s;\n        this.y = ( m13 - m31 ) / s;\n        this.z = ( m21 - m12 ) / s;\n        this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n        return this;\n\n    },\n\n    min: function ( v ) {\n\n        if ( this.x > v.x ) {\n\n            this.x = v.x;\n\n        }\n\n        if ( this.y > v.y ) {\n\n            this.y = v.y;\n\n        }\n\n        if ( this.z > v.z ) {\n\n            this.z = v.z;\n\n        }\n\n        if ( this.w > v.w ) {\n\n            this.w = v.w;\n\n        }\n\n        return this;\n\n    },\n\n    max: function ( v ) {\n\n        if ( this.x < v.x ) {\n\n            this.x = v.x;\n\n        }\n\n        if ( this.y < v.y ) {\n\n            this.y = v.y;\n\n        }\n\n        if ( this.z < v.z ) {\n\n            this.z = v.z;\n\n        }\n\n        if ( this.w < v.w ) {\n\n            this.w = v.w;\n\n        }\n\n        return this;\n\n    },\n\n    clamp: function ( min, max ) {\n\n        // This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n        if ( this.x < min.x ) {\n\n            this.x = min.x;\n\n        } else if ( this.x > max.x ) {\n\n            this.x = max.x;\n\n        }\n\n        if ( this.y < min.y ) {\n\n            this.y = min.y;\n\n        } else if ( this.y > max.y ) {\n\n            this.y = max.y;\n\n        }\n\n        if ( this.z < min.z ) {\n\n            this.z = min.z;\n\n        } else if ( this.z > max.z ) {\n\n            this.z = max.z;\n\n        }\n\n        if ( this.w < min.w ) {\n\n            this.w = min.w;\n\n        } else if ( this.w > max.w ) {\n\n            this.w = max.w;\n\n        }\n\n        return this;\n\n    },\n\n    negate: function() {\n\n        return this.multiplyScalar( -1 );\n\n    },\n\n    dot: function ( v ) {\n\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n    },\n\n    lengthSq: function () {\n\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n    },\n\n    length: function () {\n\n        return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n    },\n\n    lengthManhattan: function () {\n\n        return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n    },\n\n    normalize: function () {\n\n        return this.divideScalar( this.length() );\n\n    },\n\n    setLength: function ( l ) {\n\n        var oldLength = this.length();\n\n        if ( oldLength !== 0 && l !== oldLength ) {\n\n            this.multiplyScalar( l / oldLength );\n\n        }\n\n        return this;\n\n    },\n\n    lerp: function ( v, alpha ) {\n\n        this.x += ( v.x - this.x ) * alpha;\n        this.y += ( v.y - this.y ) * alpha;\n        this.z += ( v.z - this.z ) * alpha;\n        this.w += ( v.w - this.w ) * alpha;\n\n        return this;\n\n    },\n\n    equals: function ( v ) {\n\n        return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n    },\n\n    fromArray: function ( array ) {\n\n        this.x = array[ 0 ];\n        this.y = array[ 1 ];\n        this.z = array[ 2 ];\n        this.w = array[ 3 ];\n\n        return this;\n\n    },\n\n    toArray: function () {\n\n        return [ this.x, this.y, this.z, this.w ];\n\n    },\n\n    clone: function () {\n\n        return new THREE.Vector4( this.x, this.y, this.z, this.w );\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Euler = function ( x, y, z, order ) {\n\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n    this._order = order || THREE.Euler.DefaultOrder;\n\n};\n\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nTHREE.Euler.DefaultOrder = 'XYZ';\n\nTHREE.Euler.prototype = {\n\n    constructor: THREE.Euler,\n\n    _x: 0, _y: 0, _z: 0, _order: THREE.Euler.DefaultOrder,\n\n    _quaternion: undefined,\n\n    _updateQuaternion: function () {\n\n        if ( this._quaternion !== undefined ) {\n\n            this._quaternion.setFromEuler( this, false );\n\n        }\n\n    },\n\n    get x () {\n\n        return this._x;\n\n    },\n\n    set x ( value ) {\n\n        this._x = value;\n        this._updateQuaternion();\n\n    },\n\n    get y () {\n\n        return this._y;\n\n    },\n\n    set y ( value ) {\n\n        this._y = value;\n        this._updateQuaternion();\n\n    },\n\n    get z () {\n\n        return this._z;\n\n    },\n\n    set z ( value ) {\n\n        this._z = value;\n        this._updateQuaternion();\n\n    },\n\n    get order () {\n\n        return this._order;\n\n    },\n\n    set order ( value ) {\n\n        this._order = value;\n        this._updateQuaternion();\n\n    },\n\n    set: function ( x, y, z, order ) {\n\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._order = order || this._order;\n\n        this._updateQuaternion();\n\n        return this;\n\n    },\n\n    copy: function ( euler ) {\n\n        this._x = euler._x;\n        this._y = euler._y;\n        this._z = euler._z;\n        this._order = euler._order;\n\n        this._updateQuaternion();\n\n        return this;\n\n    },\n\n    setFromRotationMatrix: function ( m, order ) {\n\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        // clamp, to handle numerical problems\n\n        function clamp( x ) {\n\n            return Math.min( Math.max( x, -1 ), 1 );\n\n        }\n\n        var te = m.elements;\n        var m11 = te[0], m12 = te[4], m13 = te[8];\n        var m21 = te[1], m22 = te[5], m23 = te[9];\n        var m31 = te[2], m32 = te[6], m33 = te[10];\n\n        order = order || this._order;\n\n        if ( order === 'XYZ' ) {\n\n            this._y = Math.asin( clamp( m13 ) );\n\n            if ( Math.abs( m13 ) < 0.99999 ) {\n\n                this._x = Math.atan2( - m23, m33 );\n                this._z = Math.atan2( - m12, m11 );\n\n            } else {\n\n                this._x = Math.atan2( m32, m22 );\n                this._z = 0;\n\n            }\n\n        } else if ( order === 'YXZ' ) {\n\n            this._x = Math.asin( - clamp( m23 ) );\n\n            if ( Math.abs( m23 ) < 0.99999 ) {\n\n                this._y = Math.atan2( m13, m33 );\n                this._z = Math.atan2( m21, m22 );\n\n            } else {\n\n                this._y = Math.atan2( - m31, m11 );\n                this._z = 0;\n\n            }\n\n        } else if ( order === 'ZXY' ) {\n\n            this._x = Math.asin( clamp( m32 ) );\n\n            if ( Math.abs( m32 ) < 0.99999 ) {\n\n                this._y = Math.atan2( - m31, m33 );\n                this._z = Math.atan2( - m12, m22 );\n\n            } else {\n\n                this._y = 0;\n                this._z = Math.atan2( m21, m11 );\n\n            }\n\n        } else if ( order === 'ZYX' ) {\n\n            this._y = Math.asin( - clamp( m31 ) );\n\n            if ( Math.abs( m31 ) < 0.99999 ) {\n\n                this._x = Math.atan2( m32, m33 );\n                this._z = Math.atan2( m21, m11 );\n\n            } else {\n\n                this._x = 0;\n                this._z = Math.atan2( - m12, m22 );\n\n            }\n\n        } else if ( order === 'YZX' ) {\n\n            this._z = Math.asin( clamp( m21 ) );\n\n            if ( Math.abs( m21 ) < 0.99999 ) {\n\n                this._x = Math.atan2( - m23, m22 );\n                this._y = Math.atan2( - m31, m11 );\n\n            } else {\n\n                this._x = 0;\n                this._y = Math.atan2( m13, m33 );\n\n            }\n\n        } else if ( order === 'XZY' ) {\n\n            this._z = Math.asin( - clamp( m12 ) );\n\n            if ( Math.abs( m12 ) < 0.99999 ) {\n\n                this._x = Math.atan2( m32, m22 );\n                this._y = Math.atan2( m13, m11 );\n\n            } else {\n\n                this._x = Math.atan2( - m23, m33 );\n                this._y = 0;\n\n            }\n\n        } else {\n\n            console.warn( 'WARNING: Euler.setFromRotationMatrix() given unsupported order: ' + order )\n\n        }\n\n        this._order = order;\n\n        this._updateQuaternion();\n\n        return this;\n\n    },\n\n    setFromQuaternion: function ( q, order, update ) {\n\n        // q is assumed to be normalized\n\n        // clamp, to handle numerical problems\n\n        function clamp( x ) {\n\n            return Math.min( Math.max( x, -1 ), 1 );\n\n        }\n\n        // http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n\n        var sqx = q.x * q.x;\n        var sqy = q.y * q.y;\n        var sqz = q.z * q.z;\n        var sqw = q.w * q.w;\n\n        order = order || this._order;\n\n        if ( order === 'XYZ' ) {\n\n            this._x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );\n            this._y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ) ) );\n            this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );\n\n        } else if ( order ===  'YXZ' ) {\n\n            this._x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ) ) );\n            this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );\n            this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );\n\n        } else if ( order === 'ZXY' ) {\n\n            this._x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ) ) );\n            this._y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );\n            this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );\n\n        } else if ( order === 'ZYX' ) {\n\n            this._x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );\n            this._y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ) ) );\n            this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );\n\n        } else if ( order === 'YZX' ) {\n\n            this._x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );\n            this._y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );\n            this._z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ) ) );\n\n        } else if ( order === 'XZY' ) {\n\n            this._x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );\n            this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );\n            this._z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ) ) );\n\n        } else {\n\n            console.warn( 'WARNING: Euler.setFromQuaternion() given unsupported order: ' + order )\n\n        }\n\n        this._order = order;\n\n        if ( update !== false ) this._updateQuaternion();\n\n        return this;\n\n    },\n\n    reorder: function () {\n\n        // WARNING: this discards revolution information -bhouston\n\n        var q = new THREE.Quaternion();\n\n        return function ( newOrder ) {\n\n            q.setFromEuler( this );\n            this.setFromQuaternion( q, newOrder );\n\n        };\n\n\n    }(),\n\n    fromArray: function ( array ) {\n\n        this._x = array[ 0 ];\n        this._y = array[ 1 ];\n        this._z = array[ 2 ];\n        if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n        this._updateQuaternion();\n\n        return this;\n\n    },\n\n    toArray: function () {\n\n        return [ this._x, this._y, this._z, this._order ];\n\n    },\n\n    equals: function ( euler ) {\n\n        return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n    },\n\n    clone: function () {\n\n        return new THREE.Euler( this._x, this._y, this._z, this._order );\n\n    }\n\n};\n\n/**\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Line3 = function ( start, end ) {\n\n    this.start = ( start !== undefined ) ? start : new THREE.Vector3();\n    this.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\n};\n\nTHREE.Line3.prototype = {\n\n    constructor: THREE.Line3,\n\n    set: function ( start, end ) {\n\n        this.start.copy( start );\n        this.end.copy( end );\n\n        return this;\n\n    },\n\n    copy: function ( line ) {\n\n        this.start.copy( line.start );\n        this.end.copy( line.end );\n\n        return this;\n\n    },\n\n    center: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n        return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n    },\n\n    delta: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n        return result.subVectors( this.end, this.start );\n\n    },\n\n    distanceSq: function () {\n\n        return this.start.distanceToSquared( this.end );\n\n    },\n\n    distance: function () {\n\n        return this.start.distanceTo( this.end );\n\n    },\n\n    at: function ( t, optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n\n        return this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    },\n\n    closestPointToPointParameter: function() {\n\n        var startP = new THREE.Vector3();\n        var startEnd = new THREE.Vector3();\n\n        return function ( point, clampToLine ) {\n\n            startP.subVectors( point, this.start );\n            startEnd.subVectors( this.end, this.start );\n\n            var startEnd2 = startEnd.dot( startEnd );\n            var startEnd_startP = startEnd.dot( startP );\n\n            var t = startEnd_startP / startEnd2;\n\n            if ( clampToLine ) {\n\n                t = THREE.Math.clamp( t, 0, 1 );\n\n            }\n\n            return t;\n\n        };\n\n    }(),\n\n    closestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n        var t = this.closestPointToPointParameter( point, clampToLine );\n\n        var result = optionalTarget || new THREE.Vector3();\n\n        return this.delta( result ).multiplyScalar( t ).add( this.start );\n\n    },\n\n    applyMatrix4: function ( matrix ) {\n\n        this.start.applyMatrix4( matrix );\n        this.end.applyMatrix4( matrix );\n\n        return this;\n\n    },\n\n    equals: function ( line ) {\n\n        return line.start.equals( this.start ) && line.end.equals( this.end );\n\n    },\n\n    clone: function () {\n\n        return new THREE.Line3().copy( this );\n\n    }\n\n};\n\n/**\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Box2 = function ( min, max ) {\n\n    this.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );\n    this.max = ( max !== undefined ) ? max : new THREE.Vector2( -Infinity, -Infinity );\n\n};\n\nTHREE.Box2.prototype = {\n\n    constructor: THREE.Box2,\n\n    set: function ( min, max ) {\n\n        this.min.copy( min );\n        this.max.copy( max );\n\n        return this;\n\n    },\n\n    setFromPoints: function ( points ) {\n\n        if ( points.length > 0 ) {\n\n            var point = points[ 0 ];\n\n            this.min.copy( point );\n            this.max.copy( point );\n\n            for ( var i = 1, il = points.length; i < il; i ++ ) {\n\n                point = points[ i ];\n\n                if ( point.x < this.min.x ) {\n\n                    this.min.x = point.x;\n\n                } else if ( point.x > this.max.x ) {\n\n                    this.max.x = point.x;\n\n                }\n\n                if ( point.y < this.min.y ) {\n\n                    this.min.y = point.y;\n\n                } else if ( point.y > this.max.y ) {\n\n                    this.max.y = point.y;\n\n                }\n\n            }\n\n        } else {\n\n            this.makeEmpty();\n\n        }\n\n        return this;\n\n    },\n\n    setFromCenterAndSize: function () {\n\n        var v1 = new THREE.Vector2();\n\n        return function ( center, size ) {\n\n            var halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n            this.min.copy( center ).sub( halfSize );\n            this.max.copy( center ).add( halfSize );\n\n            return this;\n\n        };\n\n    }(),\n\n    copy: function ( box ) {\n\n        this.min.copy( box.min );\n        this.max.copy( box.max );\n\n        return this;\n\n    },\n\n    makeEmpty: function () {\n\n        this.min.x = this.min.y = Infinity;\n        this.max.x = this.max.y = -Infinity;\n\n        return this;\n\n    },\n\n    empty: function () {\n\n        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n        return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n    },\n\n    center: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector2();\n        return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    },\n\n    size: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector2();\n        return result.subVectors( this.max, this.min );\n\n    },\n\n    expandByPoint: function ( point ) {\n\n        this.min.min( point );\n        this.max.max( point );\n\n        return this;\n    },\n\n    expandByVector: function ( vector ) {\n\n        this.min.sub( vector );\n        this.max.add( vector );\n\n        return this;\n    },\n\n    expandByScalar: function ( scalar ) {\n\n        this.min.addScalar( -scalar );\n        this.max.addScalar( scalar );\n\n        return this;\n    },\n\n    containsPoint: function ( point ) {\n\n        if ( point.x < this.min.x || point.x > this.max.x ||\n            point.y < this.min.y || point.y > this.max.y ) {\n\n            return false;\n\n        }\n\n        return true;\n\n    },\n\n    containsBox: function ( box ) {\n\n        if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n            ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n            return true;\n\n        }\n\n        return false;\n\n    },\n\n    getParameter: function ( point ) {\n\n        // This can potentially have a divide by zero if the box\n        // has a size dimension of 0.\n\n        return new THREE.Vector2(\n            ( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n            ( point.y - this.min.y ) / ( this.max.y - this.min.y )\n        );\n\n    },\n\n    isIntersectionBox: function ( box ) {\n\n        // using 6 splitting planes to rule out intersections.\n\n        if ( box.max.x < this.min.x || box.min.x > this.max.x ||\n            box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n            return false;\n\n        }\n\n        return true;\n\n    },\n\n    clampPoint: function ( point, optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector2();\n        return result.copy( point ).clamp( this.min, this.max );\n\n    },\n\n    distanceToPoint: function () {\n\n        var v1 = new THREE.Vector2();\n\n        return function ( point ) {\n\n            var clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n            return clampedPoint.sub( point ).length();\n\n        };\n\n    }(),\n\n    intersect: function ( box ) {\n\n        this.min.max( box.min );\n        this.max.min( box.max );\n\n        return this;\n\n    },\n\n    union: function ( box ) {\n\n        this.min.min( box.min );\n        this.max.max( box.max );\n\n        return this;\n\n    },\n\n    translate: function ( offset ) {\n\n        this.min.add( offset );\n        this.max.add( offset );\n\n        return this;\n\n    },\n\n    equals: function ( box ) {\n\n        return box.min.equals( this.min ) && box.max.equals( this.max );\n\n    },\n\n    clone: function () {\n\n        return new THREE.Box2().copy( this );\n\n    }\n\n};\n\n/**\n * @author bhouston / http://exocortex.com\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Box3 = function ( min, max ) {\n\n    this.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );\n    this.max = ( max !== undefined ) ? max : new THREE.Vector3( -Infinity, -Infinity, -Infinity );\n\n};\n\nTHREE.Box3.prototype = {\n\n    constructor: THREE.Box3,\n\n    set: function ( min, max ) {\n\n        this.min.copy( min );\n        this.max.copy( max );\n\n        return this;\n\n    },\n\n    addPoint: function ( point ) {\n\n        if ( point.x < this.min.x ) {\n\n            this.min.x = point.x;\n\n        } else if ( point.x > this.max.x ) {\n\n            this.max.x = point.x;\n\n        }\n\n        if ( point.y < this.min.y ) {\n\n            this.min.y = point.y;\n\n        } else if ( point.y > this.max.y ) {\n\n            this.max.y = point.y;\n\n        }\n\n        if ( point.z < this.min.z ) {\n\n            this.min.z = point.z;\n\n        } else if ( point.z > this.max.z ) {\n\n            this.max.z = point.z;\n\n        }\n\n    },\n\n    setFromPoints: function ( points ) {\n\n        if ( points.length > 0 ) {\n\n            var point = points[ 0 ];\n\n            this.min.copy( point );\n            this.max.copy( point );\n\n            for ( var i = 1, il = points.length; i < il; i ++ ) {\n\n                this.addPoint( points[ i ] )\n\n            }\n\n        } else {\n\n            this.makeEmpty();\n\n        }\n\n        return this;\n\n    },\n\n    setFromCenterAndSize: function() {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( center, size ) {\n\n            var halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n            this.min.copy( center ).sub( halfSize );\n            this.max.copy( center ).add( halfSize );\n\n            return this;\n\n        };\n\n    }(),\n\n    setFromObject: function() {\n\n        // Computes the world-axis-aligned bounding box of an object (including its children),\n        // accounting for both the object's, and childrens', world transforms\n\n        var v1 = new THREE.Vector3();\n\n        return function( object ) {\n\n            var scope = this;\n\n            object.updateMatrixWorld( true );\n\n            this.makeEmpty();\n\n            object.traverse( function ( node ) {\n\n                if ( node.geometry !== undefined && node.geometry.vertices !== undefined ) {\n\n                    var vertices = node.geometry.vertices;\n\n                    for ( var i = 0, il = vertices.length; i < il; i++ ) {\n\n                        v1.copy( vertices[ i ] );\n\n                        v1.applyMatrix4( node.matrixWorld );\n\n                        scope.expandByPoint( v1 );\n\n                    }\n\n                }\n\n            } );\n\n            return this;\n\n        };\n\n    }(),\n\n    copy: function ( box ) {\n\n        this.min.copy( box.min );\n        this.max.copy( box.max );\n\n        return this;\n\n    },\n\n    makeEmpty: function () {\n\n        this.min.x = this.min.y = this.min.z = Infinity;\n        this.max.x = this.max.y = this.max.z = -Infinity;\n\n        return this;\n\n    },\n\n    empty: function () {\n\n        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n        return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n    },\n\n    center: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n        return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n    },\n\n    size: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n        return result.subVectors( this.max, this.min );\n\n    },\n\n    expandByPoint: function ( point ) {\n\n        this.min.min( point );\n        this.max.max( point );\n\n        return this;\n\n    },\n\n    expandByVector: function ( vector ) {\n\n        this.min.sub( vector );\n        this.max.add( vector );\n\n        return this;\n\n    },\n\n    expandByScalar: function ( scalar ) {\n\n        this.min.addScalar( -scalar );\n        this.max.addScalar( scalar );\n\n        return this;\n\n    },\n\n    containsPoint: function ( point ) {\n\n        if ( point.x < this.min.x || point.x > this.max.x ||\n            point.y < this.min.y || point.y > this.max.y ||\n            point.z < this.min.z || point.z > this.max.z ) {\n\n            return false;\n\n        }\n\n        return true;\n\n    },\n\n    containsBox: function ( box ) {\n\n        if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n            ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n            ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n            return true;\n\n        }\n\n        return false;\n\n    },\n\n    getParameter: function ( point ) {\n\n        // This can potentially have a divide by zero if the box\n        // has a size dimension of 0.\n\n        return new THREE.Vector3(\n            ( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n            ( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n            ( point.z - this.min.z ) / ( this.max.z - this.min.z )\n        );\n\n    },\n\n    isIntersectionBox: function ( box ) {\n\n        // using 6 splitting planes to rule out intersections.\n\n        if ( box.max.x < this.min.x || box.min.x > this.max.x ||\n            box.max.y < this.min.y || box.min.y > this.max.y ||\n            box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n            return false;\n\n        }\n\n        return true;\n\n    },\n\n    clampPoint: function ( point, optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n        return result.copy( point ).clamp( this.min, this.max );\n\n    },\n\n    distanceToPoint: function() {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( point ) {\n\n            var clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n            return clampedPoint.sub( point ).length();\n\n        };\n\n    }(),\n\n    getBoundingSphere: function() {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( optionalTarget ) {\n\n            var result = optionalTarget || new THREE.Sphere();\n\n            result.center = this.center();\n            result.radius = this.size( v1 ).length() * 0.5;\n\n            return result;\n\n        };\n\n    }(),\n\n    intersect: function ( box ) {\n\n        this.min.max( box.min );\n        this.max.min( box.max );\n\n        return this;\n\n    },\n\n    union: function ( box ) {\n\n        this.min.min( box.min );\n        this.max.max( box.max );\n\n        return this;\n\n    },\n\n    applyMatrix4: function() {\n\n        var points = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n\n        return function ( matrix ) {\n\n            // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n            points[0].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n            points[1].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n            points[2].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n            points[3].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n            points[4].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n            points[5].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n            points[6].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n            points[7].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111\n\n            this.makeEmpty();\n            this.setFromPoints( points );\n\n            return this;\n\n        };\n\n    }(),\n\n    translate: function ( offset ) {\n\n        this.min.add( offset );\n        this.max.add( offset );\n\n        return this;\n\n    },\n\n    equals: function ( box ) {\n\n        return box.min.equals( this.min ) && box.max.equals( this.max );\n\n    },\n\n    clone: function () {\n\n        return new THREE.Box3().copy( this );\n\n    }\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Matrix3 = function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n    this.elements = new Float32Array(9);\n\n    this.set(\n\n        ( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0,\n        n21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0,\n        n31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1\n\n    );\n};\n\nTHREE.Matrix3.prototype = {\n\n    constructor: THREE.Matrix3,\n\n    set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n        var te = this.elements;\n\n        te[0] = n11; te[3] = n12; te[6] = n13;\n        te[1] = n21; te[4] = n22; te[7] = n23;\n        te[2] = n31; te[5] = n32; te[8] = n33;\n\n        return this;\n\n    },\n\n    identity: function () {\n\n        this.set(\n\n            1, 0, 0,\n            0, 1, 0,\n            0, 0, 1\n\n        );\n\n        return this;\n\n    },\n\n    copy: function ( m ) {\n\n        var me = m.elements;\n\n        this.set(\n\n            me[0], me[3], me[6],\n            me[1], me[4], me[7],\n            me[2], me[5], me[8]\n\n        );\n\n        return this;\n\n    },\n\n    multiplyVector3: function ( vector ) {\n\n        console.warn( 'DEPRECATED: Matrix3\\'s .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n        return vector.applyMatrix3( this );\n\n    },\n\n    multiplyVector3Array: function() {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( a ) {\n\n            for ( var i = 0, il = a.length; i < il; i += 3 ) {\n\n                v1.x = a[ i ];\n                v1.y = a[ i + 1 ];\n                v1.z = a[ i + 2 ];\n\n                v1.applyMatrix3(this);\n\n                a[ i ]     = v1.x;\n                a[ i + 1 ] = v1.y;\n                a[ i + 2 ] = v1.z;\n\n            }\n\n            return a;\n\n        };\n\n    }(),\n\n    multiplyScalar: function ( s ) {\n\n        var te = this.elements;\n\n        te[0] *= s; te[3] *= s; te[6] *= s;\n        te[1] *= s; te[4] *= s; te[7] *= s;\n        te[2] *= s; te[5] *= s; te[8] *= s;\n\n        return this;\n\n    },\n\n    determinant: function () {\n\n        var te = this.elements;\n\n        var a = te[0], b = te[1], c = te[2],\n            d = te[3], e = te[4], f = te[5],\n            g = te[6], h = te[7], i = te[8];\n\n        return a*e*i - a*f*h - b*d*i + b*f*g + c*d*h - c*e*g;\n\n    },\n\n    getInverse: function ( matrix, throwOnInvertible ) {\n\n        // input: THREE.Matrix4\n        // ( based on http://code.google.com/p/webgl-mjs/ )\n\n        var me = matrix.elements;\n        var te = this.elements;\n\n        te[ 0 ] =   me[10] * me[5] - me[6] * me[9];\n        te[ 1 ] = - me[10] * me[1] + me[2] * me[9];\n        te[ 2 ] =   me[6] * me[1] - me[2] * me[5];\n        te[ 3 ] = - me[10] * me[4] + me[6] * me[8];\n        te[ 4 ] =   me[10] * me[0] - me[2] * me[8];\n        te[ 5 ] = - me[6] * me[0] + me[2] * me[4];\n        te[ 6 ] =   me[9] * me[4] - me[5] * me[8];\n        te[ 7 ] = - me[9] * me[0] + me[1] * me[8];\n        te[ 8 ] =   me[5] * me[0] - me[1] * me[4];\n\n        var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];\n\n        // no inverse\n\n        if ( det === 0 ) {\n\n            var msg = \"Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n            if ( throwOnInvertible || false ) {\n\n                throw new Error( msg );\n\n            } else {\n\n                console.warn( msg );\n\n            }\n\n            this.identity();\n\n            return this;\n\n        }\n\n        this.multiplyScalar( 1.0 / det );\n\n        return this;\n\n    },\n\n    transpose: function () {\n\n        var tmp, m = this.elements;\n\n        tmp = m[1]; m[1] = m[3]; m[3] = tmp;\n        tmp = m[2]; m[2] = m[6]; m[6] = tmp;\n        tmp = m[5]; m[5] = m[7]; m[7] = tmp;\n\n        return this;\n\n    },\n\n    getNormalMatrix: function ( m ) {\n\n        // input: THREE.Matrix4\n\n        this.getInverse( m ).transpose();\n\n        return this;\n\n    },\n\n    transposeIntoArray: function ( r ) {\n\n        var m = this.elements;\n\n        r[ 0 ] = m[ 0 ];\n        r[ 1 ] = m[ 3 ];\n        r[ 2 ] = m[ 6 ];\n        r[ 3 ] = m[ 1 ];\n        r[ 4 ] = m[ 4 ];\n        r[ 5 ] = m[ 7 ];\n        r[ 6 ] = m[ 2 ];\n        r[ 7 ] = m[ 5 ];\n        r[ 8 ] = m[ 8 ];\n\n        return this;\n\n    },\n\n    clone: function () {\n\n        var te = this.elements;\n\n        return new THREE.Matrix3(\n\n            te[0], te[3], te[6],\n            te[1], te[4], te[7],\n            te[2], te[5], te[8]\n\n        );\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://exocortex.com\n * @author WestLangley / http://github.com/WestLangley\n */\n\n\nTHREE.Matrix4 = function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n    this.elements = new Float32Array( 16 );\n\n    // TODO: if n11 is undefined, then just set to identity, otherwise copy all other values into matrix\n    //   we should not support semi specification of Matrix4, it is just weird.\n\n    var te = this.elements;\n\n    te[0] = ( n11 !== undefined ) ? n11 : 1; te[4] = n12 || 0; te[8] = n13 || 0; te[12] = n14 || 0;\n    te[1] = n21 || 0; te[5] = ( n22 !== undefined ) ? n22 : 1; te[9] = n23 || 0; te[13] = n24 || 0;\n    te[2] = n31 || 0; te[6] = n32 || 0; te[10] = ( n33 !== undefined ) ? n33 : 1; te[14] = n34 || 0;\n    te[3] = n41 || 0; te[7] = n42 || 0; te[11] = n43 || 0; te[15] = ( n44 !== undefined ) ? n44 : 1;\n\n};\n\nTHREE.Matrix4.prototype = {\n\n    constructor: THREE.Matrix4,\n\n    set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n        var te = this.elements;\n\n        te[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;\n        te[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;\n        te[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;\n        te[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;\n\n        return this;\n\n    },\n\n    identity: function () {\n\n        this.set(\n\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n\n        );\n\n        return this;\n\n    },\n\n    copy: function ( m ) {\n\n        this.elements.set( m.elements );\n\n        return this;\n\n    },\n\n    extractPosition: function ( m ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .extractPosition() has been renamed to .copyPosition().' );\n        return this.copyPosition( m );\n\n    },\n\n    copyPosition: function ( m ) {\n\n        var te = this.elements;\n        var me = m.elements;\n\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n\n        return this;\n\n    },\n\n    extractRotation: function () {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( m ) {\n\n            var te = this.elements;\n            var me = m.elements;\n\n            var scaleX = 1 / v1.set( me[0], me[1], me[2] ).length();\n            var scaleY = 1 / v1.set( me[4], me[5], me[6] ).length();\n            var scaleZ = 1 / v1.set( me[8], me[9], me[10] ).length();\n\n            te[0] = me[0] * scaleX;\n            te[1] = me[1] * scaleX;\n            te[2] = me[2] * scaleX;\n\n            te[4] = me[4] * scaleY;\n            te[5] = me[5] * scaleY;\n            te[6] = me[6] * scaleY;\n\n            te[8] = me[8] * scaleZ;\n            te[9] = me[9] * scaleZ;\n            te[10] = me[10] * scaleZ;\n\n            return this;\n\n        };\n\n    }(),\n\n    makeRotationFromEuler: function ( euler ) {\n\n        if ( euler instanceof THREE.Euler === false ) {\n\n            console.error( 'ERROR: Matrix\\'s .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );\n\n        }\n\n        var te = this.elements;\n\n        var x = euler.x, y = euler.y, z = euler.z;\n        var a = Math.cos( x ), b = Math.sin( x );\n        var c = Math.cos( y ), d = Math.sin( y );\n        var e = Math.cos( z ), f = Math.sin( z );\n\n        if ( euler.order === 'XYZ' ) {\n\n            var ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n            te[0] = c * e;\n            te[4] = - c * f;\n            te[8] = d;\n\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = - b * c;\n\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n\n        } else if ( euler.order === 'YXZ' ) {\n\n            var ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = - b;\n\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n\n        } else if ( euler.order === 'ZXY' ) {\n\n            var ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n            te[0] = ce - df * b;\n            te[4] = - a * f;\n            te[8] = de + cf * b;\n\n            te[1] = cf + de * b;\n            te[5] = a * e;\n            te[9] = df - ce * b;\n\n            te[2] = - a * d;\n            te[6] = b;\n            te[10] = a * c;\n\n        } else if ( euler.order === 'ZYX' ) {\n\n            var ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n            te[0] = c * e;\n            te[4] = be * d - af;\n            te[8] = ae * d + bf;\n\n            te[1] = c * f;\n            te[5] = bf * d + ae;\n            te[9] = af * d - be;\n\n            te[2] = - d;\n            te[6] = b * c;\n            te[10] = a * c;\n\n        } else if ( euler.order === 'YZX' ) {\n\n            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = - b * e;\n\n            te[2] = - d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n\n        } else if ( euler.order === 'XZY' ) {\n\n            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n            te[0] = c * e;\n            te[4] = - f;\n            te[8] = d * e;\n\n            te[1] = ac * f + bd;\n            te[5] = a * e;\n            te[9] = ad * f - bc;\n\n            te[2] = bc * f - ad;\n            te[6] = b * e;\n            te[10] = bd * f + ac;\n\n        }\n\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n\n        return this;\n\n    },\n\n    setRotationFromQuaternion: function ( q ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .setRotationFromQuaternion() has been deprecated in favor of makeRotationFromQuaternion.  Please update your code.' );\n\n        return this.makeRotationFromQuaternion( q );\n\n    },\n\n    makeRotationFromQuaternion: function ( q ) {\n\n        var te = this.elements;\n\n        var x = q.x, y = q.y, z = q.z, w = q.w;\n        var x2 = x + x, y2 = y + y, z2 = z + z;\n        var xx = x * x2, xy = x * y2, xz = x * z2;\n        var yy = y * y2, yz = y * z2, zz = z * z2;\n        var wx = w * x2, wy = w * y2, wz = w * z2;\n\n        te[0] = 1 - ( yy + zz );\n        te[4] = xy - wz;\n        te[8] = xz + wy;\n\n        te[1] = xy + wz;\n        te[5] = 1 - ( xx + zz );\n        te[9] = yz - wx;\n\n        te[2] = xz - wy;\n        te[6] = yz + wx;\n        te[10] = 1 - ( xx + yy );\n\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n\n        return this;\n\n    },\n\n    lookAt: function() {\n\n        var x = new THREE.Vector3();\n        var y = new THREE.Vector3();\n        var z = new THREE.Vector3();\n\n        return function ( eye, target, up ) {\n\n            var te = this.elements;\n\n            z.subVectors( eye, target ).normalize();\n\n            if ( z.length() === 0 ) {\n\n                z.z = 1;\n\n            }\n\n            x.crossVectors( up, z ).normalize();\n\n            if ( x.length() === 0 ) {\n\n                z.x += 0.0001;\n                x.crossVectors( up, z ).normalize();\n\n            }\n\n            y.crossVectors( z, x );\n\n\n            te[0] = x.x; te[4] = y.x; te[8] = z.x;\n            te[1] = x.y; te[5] = y.y; te[9] = z.y;\n            te[2] = x.z; te[6] = y.z; te[10] = z.z;\n\n            return this;\n\n        };\n\n    }(),\n\n    multiply: function ( m, n ) {\n\n        if ( n !== undefined ) {\n\n            console.warn( 'DEPRECATED: Matrix4\\'s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n            return this.multiplyMatrices( m, n );\n\n        }\n\n        return this.multiplyMatrices( this, m );\n\n    },\n\n    multiplyMatrices: function ( a, b ) {\n\n        var ae = a.elements;\n        var be = b.elements;\n        var te = this.elements;\n\n        var a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];\n        var a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];\n        var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];\n        var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];\n\n        var b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];\n        var b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];\n        var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];\n        var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];\n\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n        return this;\n\n    },\n\n    multiplyToArray: function ( a, b, r ) {\n\n        var te = this.elements;\n\n        this.multiplyMatrices( a, b );\n\n        r[ 0 ] = te[0]; r[ 1 ] = te[1]; r[ 2 ] = te[2]; r[ 3 ] = te[3];\n        r[ 4 ] = te[4]; r[ 5 ] = te[5]; r[ 6 ] = te[6]; r[ 7 ] = te[7];\n        r[ 8 ]  = te[8]; r[ 9 ]  = te[9]; r[ 10 ] = te[10]; r[ 11 ] = te[11];\n        r[ 12 ] = te[12]; r[ 13 ] = te[13]; r[ 14 ] = te[14]; r[ 15 ] = te[15];\n\n        return this;\n\n    },\n\n    multiplyScalar: function ( s ) {\n\n        var te = this.elements;\n\n        te[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;\n        te[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;\n        te[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;\n        te[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;\n\n        return this;\n\n    },\n\n    multiplyVector3: function ( vector ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n        return vector.applyProjection( this );\n\n    },\n\n    multiplyVector4: function ( vector ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n        return vector.applyMatrix4( this );\n\n    },\n\n    multiplyVector3Array: function() {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( a ) {\n\n            for ( var i = 0, il = a.length; i < il; i += 3 ) {\n\n                v1.x = a[ i ];\n                v1.y = a[ i + 1 ];\n                v1.z = a[ i + 2 ];\n\n                v1.applyProjection( this );\n\n                a[ i ]     = v1.x;\n                a[ i + 1 ] = v1.y;\n                a[ i + 2 ] = v1.z;\n\n            }\n\n            return a;\n\n        };\n\n    }(),\n\n    rotateAxis: function ( v ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\n        v.transformDirection( this );\n\n    },\n\n    crossVector: function ( vector ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n        return vector.applyMatrix4( this );\n\n    },\n\n    determinant: function () {\n\n        var te = this.elements;\n\n        var n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];\n        var n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];\n        var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];\n        var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];\n\n        //TODO: make this more efficient\n        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n        return (\n            n41 * (\n                +n14 * n23 * n32\n                    -n13 * n24 * n32\n                    -n14 * n22 * n33\n                    +n12 * n24 * n33\n                    +n13 * n22 * n34\n                    -n12 * n23 * n34\n                ) +\n                n42 * (\n                    +n11 * n23 * n34\n                        -n11 * n24 * n33\n                        +n14 * n21 * n33\n                        -n13 * n21 * n34\n                        +n13 * n24 * n31\n                        -n14 * n23 * n31\n                    ) +\n                n43 * (\n                    +n11 * n24 * n32\n                        -n11 * n22 * n34\n                        -n14 * n21 * n32\n                        +n12 * n21 * n34\n                        +n14 * n22 * n31\n                        -n12 * n24 * n31\n                    ) +\n                n44 * (\n                    -n13 * n22 * n31\n                        -n11 * n23 * n32\n                        +n11 * n22 * n33\n                        +n13 * n21 * n32\n                        -n12 * n21 * n33\n                        +n12 * n23 * n31\n                    )\n\n            );\n\n    },\n\n    transpose: function () {\n\n        var te = this.elements;\n        var tmp;\n\n        tmp = te[1]; te[1] = te[4]; te[4] = tmp;\n        tmp = te[2]; te[2] = te[8]; te[8] = tmp;\n        tmp = te[6]; te[6] = te[9]; te[9] = tmp;\n\n        tmp = te[3]; te[3] = te[12]; te[12] = tmp;\n        tmp = te[7]; te[7] = te[13]; te[13] = tmp;\n        tmp = te[11]; te[11] = te[14]; te[14] = tmp;\n\n        return this;\n\n    },\n\n    flattenToArray: function ( flat ) {\n\n        var te = this.elements;\n        flat[ 0 ] = te[0]; flat[ 1 ] = te[1]; flat[ 2 ] = te[2]; flat[ 3 ] = te[3];\n        flat[ 4 ] = te[4]; flat[ 5 ] = te[5]; flat[ 6 ] = te[6]; flat[ 7 ] = te[7];\n        flat[ 8 ] = te[8]; flat[ 9 ] = te[9]; flat[ 10 ] = te[10]; flat[ 11 ] = te[11];\n        flat[ 12 ] = te[12]; flat[ 13 ] = te[13]; flat[ 14 ] = te[14]; flat[ 15 ] = te[15];\n\n        return flat;\n\n    },\n\n    flattenToArrayOffset: function( flat, offset ) {\n\n        var te = this.elements;\n        flat[ offset ] = te[0];\n        flat[ offset + 1 ] = te[1];\n        flat[ offset + 2 ] = te[2];\n        flat[ offset + 3 ] = te[3];\n\n        flat[ offset + 4 ] = te[4];\n        flat[ offset + 5 ] = te[5];\n        flat[ offset + 6 ] = te[6];\n        flat[ offset + 7 ] = te[7];\n\n        flat[ offset + 8 ]  = te[8];\n        flat[ offset + 9 ]  = te[9];\n        flat[ offset + 10 ] = te[10];\n        flat[ offset + 11 ] = te[11];\n\n        flat[ offset + 12 ] = te[12];\n        flat[ offset + 13 ] = te[13];\n        flat[ offset + 14 ] = te[14];\n        flat[ offset + 15 ] = te[15];\n\n        return flat;\n\n    },\n\n    getPosition: function() {\n\n        var v1 = new THREE.Vector3();\n\n        return function () {\n\n            console.warn( 'DEPRECATED: Matrix4\\'s .getPosition() has been removed. Use Vector3.getPositionFromMatrix( matrix ) instead.' );\n\n            var te = this.elements;\n            return v1.set( te[12], te[13], te[14] );\n\n        };\n\n    }(),\n\n    setPosition: function ( v ) {\n\n        var te = this.elements;\n\n        te[12] = v.x;\n        te[13] = v.y;\n        te[14] = v.z;\n\n        return this;\n\n    },\n\n    getInverse: function ( m, throwOnInvertible ) {\n\n        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n        var te = this.elements;\n        var me = m.elements;\n\n        var n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];\n        var n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];\n        var n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];\n        var n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];\n\n        te[0] = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;\n        te[4] = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;\n        te[8] = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;\n        te[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;\n        te[1] = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;\n        te[5] = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;\n        te[9] = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;\n        te[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;\n        te[2] = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;\n        te[6] = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;\n        te[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;\n        te[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;\n        te[3] = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;\n        te[7] = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;\n        te[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;\n        te[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;\n\n        var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];\n\n        if ( det == 0 ) {\n\n            var msg = \"Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n            if ( throwOnInvertible || false ) {\n\n                throw new Error( msg );\n\n            } else {\n\n                console.warn( msg );\n\n            }\n\n            this.identity();\n\n            return this;\n        }\n\n        this.multiplyScalar( 1 / det );\n\n        return this;\n\n    },\n\n    translate: function ( v ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .translate() has been removed.');\n\n    },\n\n    rotateX: function ( angle ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .rotateX() has been removed.');\n\n    },\n\n    rotateY: function ( angle ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .rotateY() has been removed.');\n\n    },\n\n    rotateZ: function ( angle ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .rotateZ() has been removed.');\n\n    },\n\n    rotateByAxis: function ( axis, angle ) {\n\n        console.warn( 'DEPRECATED: Matrix4\\'s .rotateByAxis() has been removed.');\n\n    },\n\n    scale: function ( v ) {\n\n        var te = this.elements;\n        var x = v.x, y = v.y, z = v.z;\n\n        te[0] *= x; te[4] *= y; te[8] *= z;\n        te[1] *= x; te[5] *= y; te[9] *= z;\n        te[2] *= x; te[6] *= y; te[10] *= z;\n        te[3] *= x; te[7] *= y; te[11] *= z;\n\n        return this;\n\n    },\n\n    getMaxScaleOnAxis: function () {\n\n        var te = this.elements;\n\n        var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n        var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n        var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\n        return Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );\n\n    },\n\n    makeTranslation: function ( x, y, z ) {\n\n        this.set(\n\n            1, 0, 0, x,\n            0, 1, 0, y,\n            0, 0, 1, z,\n            0, 0, 0, 1\n\n        );\n\n        return this;\n\n    },\n\n    makeRotationX: function ( theta ) {\n\n        var c = Math.cos( theta ), s = Math.sin( theta );\n\n        this.set(\n\n            1, 0,  0, 0,\n            0, c, -s, 0,\n            0, s,  c, 0,\n            0, 0,  0, 1\n\n        );\n\n        return this;\n\n    },\n\n    makeRotationY: function ( theta ) {\n\n        var c = Math.cos( theta ), s = Math.sin( theta );\n\n        this.set(\n\n            c, 0, s, 0,\n            0, 1, 0, 0,\n            -s, 0, c, 0,\n            0, 0, 0, 1\n\n        );\n\n        return this;\n\n    },\n\n    makeRotationZ: function ( theta ) {\n\n        var c = Math.cos( theta ), s = Math.sin( theta );\n\n        this.set(\n\n            c, -s, 0, 0,\n            s,  c, 0, 0,\n            0,  0, 1, 0,\n            0,  0, 0, 1\n\n        );\n\n        return this;\n\n    },\n\n    makeRotationAxis: function ( axis, angle ) {\n\n        // Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n        var c = Math.cos( angle );\n        var s = Math.sin( angle );\n        var t = 1 - c;\n        var x = axis.x, y = axis.y, z = axis.z;\n        var tx = t * x, ty = t * y;\n\n        this.set(\n\n            tx * x + c, tx * y - s * z, tx * z + s * y, 0,\n            tx * y + s * z, ty * y + c, ty * z - s * x, 0,\n            tx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n            0, 0, 0, 1\n\n        );\n\n        return this;\n\n    },\n\n    makeScale: function ( x, y, z ) {\n\n        this.set(\n\n            x, 0, 0, 0,\n            0, y, 0, 0,\n            0, 0, z, 0,\n            0, 0, 0, 1\n\n        );\n\n        return this;\n\n    },\n\n    compose: function ( position, quaternion, scale ) {\n\n        this.makeRotationFromQuaternion( quaternion );\n        this.scale( scale );\n        this.setPosition( position );\n\n        return this;\n\n    },\n\n    decompose: function () {\n\n        var vector = new THREE.Vector3();\n        var matrix = new THREE.Matrix4();\n\n        return function ( position, quaternion, scale ) {\n\n            var te = this.elements;\n\n            var sx = vector.set( te[0], te[1], te[2] ).length();\n            var sy = vector.set( te[4], te[5], te[6] ).length();\n            var sz = vector.set( te[8], te[9], te[10] ).length();\n\n            position.x = te[12];\n            position.y = te[13];\n            position.z = te[14];\n\n            // scale the rotation part\n\n            matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n            var invSX = 1 / sx;\n            var invSY = 1 / sy;\n            var invSZ = 1 / sz;\n\n            matrix.elements[0] *= invSX;\n            matrix.elements[1] *= invSX;\n            matrix.elements[2] *= invSX;\n\n            matrix.elements[4] *= invSY;\n            matrix.elements[5] *= invSY;\n            matrix.elements[6] *= invSY;\n\n            matrix.elements[8] *= invSZ;\n            matrix.elements[9] *= invSZ;\n            matrix.elements[10] *= invSZ;\n\n            quaternion.setFromRotationMatrix( matrix );\n\n            scale.x = sx;\n            scale.y = sy;\n            scale.z = sz;\n\n            return this;\n\n        };\n\n    }(),\n\n    makeFrustum: function ( left, right, bottom, top, near, far ) {\n\n        var te = this.elements;\n        var x = 2 * near / ( right - left );\n        var y = 2 * near / ( top - bottom );\n\n        var a = ( right + left ) / ( right - left );\n        var b = ( top + bottom ) / ( top - bottom );\n        var c = - ( far + near ) / ( far - near );\n        var d = - 2 * far * near / ( far - near );\n\n        te[0] = x;\tte[4] = 0;\tte[8] = a;\tte[12] = 0;\n        te[1] = 0;\tte[5] = y;\tte[9] = b;\tte[13] = 0;\n        te[2] = 0;\tte[6] = 0;\tte[10] = c;\tte[14] = d;\n        te[3] = 0;\tte[7] = 0;\tte[11] = - 1;\tte[15] = 0;\n\n        return this;\n\n    },\n\n    makePerspective: function ( fov, aspect, near, far ) {\n\n        var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\n        var ymin = - ymax;\n        var xmin = ymin * aspect;\n        var xmax = ymax * aspect;\n\n        return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n    },\n\n    makeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n        var te = this.elements;\n        var w = right - left;\n        var h = top - bottom;\n        var p = far - near;\n\n        var x = ( right + left ) / w;\n        var y = ( top + bottom ) / h;\n        var z = ( far + near ) / p;\n\n        te[0] = 2 / w;\tte[4] = 0;\tte[8] = 0;\tte[12] = -x;\n        te[1] = 0;\tte[5] = 2 / h;\tte[9] = 0;\tte[13] = -y;\n        te[2] = 0;\tte[6] = 0;\tte[10] = -2/p;\tte[14] = -z;\n        te[3] = 0;\tte[7] = 0;\tte[11] = 0;\tte[15] = 1;\n\n        return this;\n\n    },\n\n    fromArray: function ( array ) {\n\n        this.elements.set( array );\n\n        return this;\n\n    },\n\n    toArray: function () {\n\n        var te = this.elements;\n\n        return [\n            te[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],\n            te[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],\n            te[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],\n            te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\n        ];\n\n    },\n\n    clone: function () {\n\n        var te = this.elements;\n\n        return new THREE.Matrix4(\n\n            te[0], te[4], te[8], te[12],\n            te[1], te[5], te[9], te[13],\n            te[2], te[6], te[10], te[14],\n            te[3], te[7], te[11], te[15]\n\n        );\n\n    }\n\n};\n\n/**\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Ray = function ( origin, direction ) {\n\n    this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n    this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\n};\n\nTHREE.Ray.prototype = {\n\n    constructor: THREE.Ray,\n\n    set: function ( origin, direction ) {\n\n        this.origin.copy( origin );\n        this.direction.copy( direction );\n\n        return this;\n\n    },\n\n    copy: function ( ray ) {\n\n        this.origin.copy( ray.origin );\n        this.direction.copy( ray.direction );\n\n        return this;\n\n    },\n\n    at: function ( t, optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n\n        return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n    },\n\n    recast: function () {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( t ) {\n\n            this.origin.copy( this.at( t, v1 ) );\n\n            return this;\n\n        };\n\n    }(),\n\n    closestPointToPoint: function ( point, optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n        result.subVectors( point, this.origin );\n        var directionDistance = result.dot( this.direction );\n\n        if ( directionDistance < 0 ) {\n\n            return result.copy( this.origin );\n\n        }\n\n        return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n    },\n\n    distanceToPoint: function () {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( point ) {\n\n            var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n            // point behind the ray\n\n            if ( directionDistance < 0 ) {\n\n                return this.origin.distanceTo( point );\n\n            }\n\n            v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n            return v1.distanceTo( point );\n\n        };\n\n    }(),\n\n    distanceSqToSegment: function( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n        // from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp\n        // It returns the min distance between the ray and the segment\n        // defined by v0 and v1\n        // It can also set two optional targets :\n        // - The closest point on the ray\n        // - The closest point on the segment\n\n        var segCenter = v0.clone().add( v1 ).multiplyScalar( 0.5 );\n        var segDir = v1.clone().sub( v0 ).normalize();\n        var segExtent = v0.distanceTo( v1 ) * 0.5;\n        var diff = this.origin.clone().sub( segCenter );\n        var a01 = - this.direction.dot( segDir );\n        var b0 = diff.dot( this.direction );\n        var b1 = - diff.dot( segDir );\n        var c = diff.lengthSq();\n        var det = Math.abs( 1 - a01 * a01 );\n        var s0, s1, sqrDist, extDet;\n\n        if ( det >= 0 ) {\n\n            // The ray and segment are not parallel.\n\n            s0 = a01 * b1 - b0;\n            s1 = a01 * b0 - b1;\n            extDet = segExtent * det;\n\n            if ( s0 >= 0 ) {\n\n                if ( s1 >= - extDet ) {\n\n                    if ( s1 <= extDet ) {\n\n                        // region 0\n                        // Minimum at interior points of ray and segment.\n\n                        var invDet = 1 / det;\n                        s0 *= invDet;\n                        s1 *= invDet;\n                        sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n                    } else {\n\n                        // region 1\n\n                        s1 = segExtent;\n                        s0 = Math.max( 0, - ( a01 * s1 + b0) );\n                        sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n                    }\n\n                } else {\n\n                    // region 5\n\n                    s1 = - segExtent;\n                    s0 = Math.max( 0, - ( a01 * s1 + b0) );\n                    sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n                }\n\n            } else {\n\n                if ( s1 <= - extDet) {\n\n                    // region 4\n\n                    s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n                    s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n                    sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n                } else if ( s1 <= extDet ) {\n\n                    // region 3\n\n                    s0 = 0;\n                    s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n                    sqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n                } else {\n\n                    // region 2\n\n                    s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n                    s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n                    sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n                }\n\n            }\n\n        } else {\n\n            // Ray and segment are parallel.\n\n            s1 = ( a01 > 0 ) ? - segExtent : segExtent;\n            s0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n            sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n        }\n\n        if ( optionalPointOnRay ) {\n\n            optionalPointOnRay.copy( this.direction.clone().multiplyScalar( s0 ).add( this.origin ) );\n\n        }\n\n        if ( optionalPointOnSegment ) {\n\n            optionalPointOnSegment.copy( segDir.clone().multiplyScalar( s1 ).add( segCenter ) );\n\n        }\n\n        return sqrDist;\n\n    },\n\n    isIntersectionSphere: function ( sphere ) {\n\n        return this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n    },\n\n    isIntersectionPlane: function ( plane ) {\n\n        // check if the ray lies on the plane first\n\n        var distToPoint = plane.distanceToPoint( this.origin );\n\n        if ( distToPoint === 0 ) {\n\n            return true;\n\n        }\n\n        var denominator = plane.normal.dot( this.direction );\n\n        if ( denominator * distToPoint < 0 ) {\n\n            return true\n\n        }\n\n        // ray origin is behind the plane (and is pointing behind it)\n\n        return false;\n\n    },\n\n    distanceToPlane: function ( plane ) {\n\n        var denominator = plane.normal.dot( this.direction );\n        if ( denominator == 0 ) {\n\n            // line is coplanar, return origin\n            if( plane.distanceToPoint( this.origin ) == 0 ) {\n\n                return 0;\n\n            }\n\n            // Null is preferable to undefined since undefined means.... it is undefined\n\n            return null;\n\n        }\n\n        var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n        // Return if the ray never intersects the plane\n\n        return t >= 0 ? t :  null;\n\n    },\n\n    intersectPlane: function ( plane, optionalTarget ) {\n\n        var t = this.distanceToPlane( plane );\n\n        if ( t === null ) {\n\n            return null;\n        }\n\n        return this.at( t, optionalTarget );\n\n    },\n\n    isIntersectionBox: function () {\n\n        var v = new THREE.Vector3();\n\n        return function ( box ) {\n\n            return this.intersectBox( box, v ) !== null;\n\n        }\n\n    }(),\n\n    intersectBox: function ( box , optionalTarget ) {\n\n        // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/\n\n        var tmin,tmax,tymin,tymax,tzmin,tzmax;\n\n        var invdirx = 1/this.direction.x,\n            invdiry = 1/this.direction.y,\n            invdirz = 1/this.direction.z;\n\n        var origin = this.origin;\n\n        if (invdirx >= 0) {\n\n            tmin = (box.min.x - origin.x) * invdirx;\n            tmax = (box.max.x - origin.x) * invdirx;\n\n        } else {\n\n            tmin = (box.max.x - origin.x) * invdirx;\n            tmax = (box.min.x - origin.x) * invdirx;\n        }\n\n        if (invdiry >= 0) {\n\n            tymin = (box.min.y - origin.y) * invdiry;\n            tymax = (box.max.y - origin.y) * invdiry;\n\n        } else {\n\n            tymin = (box.max.y - origin.y) * invdiry;\n            tymax = (box.min.y - origin.y) * invdiry;\n        }\n\n        if ((tmin > tymax) || (tymin > tmax)) return null;\n\n        // These lines also handle the case where tmin or tmax is NaN\n        // (result of 0 * Infinity). x !== x returns true if x is NaN\n\n        if (tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n        if (tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n        if (invdirz >= 0) {\n\n            tzmin = (box.min.z - origin.z) * invdirz;\n            tzmax = (box.max.z - origin.z) * invdirz;\n\n        } else {\n\n            tzmin = (box.max.z - origin.z) * invdirz;\n            tzmax = (box.min.z - origin.z) * invdirz;\n        }\n\n        if ((tmin > tzmax) || (tzmin > tmax)) return null;\n\n        if (tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n        if (tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n        //return point closest to the ray (positive side)\n\n        if ( tmax < 0 ) return null;\n\n        return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n    },\n\n    intersectTriangle: function() {\n\n        // Compute the offset origin, edges, and normal.\n        var diff = new THREE.Vector3();\n        var edge1 = new THREE.Vector3();\n        var edge2 = new THREE.Vector3();\n        var normal = new THREE.Vector3();\n\n        return function ( a, b, c, backfaceCulling, optionalTarget ) {\n\n            // from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp\n\n            edge1.subVectors( b, a );\n            edge2.subVectors( c, a );\n            normal.crossVectors( edge1, edge2 );\n\n            // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n            // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n            //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n            //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n            //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n            var DdN = this.direction.dot( normal );\n            var sign;\n\n            if ( DdN > 0 ) {\n\n                if ( backfaceCulling ) return null;\n                sign = 1;\n\n            } else if ( DdN < 0 ) {\n\n                sign = - 1;\n                DdN = - DdN;\n\n            } else {\n\n                return null;\n\n            }\n\n            diff.subVectors( this.origin, a );\n            var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n            // b1 < 0, no intersection\n            if ( DdQxE2 < 0 ) {\n\n                return null;\n\n            }\n\n            var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n            // b2 < 0, no intersection\n            if ( DdE1xQ < 0 ) {\n\n                return null;\n\n            }\n\n            // b1+b2 > 1, no intersection\n            if ( DdQxE2 + DdE1xQ > DdN ) {\n\n                return null;\n\n            }\n\n            // Line intersects triangle, check if ray does.\n            var QdN = - sign * diff.dot( normal );\n\n            // t < 0, no intersection\n            if ( QdN < 0 ) {\n\n                return null;\n\n            }\n\n            // Ray intersects triangle.\n            return this.at( QdN / DdN, optionalTarget );\n\n        }\n\n    }(),\n\n    applyMatrix4: function ( matrix4 ) {\n\n        this.direction.add( this.origin ).applyMatrix4( matrix4 );\n        this.origin.applyMatrix4( matrix4 );\n        this.direction.sub( this.origin );\n        this.direction.normalize();\n\n        return this;\n    },\n\n    equals: function ( ray ) {\n\n        return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n    },\n\n    clone: function () {\n\n        return new THREE.Ray().copy( this );\n\n    }\n\n};\n\n/**\n * @author bhouston / http://exocortex.com\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Sphere = function ( center, radius ) {\n\n    this.center = ( center !== undefined ) ? center : new THREE.Vector3();\n    this.radius = ( radius !== undefined ) ? radius : 0;\n\n};\n\nTHREE.Sphere.prototype = {\n\n    constructor: THREE.Sphere,\n\n    set: function ( center, radius ) {\n\n        this.center.copy( center );\n        this.radius = radius;\n\n        return this;\n    },\n\n\n    setFromPoints: function () {\n\n        var box = new THREE.Box3();\n\n        return function ( points, optionalCenter )  {\n\n            var center = this.center;\n\n            if ( optionalCenter !== undefined ) {\n\n                center.copy( optionalCenter );\n\n            } else {\n\n                box.setFromPoints( points ).center( center );\n\n            }\n\n            var maxRadiusSq = 0;\n\n            for ( var i = 0, il = points.length; i < il; i ++ ) {\n\n                maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n            }\n\n            this.radius = Math.sqrt( maxRadiusSq );\n\n            return this;\n\n        };\n\n    }(),\n\n    copy: function ( sphere ) {\n\n        this.center.copy( sphere.center );\n        this.radius = sphere.radius;\n\n        return this;\n\n    },\n\n    empty: function () {\n\n        return ( this.radius <= 0 );\n\n    },\n\n    containsPoint: function ( point ) {\n\n        return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n    },\n\n    distanceToPoint: function ( point ) {\n\n        return ( point.distanceTo( this.center ) - this.radius );\n\n    },\n\n    intersectsSphere: function ( sphere ) {\n\n        var radiusSum = this.radius + sphere.radius;\n\n        return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n    },\n\n    clampPoint: function ( point, optionalTarget ) {\n\n        var deltaLengthSq = this.center.distanceToSquared( point );\n\n        var result = optionalTarget || new THREE.Vector3();\n        result.copy( point );\n\n        if ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n            result.sub( this.center ).normalize();\n            result.multiplyScalar( this.radius ).add( this.center );\n\n        }\n\n        return result;\n\n    },\n\n    getBoundingBox: function ( optionalTarget ) {\n\n        var box = optionalTarget || new THREE.Box3();\n\n        box.set( this.center, this.center );\n        box.expandByScalar( this.radius );\n\n        return box;\n\n    },\n\n    applyMatrix4: function ( matrix ) {\n\n        this.center.applyMatrix4( matrix );\n        this.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n        return this;\n\n    },\n\n    translate: function ( offset ) {\n\n        this.center.add( offset );\n\n        return this;\n\n    },\n\n    equals: function ( sphere ) {\n\n        return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n    },\n\n    clone: function () {\n\n        return new THREE.Sphere().copy( this );\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\n    this.planes = [\n\n        ( p0 !== undefined ) ? p0 : new THREE.Plane(),\n        ( p1 !== undefined ) ? p1 : new THREE.Plane(),\n        ( p2 !== undefined ) ? p2 : new THREE.Plane(),\n        ( p3 !== undefined ) ? p3 : new THREE.Plane(),\n        ( p4 !== undefined ) ? p4 : new THREE.Plane(),\n        ( p5 !== undefined ) ? p5 : new THREE.Plane()\n\n    ];\n\n};\n\nTHREE.Frustum.prototype = {\n\n    constructor: THREE.Frustum,\n\n    set: function ( p0, p1, p2, p3, p4, p5 ) {\n\n        var planes = this.planes;\n\n        planes[0].copy( p0 );\n        planes[1].copy( p1 );\n        planes[2].copy( p2 );\n        planes[3].copy( p3 );\n        planes[4].copy( p4 );\n        planes[5].copy( p5 );\n\n        return this;\n\n    },\n\n    copy: function ( frustum ) {\n\n        var planes = this.planes;\n\n        for( var i = 0; i < 6; i ++ ) {\n\n            planes[i].copy( frustum.planes[i] );\n\n        }\n\n        return this;\n\n    },\n\n    setFromMatrix: function ( m ) {\n\n        var planes = this.planes;\n        var me = m.elements;\n        var me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];\n        var me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];\n        var me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];\n        var me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];\n\n        planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n        planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n        planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n        planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n        planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n        planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n        return this;\n\n    },\n\n    intersectsObject: function () {\n\n        var sphere = new THREE.Sphere();\n\n        return function ( object ) {\n\n            var geometry = object.geometry;\n\n            if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n            sphere.copy( geometry.boundingSphere );\n            sphere.applyMatrix4( object.matrixWorld );\n\n            return this.intersectsSphere( sphere );\n\n        };\n\n    }(),\n\n    intersectsSphere: function ( sphere ) {\n\n        var planes = this.planes;\n        var center = sphere.center;\n        var negRadius = -sphere.radius;\n\n        for ( var i = 0; i < 6; i ++ ) {\n\n            var distance = planes[ i ].distanceToPoint( center );\n\n            if ( distance < negRadius ) {\n\n                return false;\n\n            }\n\n        }\n\n        return true;\n\n    },\n\n    intersectsBox : function() {\n\n        var p1 = new THREE.Vector3(),\n            p2 = new THREE.Vector3();\n\n        return function( box ) {\n\n            var planes = this.planes;\n\n            for ( var i = 0; i < 6 ; i ++ ) {\n\n                var plane = planes[i];\n\n                p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n                p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n                p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n                p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n                p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n                p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n                var d1 = plane.distanceToPoint( p1 );\n                var d2 = plane.distanceToPoint( p2 );\n\n                // if both outside plane, no intersection\n\n                if ( d1 < 0 && d2 < 0 ) {\n\n                    return false;\n\n                }\n            }\n\n            return true;\n        };\n\n    }(),\n\n\n    containsPoint: function ( point ) {\n\n        var planes = this.planes;\n\n        for ( var i = 0; i < 6; i ++ ) {\n\n            if ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n                return false;\n\n            }\n\n        }\n\n        return true;\n\n    },\n\n    clone: function () {\n\n        return new THREE.Frustum().copy( this );\n\n    }\n\n};\n\n/**\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Plane = function ( normal, constant ) {\n\n    this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n    this.constant = ( constant !== undefined ) ? constant : 0;\n\n};\n\nTHREE.Plane.prototype = {\n\n    constructor: THREE.Plane,\n\n    set: function ( normal, constant ) {\n\n        this.normal.copy( normal );\n        this.constant = constant;\n\n        return this;\n\n    },\n\n    setComponents: function ( x, y, z, w ) {\n\n        this.normal.set( x, y, z );\n        this.constant = w;\n\n        return this;\n\n    },\n\n    setFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n        this.normal.copy( normal );\n        this.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n        return this;\n\n    },\n\n    setFromCoplanarPoints: function() {\n\n        var v1 = new THREE.Vector3();\n        var v2 = new THREE.Vector3();\n\n        return function ( a, b, c ) {\n\n            var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n            // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n            this.setFromNormalAndCoplanarPoint( normal, a );\n\n            return this;\n\n        };\n\n    }(),\n\n\n    copy: function ( plane ) {\n\n        this.normal.copy( plane.normal );\n        this.constant = plane.constant;\n\n        return this;\n\n    },\n\n    normalize: function () {\n\n        // Note: will lead to a divide by zero if the plane is invalid.\n\n        var inverseNormalLength = 1.0 / this.normal.length();\n        this.normal.multiplyScalar( inverseNormalLength );\n        this.constant *= inverseNormalLength;\n\n        return this;\n\n    },\n\n    negate: function () {\n\n        this.constant *= -1;\n        this.normal.negate();\n\n        return this;\n\n    },\n\n    distanceToPoint: function ( point ) {\n\n        return this.normal.dot( point ) + this.constant;\n\n    },\n\n    distanceToSphere: function ( sphere ) {\n\n        return this.distanceToPoint( sphere.center ) - sphere.radius;\n\n    },\n\n    projectPoint: function ( point, optionalTarget ) {\n\n        return this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n    },\n\n    orthoPoint: function ( point, optionalTarget ) {\n\n        var perpendicularMagnitude = this.distanceToPoint( point );\n\n        var result = optionalTarget || new THREE.Vector3();\n        return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n    },\n\n    isIntersectionLine: function ( line ) {\n\n        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n        var startSign = this.distanceToPoint( line.start );\n        var endSign = this.distanceToPoint( line.end );\n\n        return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n    },\n\n    intersectLine: function() {\n\n        var v1 = new THREE.Vector3();\n\n        return function ( line, optionalTarget ) {\n\n            var result = optionalTarget || new THREE.Vector3();\n\n            var direction = line.delta( v1 );\n\n            var denominator = this.normal.dot( direction );\n\n            if ( denominator == 0 ) {\n\n                // line is coplanar, return origin\n                if( this.distanceToPoint( line.start ) == 0 ) {\n\n                    return result.copy( line.start );\n\n                }\n\n                // Unsure if this is the correct method to handle this case.\n                return undefined;\n\n            }\n\n            var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n            if( t < 0 || t > 1 ) {\n\n                return undefined;\n\n            }\n\n            return result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n        };\n\n    }(),\n\n\n    coplanarPoint: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n        return result.copy( this.normal ).multiplyScalar( - this.constant );\n\n    },\n\n    applyMatrix4: function() {\n\n        var v1 = new THREE.Vector3();\n        var v2 = new THREE.Vector3();\n\n        return function ( matrix, optionalNormalMatrix ) {\n\n            // compute new normal based on theory here:\n            // http://www.songho.ca/opengl/gl_normaltransform.html\n            optionalNormalMatrix = optionalNormalMatrix || new THREE.Matrix3().getNormalMatrix( matrix );\n            var newNormal = v1.copy( this.normal ).applyMatrix3( optionalNormalMatrix );\n\n            var newCoplanarPoint = this.coplanarPoint( v2 );\n            newCoplanarPoint.applyMatrix4( matrix );\n\n            this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\n\n            return this;\n\n        };\n\n    }(),\n\n    translate: function ( offset ) {\n\n        this.constant = this.constant - offset.dot( this.normal );\n\n        return this;\n\n    },\n\n    equals: function ( plane ) {\n\n        return plane.normal.equals( this.normal ) && ( plane.constant == this.constant );\n\n    },\n\n    clone: function () {\n\n        return new THREE.Plane().copy( this );\n\n    }\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Math = {\n\n    PI2: Math.PI * 2,\n\n    generateUUID: function () {\n\n        // http://www.broofa.com/Tools/Math.uuid.htm\n\n        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n        var uuid = new Array(36);\n        var rnd = 0, r;\n\n        return function () {\n\n            for ( var i = 0; i < 36; i ++ ) {\n\n                if ( i == 8 || i == 13 || i == 18 || i == 23 ) {\n\n                    uuid[ i ] = '-';\n\n                } else if ( i == 14 ) {\n\n                    uuid[ i ] = '4';\n\n                } else {\n\n                    if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;\n                    r = rnd & 0xf;\n                    rnd = rnd >> 4;\n                    uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n\n                }\n            }\n\n            return uuid.join('');\n\n        };\n\n    }(),\n\n    // Clamp value to range <a, b>\n\n    clamp: function ( x, a, b ) {\n\n        return ( x < a ) ? a : ( ( x > b ) ? b : x );\n\n    },\n\n    // Clamp value to range <a, inf)\n\n    clampBottom: function ( x, a ) {\n\n        return x < a ? a : x;\n\n    },\n\n    // Linear mapping from range <a1, a2> to range <b1, b2>\n\n    mapLinear: function ( x, a1, a2, b1, b2 ) {\n\n        return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n    },\n\n    // http://en.wikipedia.org/wiki/Smoothstep\n\n    smoothstep: function ( x, min, max ) {\n\n        if ( x <= min ) return 0;\n        if ( x >= max ) return 1;\n\n        x = ( x - min )/( max - min );\n\n        return x*x*(3 - 2*x);\n\n    },\n\n    smootherstep: function ( x, min, max ) {\n\n        if ( x <= min ) return 0;\n        if ( x >= max ) return 1;\n\n        x = ( x - min )/( max - min );\n\n        return x*x*x*(x*(x*6 - 15) + 10);\n\n    },\n\n    // Random float from <0, 1> with 16 bits of randomness\n    // (standard Math.random() creates repetitive patterns when applied over larger space)\n\n    random16: function () {\n\n        return ( 65280 * Math.random() + 255 * Math.random() ) / 65535;\n\n    },\n\n    // Random integer from <low, high> interval\n\n    randInt: function ( low, high ) {\n\n        return low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n    },\n\n    // Random float from <low, high> interval\n\n    randFloat: function ( low, high ) {\n\n        return low + Math.random() * ( high - low );\n\n    },\n\n    // Random float from <-range/2, range/2> interval\n\n    randFloatSpread: function ( range ) {\n\n        return range * ( 0.5 - Math.random() );\n\n    },\n\n    sign: function ( x ) {\n\n        return ( x < 0 ) ? -1 : ( ( x > 0 ) ? 1 : 0 );\n\n    },\n\n    degToRad: function() {\n\n        var degreeToRadiansFactor = Math.PI / 180;\n\n        return function ( degrees ) {\n\n            return degrees * degreeToRadiansFactor;\n\n        };\n\n    }(),\n\n    radToDeg: function() {\n\n        var radianToDegreesFactor = 180 / Math.PI;\n\n        return function ( radians ) {\n\n            return radians * radianToDegreesFactor;\n\n        };\n\n    }()\n\n};\n\n/**\n * Spline from Tween.js, slightly optimized (and trashed)\n * http://sole.github.com/tween.js/examples/05_spline.html\n *\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Spline = function ( points ) {\n\n    this.points = points;\n\n    var c = [], v3 = { x: 0, y: 0, z: 0 },\n        point, intPoint, weight, w2, w3,\n        pa, pb, pc, pd;\n\n    this.initFromArray = function( a ) {\n\n        this.points = [];\n\n        for ( var i = 0; i < a.length; i++ ) {\n\n            this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n        }\n\n    };\n\n    this.getPoint = function ( k ) {\n\n        point = ( this.points.length - 1 ) * k;\n        intPoint = Math.floor( point );\n        weight = point - intPoint;\n\n        c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n        c[ 1 ] = intPoint;\n        c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n        c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n        pa = this.points[ c[ 0 ] ];\n        pb = this.points[ c[ 1 ] ];\n        pc = this.points[ c[ 2 ] ];\n        pd = this.points[ c[ 3 ] ];\n\n        w2 = weight * weight;\n        w3 = weight * w2;\n\n        v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n        v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n        v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n        return v3;\n\n    };\n\n    this.getControlPointsArray = function () {\n\n        var i, p, l = this.points.length,\n            coords = [];\n\n        for ( i = 0; i < l; i ++ ) {\n\n            p = this.points[ i ];\n            coords[ i ] = [ p.x, p.y, p.z ];\n\n        }\n\n        return coords;\n\n    };\n\n    // approximate length by summing linear segments\n\n    this.getLength = function ( nSubDivisions ) {\n\n        var i, index, nSamples, position,\n            point = 0, intPoint = 0, oldIntPoint = 0,\n            oldPosition = new THREE.Vector3(),\n            tmpVec = new THREE.Vector3(),\n            chunkLengths = [],\n            totalLength = 0;\n\n        // first point has 0 length\n\n        chunkLengths[ 0 ] = 0;\n\n        if ( !nSubDivisions ) nSubDivisions = 100;\n\n        nSamples = this.points.length * nSubDivisions;\n\n        oldPosition.copy( this.points[ 0 ] );\n\n        for ( i = 1; i < nSamples; i ++ ) {\n\n            index = i / nSamples;\n\n            position = this.getPoint( index );\n            tmpVec.copy( position );\n\n            totalLength += tmpVec.distanceTo( oldPosition );\n\n            oldPosition.copy( position );\n\n            point = ( this.points.length - 1 ) * index;\n            intPoint = Math.floor( point );\n\n            if ( intPoint != oldIntPoint ) {\n\n                chunkLengths[ intPoint ] = totalLength;\n                oldIntPoint = intPoint;\n\n            }\n\n        }\n\n        // last point ends with total length\n\n        chunkLengths[ chunkLengths.length ] = totalLength;\n\n        return { chunks: chunkLengths, total: totalLength };\n\n    };\n\n    this.reparametrizeByArcLength = function ( samplingCoef ) {\n\n        var i, j,\n            index, indexCurrent, indexNext,\n            linearDistance, realDistance,\n            sampling, position,\n            newpoints = [],\n            tmpVec = new THREE.Vector3(),\n            sl = this.getLength();\n\n        newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n        for ( i = 1; i < this.points.length; i++ ) {\n\n            //tmpVec.copy( this.points[ i - 1 ] );\n            //linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n            realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n            sampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n            indexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n            indexNext = i / ( this.points.length - 1 );\n\n            for ( j = 1; j < sampling - 1; j++ ) {\n\n                index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n                position = this.getPoint( index );\n                newpoints.push( tmpVec.copy( position ).clone() );\n\n            }\n\n            newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n        }\n\n        this.points = newpoints;\n\n    };\n\n    // Catmull-Rom\n\n    function interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n        var v0 = ( p2 - p0 ) * 0.5,\n            v1 = ( p3 - p1 ) * 0.5;\n\n        return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    };\n\n};\n\n/**\n * @author bhouston / http://exocortex.com\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Triangle = function ( a, b, c ) {\n\n    this.a = ( a !== undefined ) ? a : new THREE.Vector3();\n    this.b = ( b !== undefined ) ? b : new THREE.Vector3();\n    this.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\n};\n\nTHREE.Triangle.normal = function() {\n\n    var v0 = new THREE.Vector3();\n\n    return function ( a, b, c, optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n\n        result.subVectors( c, b );\n        v0.subVectors( a, b );\n        result.cross( v0 );\n\n        var resultLengthSq = result.lengthSq();\n        if( resultLengthSq > 0 ) {\n\n            return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n        }\n\n        return result.set( 0, 0, 0 );\n\n    };\n\n}();\n\n// static/instance method to calculate barycoordinates\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\nTHREE.Triangle.barycoordFromPoint = function() {\n\n    var v0 = new THREE.Vector3();\n    var v1 = new THREE.Vector3();\n    var v2 = new THREE.Vector3();\n\n    return function ( point, a, b, c, optionalTarget ) {\n\n        v0.subVectors( c, a );\n        v1.subVectors( b, a );\n        v2.subVectors( point, a );\n\n        var dot00 = v0.dot( v0 );\n        var dot01 = v0.dot( v1 );\n        var dot02 = v0.dot( v2 );\n        var dot11 = v1.dot( v1 );\n        var dot12 = v1.dot( v2 );\n\n        var denom = ( dot00 * dot11 - dot01 * dot01 );\n\n        var result = optionalTarget || new THREE.Vector3();\n\n        // colinear or singular triangle\n        if( denom == 0 ) {\n            // arbitrary location outside of triangle?\n            // not sure if this is the best idea, maybe should be returning undefined\n            return result.set( -2, -1, -1 );\n        }\n\n        var invDenom = 1 / denom;\n        var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n        var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n        // barycoordinates must always sum to 1\n        return result.set( 1 - u - v, v, u );\n\n    };\n\n}();\n\nTHREE.Triangle.containsPoint = function() {\n\n    var v1 = new THREE.Vector3();\n\n    return function ( point, a, b, c ) {\n\n        var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n        return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n    };\n\n}();\n\nTHREE.Triangle.prototype = {\n\n    constructor: THREE.Triangle,\n\n    set: function ( a, b, c ) {\n\n        this.a.copy( a );\n        this.b.copy( b );\n        this.c.copy( c );\n\n        return this;\n\n    },\n\n    setFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n        this.a.copy( points[i0] );\n        this.b.copy( points[i1] );\n        this.c.copy( points[i2] );\n\n        return this;\n\n    },\n\n    copy: function ( triangle ) {\n\n        this.a.copy( triangle.a );\n        this.b.copy( triangle.b );\n        this.c.copy( triangle.c );\n\n        return this;\n\n    },\n\n    area: function() {\n\n        var v0 = new THREE.Vector3();\n        var v1 = new THREE.Vector3();\n\n        return function () {\n\n            v0.subVectors( this.c, this.b );\n            v1.subVectors( this.a, this.b );\n\n            return v0.cross( v1 ).length() * 0.5;\n\n        };\n\n    }(),\n\n    midpoint: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Vector3();\n        return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n    },\n\n    normal: function ( optionalTarget ) {\n\n        return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n    },\n\n    plane: function ( optionalTarget ) {\n\n        var result = optionalTarget || new THREE.Plane();\n\n        return result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n    },\n\n    barycoordFromPoint: function ( point, optionalTarget ) {\n\n        return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n    },\n\n    containsPoint: function ( point ) {\n\n        return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\n    },\n\n    equals: function ( triangle ) {\n\n        return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n    },\n\n    clone: function () {\n\n        return new THREE.Triangle().copy( this );\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Vertex = function ( v ) {\n\n    console.warn( 'THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.')\n    return v;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.UV = function ( u, v ) {\n\n    console.warn( 'THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.')\n    return new THREE.Vector2( u, v );\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Clock = function ( autoStart ) {\n\n    this.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n    this.startTime = 0;\n    this.oldTime = 0;\n    this.elapsedTime = 0;\n\n    this.running = false;\n\n};\n\nTHREE.Clock.prototype = {\n\n    constructor: THREE.Clock,\n\n    start: function () {\n\n        this.startTime = self.performance !== undefined && self.performance.now !== undefined\n            ? self.performance.now()\n            : Date.now();\n\n        this.oldTime = this.startTime;\n        this.running = true;\n    },\n\n    stop: function () {\n\n        this.getElapsedTime();\n        this.running = false;\n\n    },\n\n    getElapsedTime: function () {\n\n        this.getDelta();\n        return this.elapsedTime;\n\n    },\n\n    getDelta: function () {\n\n        var diff = 0;\n\n        if ( this.autoStart && ! this.running ) {\n\n            this.start();\n\n        }\n\n        if ( this.running ) {\n\n            var newTime = self.performance !== undefined && self.performance.now !== undefined\n                ? self.performance.now()\n                : Date.now();\n\n            diff = 0.001 * ( newTime - this.oldTime );\n            this.oldTime = newTime;\n\n            this.elapsedTime += diff;\n\n        }\n\n        return diff;\n\n    }\n\n};\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nTHREE.EventDispatcher = function () {}\n\nTHREE.EventDispatcher.prototype = {\n\n    constructor: THREE.EventDispatcher,\n\n    apply: function ( object ) {\n\n        object.addEventListener = THREE.EventDispatcher.prototype.addEventListener;\n        object.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;\n        object.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;\n        object.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;\n\n    },\n\n    addEventListener: function ( type, listener ) {\n\n        if ( this._listeners === undefined ) this._listeners = {};\n\n        var listeners = this._listeners;\n\n        if ( listeners[ type ] === undefined ) {\n\n            listeners[ type ] = [];\n\n        }\n\n        if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n            listeners[ type ].push( listener );\n\n        }\n\n    },\n\n    hasEventListener: function ( type, listener ) {\n\n        if ( this._listeners === undefined ) return false;\n\n        var listeners = this._listeners;\n\n        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n            return true;\n\n        }\n\n        return false;\n\n    },\n\n    removeEventListener: function ( type, listener ) {\n\n        if ( this._listeners === undefined ) return;\n\n        var listeners = this._listeners;\n        var index = listeners[ type ].indexOf( listener );\n\n        if ( index !== - 1 ) {\n\n            listeners[ type ].splice( index, 1 );\n\n        }\n\n    },\n\n    dispatchEvent: function () {\n\n        var array = [];\n\n        return function ( event ) {\n\n            if ( this._listeners === undefined ) return;\n\n            var listeners = this._listeners;\n            var listenerArray = listeners[ event.type ];\n\n            if ( listenerArray !== undefined ) {\n\n                event.target = this;\n\n                var length = listenerArray.length;\n\n                for ( var i = 0; i < length; i ++ ) {\n\n                    array[ i ] = listenerArray[ i ];\n\n                }\n\n                for ( var i = 0; i < length; i ++ ) {\n\n                    array[ i ].call( this, event );\n\n                }\n\n            }\n\n        };\n\n    }()\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://exocortex.com/\n * @author stephomi / http://stephaneginier.com/\n */\n\n( function ( THREE ) {\n\n    THREE.Raycaster = function ( origin, direction, near, far ) {\n\n        this.ray = new THREE.Ray( origin, direction );\n        // direction is assumed to be normalized (for accurate distance calculations)\n\n        this.near = near || 0;\n        this.far = far || Infinity;\n\n    };\n\n    var sphere = new THREE.Sphere();\n    var localRay = new THREE.Ray();\n    var facePlane = new THREE.Plane();\n    var intersectPoint = new THREE.Vector3();\n    var matrixPosition = new THREE.Vector3();\n\n    var inverseMatrix = new THREE.Matrix4();\n\n    var descSort = function ( a, b ) {\n\n        return a.distance - b.distance;\n\n    };\n\n    var vA = new THREE.Vector3();\n    var vB = new THREE.Vector3();\n    var vC = new THREE.Vector3();\n\n    var intersectObject = function ( object, raycaster, intersects ) {\n\n        if ( object instanceof THREE.Sprite ) {\n\n            matrixPosition.getPositionFromMatrix( object.matrixWorld );\n            var distance = raycaster.ray.distanceToPoint( matrixPosition );\n\n            if ( distance > object.scale.x ) {\n\n                return intersects;\n\n            }\n\n            intersects.push( {\n\n                distance: distance,\n                point: object.position,\n                face: null,\n                object: object\n\n            } );\n\n        } else if ( object instanceof THREE.LOD ) {\n\n            matrixPosition.getPositionFromMatrix( object.matrixWorld );\n            var distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n            intersectObject( object.getObjectForDistance( distance ), raycaster, intersects );\n\n        } else if ( object instanceof THREE.Mesh ) {\n\n            var geometry = object.geometry;\n\n            // Checking boundingSphere distance to ray\n\n            if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n            sphere.copy( geometry.boundingSphere );\n            sphere.applyMatrix4( object.matrixWorld );\n\n            if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {\n\n                return intersects;\n\n            }\n\n            // Check boundingBox before continuing\n\n            inverseMatrix.getInverse( object.matrixWorld );\n            localRay.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n            if ( geometry.boundingBox !== null ) {\n\n                if ( localRay.isIntersectionBox( geometry.boundingBox ) === false )  {\n\n                    return intersects;\n\n                }\n\n            }\n\n            if ( geometry instanceof THREE.BufferGeometry ) {\n\n                var material = object.material;\n\n                if ( material === undefined ) return intersects;\n                if ( geometry.dynamic === false ) return intersects;\n\n                var a, b, c;\n                var precision = raycaster.precision;\n\n                if ( geometry.attributes.index !== undefined ) {\n\n                    var offsets = geometry.offsets;\n                    var indices = geometry.attributes.index.array;\n                    var positions = geometry.attributes.position.array;\n                    var offLength = geometry.offsets.length;\n\n                    var fl = geometry.attributes.index.array.length / 3;\n\n                    for ( var oi = 0; oi < offLength; ++oi ) {\n\n                        var start = offsets[ oi ].start;\n                        var count = offsets[ oi ].count;\n                        var index = offsets[ oi ].index;\n\n                        for ( var i = start, il = start + count; i < il; i += 3 ) {\n\n                            a = index + indices[ i ];\n                            b = index + indices[ i + 1 ];\n                            c = index + indices[ i + 2 ];\n\n                            vA.set(\n                                positions[ a * 3 ],\n                                positions[ a * 3 + 1 ],\n                                positions[ a * 3 + 2 ]\n                            );\n                            vB.set(\n                                positions[ b * 3 ],\n                                positions[ b * 3 + 1 ],\n                                positions[ b * 3 + 2 ]\n                            );\n                            vC.set(\n                                positions[ c * 3 ],\n                                positions[ c * 3 + 1 ],\n                                positions[ c * 3 + 2 ]\n                            );\n\n\n                            if ( material.side === THREE.BackSide ) {\n\n                                var intersectionPoint = localRay.intersectTriangle( vC, vB, vA, true );\n\n                            } else {\n\n                                var intersectionPoint = localRay.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );\n\n                            }\n\n                            if ( intersectionPoint === null ) continue;\n\n                            intersectionPoint.applyMatrix4( object.matrixWorld );\n\n                            var distance = raycaster.ray.origin.distanceTo( intersectionPoint );\n\n                            if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;\n\n                            intersects.push( {\n\n                                distance: distance,\n                                point: intersectionPoint,\n                                face: null,\n                                faceIndex: null,\n                                object: object\n\n                            } );\n\n                        }\n\n                    }\n\n                } else {\n\n                    var offsets = geometry.offsets;\n                    var positions = geometry.attributes.position.array;\n                    var offLength = geometry.offsets.length;\n\n                    var fl = geometry.attributes.position.array.length;\n\n                    for ( var i = 0; i < fl; i += 3 ) {\n\n                        a = i;\n                        b = i + 1;\n                        c = i + 2;\n\n                        vA.set(\n                            positions[ a * 3 ],\n                            positions[ a * 3 + 1 ],\n                            positions[ a * 3 + 2 ]\n                        );\n                        vB.set(\n                            positions[ b * 3 ],\n                            positions[ b * 3 + 1 ],\n                            positions[ b * 3 + 2 ]\n                        );\n                        vC.set(\n                            positions[ c * 3 ],\n                            positions[ c * 3 + 1 ],\n                            positions[ c * 3 + 2 ]\n                        );\n\n\n                        if ( material.side === THREE.BackSide ) {\n\n                            var intersectionPoint = localRay.intersectTriangle( vC, vB, vA, true );\n\n                        } else {\n\n                            var intersectionPoint = localRay.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );\n\n                        }\n\n                        if ( intersectionPoint === null ) continue;\n\n                        intersectionPoint.applyMatrix4( object.matrixWorld );\n\n                        var distance = raycaster.ray.origin.distanceTo( intersectionPoint );\n\n                        if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;\n\n                        intersects.push( {\n\n                            distance: distance,\n                            point: intersectionPoint,\n                            face: null,\n                            faceIndex: null,\n                            object: object\n\n                        } );\n\n                    }\n\n                }\n\n            } else if ( geometry instanceof THREE.Geometry ) {\n\n                var isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;\n                var objectMaterials = isFaceMaterial === true ? object.material.materials : null;\n\n                var a, b, c, d;\n                var precision = raycaster.precision;\n\n                var vertices = geometry.vertices;\n\n                for ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\n\n                    var face = geometry.faces[ f ];\n\n                    var material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : object.material;\n\n                    if ( material === undefined ) continue;\n\n                    a = vertices[ face.a ];\n                    b = vertices[ face.b ];\n                    c = vertices[ face.c ];\n\n                    if ( material.side === THREE.BackSide ) {\n\n                        var intersectionPoint = localRay.intersectTriangle( c, b, a, true );\n\n                    } else {\n\n                        var intersectionPoint = localRay.intersectTriangle( a, b, c, material.side !== THREE.DoubleSide );\n\n                    }\n\n                    if ( intersectionPoint === null ) continue;\n\n                    intersectionPoint.applyMatrix4( object.matrixWorld );\n\n                    var distance = raycaster.ray.origin.distanceTo( intersectionPoint );\n\n                    if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;\n\n                    intersects.push( {\n\n                        distance: distance,\n                        point: intersectionPoint,\n                        face: face,\n                        faceIndex: f,\n                        object: object\n\n                    } );\n\n                }\n\n            }\n\n        } else if ( object instanceof THREE.Line ) {\n\n            var precision = raycaster.linePrecision;\n            var precisionSq = precision * precision;\n\n            var geometry = object.geometry;\n\n            if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n            // Checking boundingSphere distance to ray\n\n            sphere.copy( geometry.boundingSphere );\n            sphere.applyMatrix4( object.matrixWorld );\n\n            if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {\n\n                return intersects;\n\n            }\n\n            inverseMatrix.getInverse( object.matrixWorld );\n            localRay.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n            /* if ( geometry instanceof THREE.BufferGeometry ) {\n\n             } else */ if ( geometry instanceof THREE.Geometry ) {\n\n                var vertices = geometry.vertices;\n                var nbVertices = vertices.length;\n                var interSegment = new THREE.Vector3();\n                var interRay = new THREE.Vector3();\n                var step = object.type === THREE.LineStrip ? 1 : 2;\n\n                for ( var i = 0; i < nbVertices - 1; i = i + step ) {\n\n                    var distSq = localRay.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n                    if ( distSq > precisionSq ) continue;\n\n                    var distance = localRay.origin.distanceTo( interRay );\n\n                    if ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n                    intersects.push( {\n\n                        distance: distance,\n                        // What do we want? intersection point on the ray or on the segment??\n                        // point: raycaster.ray.at( distance ),\n                        point: interSegment.clone().applyMatrix4( object.matrixWorld ),\n                        face: null,\n                        faceIndex: null,\n                        object: object\n\n                    } );\n\n                }\n\n            }\n\n        }\n\n    };\n\n    var intersectDescendants = function ( object, raycaster, intersects ) {\n\n        var descendants = object.getDescendants();\n\n        for ( var i = 0, l = descendants.length; i < l; i ++ ) {\n\n            intersectObject( descendants[ i ], raycaster, intersects );\n\n        }\n    };\n\n    //\n\n    THREE.Raycaster.prototype.precision = 0.0001;\n    THREE.Raycaster.prototype.linePrecision = 1;\n\n    THREE.Raycaster.prototype.set = function ( origin, direction ) {\n\n        this.ray.set( origin, direction );\n        // direction is assumed to be normalized (for accurate distance calculations)\n\n    };\n\n    THREE.Raycaster.prototype.intersectObject = function ( object, recursive ) {\n\n        var intersects = [];\n\n        if ( recursive === true ) {\n\n            intersectDescendants( object, this, intersects );\n\n        }\n\n        intersectObject( object, this, intersects );\n\n        intersects.sort( descSort );\n\n        return intersects;\n\n    };\n\n    THREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {\n\n        var intersects = [];\n\n        for ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n            intersectObject( objects[ i ], this, intersects );\n\n            if ( recursive === true ) {\n\n                intersectDescendants( objects[ i ], this, intersects );\n\n            }\n\n        }\n\n        intersects.sort( descSort );\n\n        return intersects;\n\n    };\n\n}( THREE ) );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Object3D = function () {\n\n    this.id = THREE.Object3DIdCount ++;\n    this.uuid = THREE.Math.generateUUID();\n\n    this.name = '';\n\n    this.parent = undefined;\n    this.children = [];\n\n    this.up = new THREE.Vector3( 0, 1, 0 );\n\n    this.position = new THREE.Vector3();\n    this.rotation = new THREE.Euler();\n    this.quaternion = new THREE.Quaternion();\n    this.scale = new THREE.Vector3( 1, 1, 1 );\n\n    // keep rotation and quaternion in sync\n\n    this.rotation._quaternion = this.quaternion;\n    this.quaternion._euler = this.rotation;\n\n    this.renderDepth = null;\n\n    this.rotationAutoUpdate = true;\n\n    this.matrix = new THREE.Matrix4();\n    this.matrixWorld = new THREE.Matrix4();\n\n    this.matrixAutoUpdate = true;\n    this.matrixWorldNeedsUpdate = true;\n\n    this.visible = true;\n\n    this.castShadow = false;\n    this.receiveShadow = false;\n\n    this.frustumCulled = true;\n\n    this.userData = {};\n\n};\n\n\nTHREE.Object3D.prototype = {\n\n    constructor: THREE.Object3D,\n\n    get eulerOrder () {\n\n        console.warn( 'DEPRECATED: Object3D\\'s .eulerOrder has been moved to Object3D\\'s .rotation.order.' );\n\n        return this.rotation.order;\n\n    },\n\n    set eulerOrder ( value ) {\n\n        console.warn( 'DEPRECATED: Object3D\\'s .eulerOrder has been moved to Object3D\\'s .rotation.order.' );\n\n        this.rotation.order = value;\n\n    },\n\n    get useQuaternion () {\n\n        console.warn( 'DEPRECATED: Object3D\\'s .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n    },\n\n    set useQuaternion ( value ) {\n\n        console.warn( 'DEPRECATED: Object3D\\'s .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n    },\n\n    applyMatrix: function () {\n\n        var m1 = new THREE.Matrix4();\n\n        return function ( matrix ) {\n\n            this.matrix.multiplyMatrices( matrix, this.matrix );\n\n            this.position.getPositionFromMatrix( this.matrix );\n\n            this.scale.getScaleFromMatrix( this.matrix );\n\n            m1.extractRotation( this.matrix );\n\n            this.quaternion.setFromRotationMatrix( m1 );\n\n        }\n\n    }(),\n\n    setRotationFromAxisAngle: function ( axis, angle ) {\n\n        // assumes axis is normalized\n\n        this.quaternion.setFromAxisAngle( axis, angle );\n\n    },\n\n    setRotationFromEuler: function ( euler ) {\n\n        this.quaternion.setFromEuler( euler, true );\n\n    },\n\n    setRotationFromMatrix: function ( m ) {\n\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        this.quaternion.setFromRotationMatrix( m );\n\n    },\n\n    setRotationFromQuaternion: function ( q ) {\n\n        // assumes q is normalized\n\n        this.quaternion.copy( q );\n\n    },\n\n    rotateOnAxis: function() {\n\n        // rotate object on axis in object space\n        // axis is assumed to be normalized\n\n        var q1 = new THREE.Quaternion();\n\n        return function ( axis, angle ) {\n\n            q1.setFromAxisAngle( axis, angle );\n\n            this.quaternion.multiply( q1 );\n\n            return this;\n\n        }\n\n    }(),\n\n    rotateX: function () {\n\n        var v1 = new THREE.Vector3( 1, 0, 0 );\n\n        return function ( angle ) {\n\n            return this.rotateOnAxis( v1, angle );\n\n        };\n\n    }(),\n\n    rotateY: function () {\n\n        var v1 = new THREE.Vector3( 0, 1, 0 );\n\n        return function ( angle ) {\n\n            return this.rotateOnAxis( v1, angle );\n\n        };\n\n    }(),\n\n    rotateZ: function () {\n\n        var v1 = new THREE.Vector3( 0, 0, 1 );\n\n        return function ( angle ) {\n\n            return this.rotateOnAxis( v1, angle );\n\n        };\n\n    }(),\n\n    translateOnAxis: function () {\n\n        // translate object by distance along axis in object space\n        // axis is assumed to be normalized\n\n        var v1 = new THREE.Vector3();\n\n        return function ( axis, distance ) {\n\n            v1.copy( axis );\n\n            v1.applyQuaternion( this.quaternion );\n\n            this.position.add( v1.multiplyScalar( distance ) );\n\n            return this;\n\n        }\n\n    }(),\n\n    translate: function ( distance, axis ) {\n\n        console.warn( 'DEPRECATED: Object3D\\'s .translate() has been removed. Use .translateOnAxis( axis, distance ) instead. Note args have been changed.' );\n        return this.translateOnAxis( axis, distance );\n\n    },\n\n    translateX: function () {\n\n        var v1 = new THREE.Vector3( 1, 0, 0 );\n\n        return function ( distance ) {\n\n            return this.translateOnAxis( v1, distance );\n\n        };\n\n    }(),\n\n    translateY: function () {\n\n        var v1 = new THREE.Vector3( 0, 1, 0 );\n\n        return function ( distance ) {\n\n            return this.translateOnAxis( v1, distance );\n\n        };\n\n    }(),\n\n    translateZ: function () {\n\n        var v1 = new THREE.Vector3( 0, 0, 1 );\n\n        return function ( distance ) {\n\n            return this.translateOnAxis( v1, distance );\n\n        };\n\n    }(),\n\n    localToWorld: function ( vector ) {\n\n        return vector.applyMatrix4( this.matrixWorld );\n\n    },\n\n    worldToLocal: function () {\n\n        var m1 = new THREE.Matrix4();\n\n        return function ( vector ) {\n\n            return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n        };\n\n    }(),\n\n    lookAt: function () {\n\n        // This routine does not support objects with rotated and/or translated parent(s)\n\n        var m1 = new THREE.Matrix4();\n\n        return function ( vector ) {\n\n            m1.lookAt( vector, this.position, this.up );\n\n            this.quaternion.setFromRotationMatrix( m1 );\n\n        };\n\n    }(),\n\n    add: function ( object ) {\n\n        if ( object === this ) {\n\n            console.warn( 'THREE.Object3D.add: An object can\\'t be added as a child of itself.' );\n            return;\n\n        }\n\n        if ( object instanceof THREE.Object3D ) {\n\n            if ( object.parent !== undefined ) {\n\n                object.parent.remove( object );\n\n            }\n\n            object.parent = this;\n            object.dispatchEvent( { type: 'added' } );\n\n            this.children.push( object );\n\n            // add to scene\n\n            var scene = this;\n\n            while ( scene.parent !== undefined ) {\n\n                scene = scene.parent;\n\n            }\n\n            if ( scene !== undefined && scene instanceof THREE.Scene )  {\n\n                scene.__addObject( object );\n\n            }\n\n        }\n\n    },\n\n    remove: function ( object ) {\n\n        var index = this.children.indexOf( object );\n\n        if ( index !== - 1 ) {\n\n            object.parent = undefined;\n            object.dispatchEvent( { type: 'removed' } );\n\n            this.children.splice( index, 1 );\n\n            // remove from scene\n\n            var scene = this;\n\n            while ( scene.parent !== undefined ) {\n\n                scene = scene.parent;\n\n            }\n\n            if ( scene !== undefined && scene instanceof THREE.Scene ) {\n\n                scene.__removeObject( object );\n\n            }\n\n        }\n\n    },\n\n    traverse: function ( callback ) {\n\n        callback( this );\n\n        for ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n            this.children[ i ].traverse( callback );\n\n        }\n\n    },\n\n    getObjectById: function ( id, recursive ) {\n\n        for ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n            var child = this.children[ i ];\n\n            if ( child.id === id ) {\n\n                return child;\n\n            }\n\n            if ( recursive === true ) {\n\n                child = child.getObjectById( id, recursive );\n\n                if ( child !== undefined ) {\n\n                    return child;\n\n                }\n\n            }\n\n        }\n\n        return undefined;\n\n    },\n\n    getObjectByName: function ( name, recursive ) {\n\n        for ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n            var child = this.children[ i ];\n\n            if ( child.name === name ) {\n\n                return child;\n\n            }\n\n            if ( recursive === true ) {\n\n                child = child.getObjectByName( name, recursive );\n\n                if ( child !== undefined ) {\n\n                    return child;\n\n                }\n\n            }\n\n        }\n\n        return undefined;\n\n    },\n\n    getChildByName: function ( name, recursive ) {\n\n        console.warn( 'DEPRECATED: Object3D\\'s .getChildByName() has been renamed to .getObjectByName().' );\n        return this.getObjectByName( name, recursive );\n\n    },\n\n    getDescendants: function ( array ) {\n\n        if ( array === undefined ) array = [];\n\n        Array.prototype.push.apply( array, this.children );\n\n        for ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n            this.children[ i ].getDescendants( array );\n\n        }\n\n        return array;\n\n    },\n\n    updateMatrix: function () {\n\n        this.matrix.compose( this.position, this.quaternion, this.scale );\n\n        this.matrixWorldNeedsUpdate = true;\n\n    },\n\n    updateMatrixWorld: function ( force ) {\n\n        if ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n        if ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n            if ( this.parent === undefined ) {\n\n                this.matrixWorld.copy( this.matrix );\n\n            } else {\n\n                this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n            }\n\n            this.matrixWorldNeedsUpdate = false;\n\n            force = true;\n\n        }\n\n        // update children\n\n        for ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n            this.children[ i ].updateMatrixWorld( force );\n\n        }\n\n    },\n\n    clone: function ( object, recursive ) {\n\n        if ( object === undefined ) object = new THREE.Object3D();\n        if ( recursive === undefined ) recursive = true;\n\n        object.name = this.name;\n\n        object.up.copy( this.up );\n\n        object.position.copy( this.position );\n        object.quaternion.copy( this.quaternion );\n        object.scale.copy( this.scale );\n\n        object.renderDepth = this.renderDepth;\n\n        object.rotationAutoUpdate = this.rotationAutoUpdate;\n\n        object.matrix.copy( this.matrix );\n        object.matrixWorld.copy( this.matrixWorld );\n\n        object.matrixAutoUpdate = this.matrixAutoUpdate;\n        object.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;\n\n        object.visible = this.visible;\n\n        object.castShadow = this.castShadow;\n        object.receiveShadow = this.receiveShadow;\n\n        object.frustumCulled = this.frustumCulled;\n\n        object.userData = JSON.parse( JSON.stringify( this.userData ) );\n\n        if ( recursive === true ) {\n\n            for ( var i = 0; i < this.children.length; i ++ ) {\n\n                var child = this.children[ i ];\n                object.add( child.clone() );\n\n            }\n\n        }\n\n        return object;\n\n    }\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );\n\nTHREE.Object3DIdCount = 0;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.Projector = function () {\n\n    var _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n        _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n        _face, _face3Count, _face3Pool = [], _face3PoolLength = 0,\n        _line, _lineCount, _linePool = [], _linePoolLength = 0,\n        _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n        _renderData = { objects: [], sprites: [], lights: [], elements: [] },\n\n        _vector3 = new THREE.Vector3(),\n        _vector4 = new THREE.Vector4(),\n\n        _clipBox = new THREE.Box3( new THREE.Vector3( -1, -1, -1 ), new THREE.Vector3( 1, 1, 1 ) ),\n        _boundingBox = new THREE.Box3(),\n        _points3 = new Array( 3 ),\n        _points4 = new Array( 4 ),\n\n        _viewMatrix = new THREE.Matrix4(),\n        _viewProjectionMatrix = new THREE.Matrix4(),\n\n        _modelMatrix,\n        _modelViewProjectionMatrix = new THREE.Matrix4(),\n\n        _normalMatrix = new THREE.Matrix3(),\n        _normalViewMatrix = new THREE.Matrix3(),\n\n        _centroid = new THREE.Vector3(),\n\n        _frustum = new THREE.Frustum(),\n\n        _clippedVertex1PositionScreen = new THREE.Vector4(),\n        _clippedVertex2PositionScreen = new THREE.Vector4();\n\n    this.projectVector = function ( vector, camera ) {\n\n        camera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n        _viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\n        return vector.applyProjection( _viewProjectionMatrix );\n\n    };\n\n    this.unprojectVector = function ( vector, camera ) {\n\n        camera.projectionMatrixInverse.getInverse( camera.projectionMatrix );\n\n        _viewProjectionMatrix.multiplyMatrices( camera.matrixWorld, camera.projectionMatrixInverse );\n\n        return vector.applyProjection( _viewProjectionMatrix );\n\n    };\n\n    this.pickingRay = function ( vector, camera ) {\n\n        // set two vectors with opposing z values\n        vector.z = -1.0;\n        var end = new THREE.Vector3( vector.x, vector.y, 1.0 );\n\n        this.unprojectVector( vector, camera );\n        this.unprojectVector( end, camera );\n\n        // find direction from vector to end\n        end.sub( vector ).normalize();\n\n        return new THREE.Raycaster( vector, end );\n\n    };\n\n    var getObject = function ( object ) {\n\n        _object = getNextObjectInPool();\n        _object.id = object.id;\n        _object.object = object;\n\n        if ( object.renderDepth !== null ) {\n\n            _object.z = object.renderDepth;\n\n        } else {\n\n            _vector3.getPositionFromMatrix( object.matrixWorld );\n            _vector3.applyProjection( _viewProjectionMatrix );\n            _object.z = _vector3.z;\n\n        }\n\n        return _object;\n\n    };\n\n    var projectObject = function ( object ) {\n\n        if ( object.visible === false ) return;\n\n        if ( object instanceof THREE.Light ) {\n\n            _renderData.lights.push( object );\n\n        } else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\n\n            if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\n\n                _renderData.objects.push( getObject( object ) );\n\n            }\n\n        } else if ( object instanceof THREE.Sprite ) {\n\n            _renderData.sprites.push( getObject( object ) );\n\n        }\n\n        for ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n            projectObject( object.children[ i ] );\n\n        }\n\n    };\n\n    var projectGraph = function ( root, sortObjects ) {\n\n        _objectCount = 0;\n\n        _renderData.objects.length = 0;\n        _renderData.sprites.length = 0;\n        _renderData.lights.length = 0;\n\n        projectObject( root );\n\n        if ( sortObjects === true ) {\n\n            _renderData.objects.sort( painterSort );\n\n        }\n\n    };\n\n    this.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n        var visible = false,\n            o, ol, v, vl, f, fl, n, nl, c, cl, u, ul, object,\n            geometry, vertices, faces, face, faceVertexNormals, faceVertexUvs, uvs,\n            v1, v2, v3, v4, isFaceMaterial, objectMaterials;\n\n        _face3Count = 0;\n        _lineCount = 0;\n        _spriteCount = 0;\n\n        _renderData.elements.length = 0;\n\n        if ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n        if ( camera.parent === undefined ) camera.updateMatrixWorld();\n\n        _viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n        _viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n        _normalViewMatrix.getNormalMatrix( _viewMatrix );\n\n        _frustum.setFromMatrix( _viewProjectionMatrix );\n\n        projectGraph( scene, sortObjects );\n\n        for ( o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\n            object = _renderData.objects[ o ].object;\n\n            _modelMatrix = object.matrixWorld;\n\n            _vertexCount = 0;\n\n            if ( object instanceof THREE.Mesh ) {\n\n                geometry = object.geometry;\n\n                vertices = geometry.vertices;\n                faces = geometry.faces;\n                faceVertexUvs = geometry.faceVertexUvs;\n\n                _normalMatrix.getNormalMatrix( _modelMatrix );\n\n                isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;\n                objectMaterials = isFaceMaterial === true ? object.material : null;\n\n                for ( v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n                    _vertex = getNextVertexInPool();\n\n                    _vertex.positionWorld.copy( vertices[ v ] ).applyMatrix4( _modelMatrix );\n                    _vertex.positionScreen.copy( _vertex.positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n                    var invW = 1 / _vertex.positionScreen.w;\n\n                    _vertex.positionScreen.x *= invW;\n                    _vertex.positionScreen.y *= invW;\n                    _vertex.positionScreen.z *= invW;\n\n                    _vertex.visible = ! ( _vertex.positionScreen.x < -1 || _vertex.positionScreen.x > 1 ||\n                        _vertex.positionScreen.y < -1 || _vertex.positionScreen.y > 1 ||\n                        _vertex.positionScreen.z < -1 || _vertex.positionScreen.z > 1 );\n\n                }\n\n                for ( f = 0, fl = faces.length; f < fl; f ++ ) {\n\n                    face = faces[ f ];\n\n                    var material = isFaceMaterial === true\n                        ? objectMaterials.materials[ face.materialIndex ]\n                        : object.material;\n\n                    if ( material === undefined ) continue;\n\n                    var side = material.side;\n\n                    v1 = _vertexPool[ face.a ];\n                    v2 = _vertexPool[ face.b ];\n                    v3 = _vertexPool[ face.c ];\n\n                    _points3[ 0 ] = v1.positionScreen;\n                    _points3[ 1 ] = v2.positionScreen;\n                    _points3[ 2 ] = v3.positionScreen;\n\n                    if ( v1.visible === true || v2.visible === true || v3.visible === true ||\n                        _clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points3 ) ) ) {\n\n                        visible = ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n                            ( v2.positionScreen.y - v1.positionScreen.y ) -\n                            ( v3.positionScreen.y - v1.positionScreen.y ) *\n                                ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n                        if ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {\n\n                            _face = getNextFace3InPool();\n\n                            _face.id = object.id;\n                            _face.v1.copy( v1 );\n                            _face.v2.copy( v2 );\n                            _face.v3.copy( v3 );\n\n                        } else {\n\n                            continue;\n\n                        }\n\n                    } else {\n\n                        continue;\n\n                    }\n\n                    _face.normalModel.copy( face.normal );\n\n                    if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n                        _face.normalModel.negate();\n\n                    }\n\n                    _face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n                    _face.normalModelView.copy( _face.normalModel ).applyMatrix3( _normalViewMatrix );\n\n                    _face.centroidModel.copy( face.centroid ).applyMatrix4( _modelMatrix );\n\n                    faceVertexNormals = face.vertexNormals;\n\n                    for ( n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n                        var normalModel = _face.vertexNormalsModel[ n ];\n                        normalModel.copy( faceVertexNormals[ n ] );\n\n                        if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n                            normalModel.negate();\n\n                        }\n\n                        normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n                        var normalModelView = _face.vertexNormalsModelView[ n ];\n                        normalModelView.copy( normalModel ).applyMatrix3( _normalViewMatrix );\n\n                    }\n\n                    _face.vertexNormalsLength = faceVertexNormals.length;\n\n                    for ( c = 0, cl = Math.min( faceVertexUvs.length, 3 ); c < cl; c ++ ) {\n\n                        uvs = faceVertexUvs[ c ][ f ];\n\n                        if ( uvs === undefined ) continue;\n\n                        for ( u = 0, ul = uvs.length; u < ul; u ++ ) {\n\n                            _face.uvs[ c ][ u ] = uvs[ u ];\n\n                        }\n\n                    }\n\n                    _face.color = face.color;\n                    _face.material = material;\n\n                    _centroid.copy( _face.centroidModel ).applyProjection( _viewProjectionMatrix );\n\n                    _face.z = _centroid.z;\n\n                    _renderData.elements.push( _face );\n\n                }\n\n            } else if ( object instanceof THREE.Line ) {\n\n                _modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n                vertices = object.geometry.vertices;\n\n                v1 = getNextVertexInPool();\n                v1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n                // Handle LineStrip and LinePieces\n                var step = object.type === THREE.LinePieces ? 2 : 1;\n\n                for ( v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n                    v1 = getNextVertexInPool();\n                    v1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n                    if ( ( v + 1 ) % step > 0 ) continue;\n\n                    v2 = _vertexPool[ _vertexCount - 2 ];\n\n                    _clippedVertex1PositionScreen.copy( v1.positionScreen );\n                    _clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n                    if ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n                        // Perform the perspective divide\n                        _clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n                        _clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n                        _line = getNextLineInPool();\n\n                        _line.id = object.id;\n                        _line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n                        _line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n                        _line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\n                        _line.material = object.material;\n\n                        if ( object.material.vertexColors === THREE.VertexColors ) {\n\n                            _line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n                            _line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n                        }\n\n                        _renderData.elements.push( _line );\n\n                    }\n\n                }\n\n            }\n\n        }\n\n        for ( o = 0, ol = _renderData.sprites.length; o < ol; o++ ) {\n\n            object = _renderData.sprites[ o ].object;\n\n            _modelMatrix = object.matrixWorld;\n\n            if ( object instanceof THREE.Sprite ) {\n\n                _vector4.set( _modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1 );\n                _vector4.applyMatrix4( _viewProjectionMatrix );\n\n                var invW = 1 / _vector4.w;\n\n                _vector4.z *= invW;\n\n                if ( _vector4.z > -1 && _vector4.z < 1 ) {\n\n                    _sprite = getNextSpriteInPool();\n                    _sprite.id = object.id;\n                    _sprite.x = _vector4.x * invW;\n                    _sprite.y = _vector4.y * invW;\n                    _sprite.z = _vector4.z;\n                    _sprite.object = object;\n\n                    _sprite.rotation = object.rotation;\n\n                    _sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[0] ) / ( _vector4.w + camera.projectionMatrix.elements[12] ) );\n                    _sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[5] ) / ( _vector4.w + camera.projectionMatrix.elements[13] ) );\n\n                    _sprite.material = object.material;\n\n                    _renderData.elements.push( _sprite );\n\n                }\n\n            }\n\n        }\n\n        if ( sortElements === true ) _renderData.elements.sort( painterSort );\n\n        return _renderData;\n\n    };\n\n    // Pools\n\n    function getNextObjectInPool() {\n\n        if ( _objectCount === _objectPoolLength ) {\n\n            var object = new THREE.RenderableObject();\n            _objectPool.push( object );\n            _objectPoolLength ++;\n            _objectCount ++;\n            return object;\n\n        }\n\n        return _objectPool[ _objectCount ++ ];\n\n    }\n\n    function getNextVertexInPool() {\n\n        if ( _vertexCount === _vertexPoolLength ) {\n\n            var vertex = new THREE.RenderableVertex();\n            _vertexPool.push( vertex );\n            _vertexPoolLength ++;\n            _vertexCount ++;\n            return vertex;\n\n        }\n\n        return _vertexPool[ _vertexCount ++ ];\n\n    }\n\n    function getNextFace3InPool() {\n\n        if ( _face3Count === _face3PoolLength ) {\n\n            var face = new THREE.RenderableFace3();\n            _face3Pool.push( face );\n            _face3PoolLength ++;\n            _face3Count ++;\n            return face;\n\n        }\n\n        return _face3Pool[ _face3Count ++ ];\n\n\n    }\n\n    function getNextLineInPool() {\n\n        if ( _lineCount === _linePoolLength ) {\n\n            var line = new THREE.RenderableLine();\n            _linePool.push( line );\n            _linePoolLength ++;\n            _lineCount ++\n            return line;\n\n        }\n\n        return _linePool[ _lineCount ++ ];\n\n    }\n\n    function getNextSpriteInPool() {\n\n        if ( _spriteCount === _spritePoolLength ) {\n\n            var sprite = new THREE.RenderableSprite();\n            _spritePool.push( sprite );\n            _spritePoolLength ++;\n            _spriteCount ++\n            return sprite;\n\n        }\n\n        return _spritePool[ _spriteCount ++ ];\n\n    }\n\n    //\n\n    function painterSort( a, b ) {\n\n        if ( a.z !== b.z ) {\n\n            return b.z - a.z;\n\n        } else if ( a.id !== b.id ) {\n\n            return a.id - b.id;\n\n        } else {\n\n            return 0;\n\n        }\n\n    }\n\n    function clipLine( s1, s2 ) {\n\n        var alpha1 = 0, alpha2 = 1,\n\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n        // Z = -1 and Z = +1, respectively.\n            bc1near =  s1.z + s1.w,\n            bc2near =  s2.z + s2.w,\n            bc1far =  - s1.z + s1.w,\n            bc2far =  - s2.z + s2.w;\n\n        if ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n            // Both vertices lie entirely within all clip planes.\n            return true;\n\n        } else if ( ( bc1near < 0 && bc2near < 0) || (bc1far < 0 && bc2far < 0 ) ) {\n\n            // Both vertices lie entirely outside one of the clip planes.\n            return false;\n\n        } else {\n\n            // The line segment spans at least one clip plane.\n\n            if ( bc1near < 0 ) {\n\n                // v1 lies outside the near plane, v2 inside\n                alpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n            } else if ( bc2near < 0 ) {\n\n                // v2 lies outside the near plane, v1 inside\n                alpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n            }\n\n            if ( bc1far < 0 ) {\n\n                // v1 lies outside the far plane, v2 inside\n                alpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n            } else if ( bc2far < 0 ) {\n\n                // v2 lies outside the far plane, v2 inside\n                alpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n            }\n\n            if ( alpha2 < alpha1 ) {\n\n                // The line segment spans two boundaries, but is outside both of them.\n                // (This can't happen when we're only clipping against just near/far but good\n                //  to leave the check here for future usage if other clip planes are added.)\n                return false;\n\n            } else {\n\n                // Update the s1 and s2 vertices to match the clipped line segment.\n                s1.lerp( s2, alpha1 );\n                s2.lerp( s1, 1 - alpha2 );\n\n                return true;\n\n            }\n\n        }\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\n    this.a = a;\n    this.b = b;\n    this.c = c;\n\n    this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n    this.vertexNormals = normal instanceof Array ? normal : [ ];\n\n    this.color = color instanceof THREE.Color ? color : new THREE.Color();\n    this.vertexColors = color instanceof Array ? color : [];\n\n    this.vertexTangents = [];\n\n    this.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n    this.centroid = new THREE.Vector3();\n\n};\n\nTHREE.Face3.prototype = {\n\n    constructor: THREE.Face3,\n\n    clone: function () {\n\n        var face = new THREE.Face3( this.a, this.b, this.c );\n\n        face.normal.copy( this.normal );\n        face.color.copy( this.color );\n        face.centroid.copy( this.centroid );\n\n        face.materialIndex = this.materialIndex;\n\n        var i, il;\n        for ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();\n        for ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();\n        for ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();\n\n        return face;\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\n\n    console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.')\n\n    return new THREE.Face3( a, b, c, normal, color, materialIndex );\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Geometry = function () {\n\n    this.id = THREE.GeometryIdCount ++;\n    this.uuid = THREE.Math.generateUUID();\n\n    this.name = '';\n\n    this.vertices = [];\n    this.colors = [];  // one-to-one vertex colors, used in ParticleSystem and Line\n\n    this.faces = [];\n\n    this.faceVertexUvs = [[]];\n\n    this.morphTargets = [];\n    this.morphColors = [];\n    this.morphNormals = [];\n\n    this.skinWeights = [];\n    this.skinIndices = [];\n\n    this.lineDistances = [];\n\n    this.boundingBox = null;\n    this.boundingSphere = null;\n\n    this.hasTangents = false;\n\n    this.dynamic = true; // the intermediate typed arrays will be deleted when set to false\n\n    // update flags\n\n    this.verticesNeedUpdate = false;\n    this.elementsNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.tangentsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.lineDistancesNeedUpdate = false;\n\n    this.buffersNeedUpdate = false;\n\n};\n\nTHREE.Geometry.prototype = {\n\n    constructor: THREE.Geometry,\n\n    applyMatrix: function ( matrix ) {\n\n        var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n        for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n            var vertex = this.vertices[ i ];\n            vertex.applyMatrix4( matrix );\n\n        }\n\n        for ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n            var face = this.faces[ i ];\n            face.normal.applyMatrix3( normalMatrix ).normalize();\n\n            for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n                face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n            }\n\n            face.centroid.applyMatrix4( matrix );\n\n        }\n\n        if ( this.boundingBox instanceof THREE.Box3 ) {\n\n            this.computeBoundingBox();\n\n        }\n\n        if ( this.boundingSphere instanceof THREE.Sphere ) {\n\n            this.computeBoundingSphere();\n\n        }\n\n    },\n\n    computeCentroids: function () {\n\n        var f, fl, face;\n\n        for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n            face = this.faces[ f ];\n            face.centroid.set( 0, 0, 0 );\n\n            face.centroid.add( this.vertices[ face.a ] );\n            face.centroid.add( this.vertices[ face.b ] );\n            face.centroid.add( this.vertices[ face.c ] );\n            face.centroid.divideScalar( 3 );\n\n        }\n\n    },\n\n    computeFaceNormals: function () {\n\n        var cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n        for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n            var face = this.faces[ f ];\n\n            var vA = this.vertices[ face.a ];\n            var vB = this.vertices[ face.b ];\n            var vC = this.vertices[ face.c ];\n\n            cb.subVectors( vC, vB );\n            ab.subVectors( vA, vB );\n            cb.cross( ab );\n\n            cb.normalize();\n\n            face.normal.copy( cb );\n\n        }\n\n    },\n\n    computeVertexNormals: function ( areaWeighted ) {\n\n        var v, vl, f, fl, face, vertices;\n\n        // create internal buffers for reuse when calling this method repeatedly\n        // (otherwise memory allocation / deallocation every frame is big resource hog)\n\n        if ( this.__tmpVertices === undefined ) {\n\n            this.__tmpVertices = new Array( this.vertices.length );\n            vertices = this.__tmpVertices;\n\n            for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n                vertices[ v ] = new THREE.Vector3();\n\n            }\n\n            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n                face = this.faces[ f ];\n                face.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\n            }\n\n        } else {\n\n            vertices = this.__tmpVertices;\n\n            for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n                vertices[ v ].set( 0, 0, 0 );\n\n            }\n\n        }\n\n        if ( areaWeighted ) {\n\n            // vertex normals weighted by triangle areas\n            // http://www.iquilezles.org/www/articles/normals/normals.htm\n\n            var vA, vB, vC, vD;\n            var cb = new THREE.Vector3(), ab = new THREE.Vector3(),\n                db = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();\n\n            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n                face = this.faces[ f ];\n\n                vA = this.vertices[ face.a ];\n                vB = this.vertices[ face.b ];\n                vC = this.vertices[ face.c ];\n\n                cb.subVectors( vC, vB );\n                ab.subVectors( vA, vB );\n                cb.cross( ab );\n\n                vertices[ face.a ].add( cb );\n                vertices[ face.b ].add( cb );\n                vertices[ face.c ].add( cb );\n\n            }\n\n        } else {\n\n            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n                face = this.faces[ f ];\n\n                vertices[ face.a ].add( face.normal );\n                vertices[ face.b ].add( face.normal );\n                vertices[ face.c ].add( face.normal );\n\n            }\n\n        }\n\n        for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n            vertices[ v ].normalize();\n\n        }\n\n        for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n            face = this.faces[ f ];\n\n            face.vertexNormals[ 0 ].copy( vertices[ face.a ] );\n            face.vertexNormals[ 1 ].copy( vertices[ face.b ] );\n            face.vertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n        }\n\n    },\n\n    computeMorphNormals: function () {\n\n        var i, il, f, fl, face;\n\n        // save original normals\n        // - create temp variables on first access\n        //   otherwise just copy (for faster repeated calls)\n\n        for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n            face = this.faces[ f ];\n\n            if ( ! face.__originalFaceNormal ) {\n\n                face.__originalFaceNormal = face.normal.clone();\n\n            } else {\n\n                face.__originalFaceNormal.copy( face.normal );\n\n            }\n\n            if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n            for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n                if ( ! face.__originalVertexNormals[ i ] ) {\n\n                    face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n                } else {\n\n                    face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n                }\n\n            }\n\n        }\n\n        // use temp geometry to compute face and vertex normals for each morph\n\n        var tmpGeo = new THREE.Geometry();\n        tmpGeo.faces = this.faces;\n\n        for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n            // create on first access\n\n            if ( ! this.morphNormals[ i ] ) {\n\n                this.morphNormals[ i ] = {};\n                this.morphNormals[ i ].faceNormals = [];\n                this.morphNormals[ i ].vertexNormals = [];\n\n                var dstNormalsFace = this.morphNormals[ i ].faceNormals;\n                var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n                var faceNormal, vertexNormals;\n\n                for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n                    face = this.faces[ f ];\n\n                    faceNormal = new THREE.Vector3();\n                    vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\n                    dstNormalsFace.push( faceNormal );\n                    dstNormalsVertex.push( vertexNormals );\n\n                }\n\n            }\n\n            var morphNormals = this.morphNormals[ i ];\n\n            // set vertices to morph target\n\n            tmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n            // compute morph normals\n\n            tmpGeo.computeFaceNormals();\n            tmpGeo.computeVertexNormals();\n\n            // store morph normals\n\n            var faceNormal, vertexNormals;\n\n            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n                face = this.faces[ f ];\n\n                faceNormal = morphNormals.faceNormals[ f ];\n                vertexNormals = morphNormals.vertexNormals[ f ];\n\n                faceNormal.copy( face.normal );\n\n                vertexNormals.a.copy( face.vertexNormals[ 0 ] );\n                vertexNormals.b.copy( face.vertexNormals[ 1 ] );\n                vertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n            }\n\n        }\n\n        // restore original normals\n\n        for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n            face = this.faces[ f ];\n\n            face.normal = face.__originalFaceNormal;\n            face.vertexNormals = face.__originalVertexNormals;\n\n        }\n\n    },\n\n    computeTangents: function () {\n\n        // based on http://www.terathon.com/code/tangent.html\n        // tangents go to vertices\n\n        var f, fl, v, vl, i, il, vertexIndex,\n            face, uv, vA, vB, vC, uvA, uvB, uvC,\n            x1, x2, y1, y2, z1, z2,\n            s1, s2, t1, t2, r, t, test,\n            tan1 = [], tan2 = [],\n            sdir = new THREE.Vector3(), tdir = new THREE.Vector3(),\n            tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),\n            n = new THREE.Vector3(), w;\n\n        for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n            tan1[ v ] = new THREE.Vector3();\n            tan2[ v ] = new THREE.Vector3();\n\n        }\n\n        function handleTriangle( context, a, b, c, ua, ub, uc ) {\n\n            vA = context.vertices[ a ];\n            vB = context.vertices[ b ];\n            vC = context.vertices[ c ];\n\n            uvA = uv[ ua ];\n            uvB = uv[ ub ];\n            uvC = uv[ uc ];\n\n            x1 = vB.x - vA.x;\n            x2 = vC.x - vA.x;\n            y1 = vB.y - vA.y;\n            y2 = vC.y - vA.y;\n            z1 = vB.z - vA.z;\n            z2 = vC.z - vA.z;\n\n            s1 = uvB.x - uvA.x;\n            s2 = uvC.x - uvA.x;\n            t1 = uvB.y - uvA.y;\n            t2 = uvC.y - uvA.y;\n\n            r = 1.0 / ( s1 * t2 - s2 * t1 );\n            sdir.set( ( t2 * x1 - t1 * x2 ) * r,\n                ( t2 * y1 - t1 * y2 ) * r,\n                ( t2 * z1 - t1 * z2 ) * r );\n            tdir.set( ( s1 * x2 - s2 * x1 ) * r,\n                ( s1 * y2 - s2 * y1 ) * r,\n                ( s1 * z2 - s2 * z1 ) * r );\n\n            tan1[ a ].add( sdir );\n            tan1[ b ].add( sdir );\n            tan1[ c ].add( sdir );\n\n            tan2[ a ].add( tdir );\n            tan2[ b ].add( tdir );\n            tan2[ c ].add( tdir );\n\n        }\n\n        for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n            face = this.faces[ f ];\n            uv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents\n\n            handleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );\n\n        }\n\n        var faceIndex = [ 'a', 'b', 'c', 'd' ];\n\n        for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n            face = this.faces[ f ];\n\n            for ( i = 0; i < Math.min( face.vertexNormals.length, 3 ); i++ ) {\n\n                n.copy( face.vertexNormals[ i ] );\n\n                vertexIndex = face[ faceIndex[ i ] ];\n\n                t = tan1[ vertexIndex ];\n\n                // Gram-Schmidt orthogonalize\n\n                tmp.copy( t );\n                tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n                // Calculate handedness\n\n                tmp2.crossVectors( face.vertexNormals[ i ], t );\n                test = tmp2.dot( tan2[ vertexIndex ] );\n                w = (test < 0.0) ? -1.0 : 1.0;\n\n                face.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );\n\n            }\n\n        }\n\n        this.hasTangents = true;\n\n    },\n\n    computeLineDistances: function ( ) {\n\n        var d = 0;\n        var vertices = this.vertices;\n\n        for ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n            if ( i > 0 ) {\n\n                d += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n            }\n\n            this.lineDistances[ i ] = d;\n\n        }\n\n    },\n\n    computeBoundingBox: function () {\n\n        if ( this.boundingBox === null ) {\n\n            this.boundingBox = new THREE.Box3();\n\n        }\n\n        this.boundingBox.setFromPoints( this.vertices );\n\n    },\n\n    computeBoundingSphere: function () {\n\n        if ( this.boundingSphere === null ) {\n\n            this.boundingSphere = new THREE.Sphere();\n\n        }\n\n        this.boundingSphere.setFromPoints( this.vertices );\n\n    },\n\n    /*\n     * Checks for duplicate vertices with hashmap.\n     * Duplicated vertices are removed\n     * and faces' vertices are updated.\n     */\n\n    mergeVertices: function () {\n\n        var verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)\n        var unique = [], changes = [];\n\n        var v, key;\n        var precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001\n        var precision = Math.pow( 10, precisionPoints );\n        var i,il, face;\n        var indices, k, j, jl, u;\n\n        // reset cache of vertices as it now will be changing.\n        this.__tmpVertices = undefined;\n\n        for ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n            v = this.vertices[ i ];\n            key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n            if ( verticesMap[ key ] === undefined ) {\n\n                verticesMap[ key ] = i;\n                unique.push( this.vertices[ i ] );\n                changes[ i ] = unique.length - 1;\n\n            } else {\n\n                //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n                changes[ i ] = changes[ verticesMap[ key ] ];\n\n            }\n\n        };\n\n\n        // if faces are completely degenerate after merging vertices, we\n        // have to remove them from the geometry.\n        var faceIndicesToRemove = [];\n\n        for( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n            face = this.faces[ i ];\n\n            face.a = changes[ face.a ];\n            face.b = changes[ face.b ];\n            face.c = changes[ face.c ];\n\n            indices = [ face.a, face.b, face.c ];\n\n            var dupIndex = -1;\n\n            // if any duplicate vertices are found in a Face3\n            // we have to remove the face as nothing can be saved\n            for ( var n = 0; n < 3; n ++ ) {\n                if ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {\n\n                    dupIndex = n;\n                    faceIndicesToRemove.push( i );\n                    break;\n\n                }\n            }\n\n        }\n\n        for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n            var idx = faceIndicesToRemove[ i ];\n\n            this.faces.splice( idx, 1 );\n\n            for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n                this.faceVertexUvs[ j ].splice( idx, 1 );\n\n            }\n\n        }\n\n        // Use unique set of vertices\n\n        var diff = this.vertices.length - unique.length;\n        this.vertices = unique;\n        return diff;\n\n    },\n\n    clone: function () {\n\n        var geometry = new THREE.Geometry();\n\n        var vertices = this.vertices;\n\n        for ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n            geometry.vertices.push( vertices[ i ].clone() );\n\n        }\n\n        var faces = this.faces;\n\n        for ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n            geometry.faces.push( faces[ i ].clone() );\n\n        }\n\n        var uvs = this.faceVertexUvs[ 0 ];\n\n        for ( var i = 0, il = uvs.length; i < il; i ++ ) {\n\n            var uv = uvs[ i ], uvCopy = [];\n\n            for ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n                uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\n\n            }\n\n            geometry.faceVertexUvs[ 0 ].push( uvCopy );\n\n        }\n\n        return geometry;\n\n    },\n\n    dispose: function () {\n\n        this.dispatchEvent( { type: 'dispose' } );\n\n    }\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );\n\nTHREE.GeometryIdCount = 0;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.BufferGeometry = function () {\n\n    this.id = THREE.GeometryIdCount ++;\n    this.uuid = THREE.Math.generateUUID();\n\n    this.name = '';\n\n    // attributes\n\n    this.attributes = {};\n\n    // attributes typed arrays are kept only if dynamic flag is set\n\n    this.dynamic = true;\n\n    // offsets for chunks when using indexed elements\n\n    this.offsets = [];\n\n    // boundings\n\n    this.boundingBox = null;\n    this.boundingSphere = null;\n\n    this.hasTangents = false;\n\n    // for compatibility\n\n    this.morphTargets = [];\n\n};\n\nTHREE.BufferGeometry.prototype = {\n\n    constructor: THREE.BufferGeometry,\n\n    addAttribute: function( name, type, numItems, itemSize ) {\n\n        this.attributes[ name ] = {\n\n            itemSize: itemSize,\n            array: new type( numItems * itemSize )\n\n        };\n\n    },\n\n    applyMatrix: function ( matrix ) {\n\n        var positionArray;\n        var normalArray;\n\n        if ( this.attributes[ \"position\" ] ) positionArray = this.attributes[ \"position\" ].array;\n        if ( this.attributes[ \"normal\" ] ) normalArray = this.attributes[ \"normal\" ].array;\n\n        if ( positionArray !== undefined ) {\n\n            matrix.multiplyVector3Array( positionArray );\n            this.verticesNeedUpdate = true;\n\n        }\n\n        if ( normalArray !== undefined ) {\n\n            var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n            normalMatrix.multiplyVector3Array( normalArray );\n\n            this.normalizeNormals();\n\n            this.normalsNeedUpdate = true;\n\n        }\n\n    },\n\n    computeBoundingBox: function () {\n\n        if ( this.boundingBox === null ) {\n\n            this.boundingBox = new THREE.Box3();\n\n        }\n\n        var positions = this.attributes[ \"position\" ].array;\n\n        if ( positions ) {\n\n            var bb = this.boundingBox;\n            var x, y, z;\n\n            if( positions.length >= 3 ) {\n                bb.min.x = bb.max.x = positions[ 0 ];\n                bb.min.y = bb.max.y = positions[ 1 ];\n                bb.min.z = bb.max.z = positions[ 2 ];\n            }\n\n            for ( var i = 3, il = positions.length; i < il; i += 3 ) {\n\n                x = positions[ i ];\n                y = positions[ i + 1 ];\n                z = positions[ i + 2 ];\n\n                // bounding box\n\n                if ( x < bb.min.x ) {\n\n                    bb.min.x = x;\n\n                } else if ( x > bb.max.x ) {\n\n                    bb.max.x = x;\n\n                }\n\n                if ( y < bb.min.y ) {\n\n                    bb.min.y = y;\n\n                } else if ( y > bb.max.y ) {\n\n                    bb.max.y = y;\n\n                }\n\n                if ( z < bb.min.z ) {\n\n                    bb.min.z = z;\n\n                } else if ( z > bb.max.z ) {\n\n                    bb.max.z = z;\n\n                }\n\n            }\n\n        }\n\n        if ( positions === undefined || positions.length === 0 ) {\n\n            this.boundingBox.min.set( 0, 0, 0 );\n            this.boundingBox.max.set( 0, 0, 0 );\n\n        }\n\n    },\n\n    computeBoundingSphere: function () {\n\n        var box = new THREE.Box3();\n        var vector = new THREE.Vector3();\n\n        return function () {\n\n            if ( this.boundingSphere === null ) {\n\n                this.boundingSphere = new THREE.Sphere();\n\n            }\n\n            var positions = this.attributes[ \"position\" ].array;\n\n            if ( positions ) {\n\n                var center = this.boundingSphere.center;\n\n                for ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n                    vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n                    box.addPoint( vector );\n\n                }\n\n                box.center( center );\n\n                var maxRadiusSq = 0;\n\n                for ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n                    vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n                    maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n                }\n\n                this.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n            }\n\n        }\n\n    }(),\n\n    computeVertexNormals: function () {\n\n        if ( this.attributes[ \"position\" ] ) {\n\n            var i, il;\n            var j, jl;\n\n            var nVertexElements = this.attributes[ \"position\" ].array.length;\n\n            if ( this.attributes[ \"normal\" ] === undefined ) {\n\n                this.attributes[ \"normal\" ] = {\n\n                    itemSize: 3,\n                    array: new Float32Array( nVertexElements )\n\n                };\n\n            } else {\n\n                // reset existing normals to zero\n\n                for ( i = 0, il = this.attributes[ \"normal\" ].array.length; i < il; i ++ ) {\n\n                    this.attributes[ \"normal\" ].array[ i ] = 0;\n\n                }\n\n            }\n\n            var positions = this.attributes[ \"position\" ].array;\n            var normals = this.attributes[ \"normal\" ].array;\n\n            var vA, vB, vC, x, y, z,\n\n                pA = new THREE.Vector3(),\n                pB = new THREE.Vector3(),\n                pC = new THREE.Vector3(),\n\n                cb = new THREE.Vector3(),\n                ab = new THREE.Vector3();\n\n            // indexed elements\n\n            if ( this.attributes[ \"index\" ] ) {\n\n                var indices = this.attributes[ \"index\" ].array;\n\n                var offsets = this.offsets;\n\n                for ( j = 0, jl = offsets.length; j < jl; ++ j ) {\n\n                    var start = offsets[ j ].start;\n                    var count = offsets[ j ].count;\n                    var index = offsets[ j ].index;\n\n                    for ( i = start, il = start + count; i < il; i += 3 ) {\n\n                        vA = index + indices[ i ];\n                        vB = index + indices[ i + 1 ];\n                        vC = index + indices[ i + 2 ];\n\n                        x = positions[ vA * 3 ];\n                        y = positions[ vA * 3 + 1 ];\n                        z = positions[ vA * 3 + 2 ];\n                        pA.set( x, y, z );\n\n                        x = positions[ vB * 3 ];\n                        y = positions[ vB * 3 + 1 ];\n                        z = positions[ vB * 3 + 2 ];\n                        pB.set( x, y, z );\n\n                        x = positions[ vC * 3 ];\n                        y = positions[ vC * 3 + 1 ];\n                        z = positions[ vC * 3 + 2 ];\n                        pC.set( x, y, z );\n\n                        cb.subVectors( pC, pB );\n                        ab.subVectors( pA, pB );\n                        cb.cross( ab );\n\n                        normals[ vA * 3 ]     += cb.x;\n                        normals[ vA * 3 + 1 ] += cb.y;\n                        normals[ vA * 3 + 2 ] += cb.z;\n\n                        normals[ vB * 3 ]     += cb.x;\n                        normals[ vB * 3 + 1 ] += cb.y;\n                        normals[ vB * 3 + 2 ] += cb.z;\n\n                        normals[ vC * 3 ]     += cb.x;\n                        normals[ vC * 3 + 1 ] += cb.y;\n                        normals[ vC * 3 + 2 ] += cb.z;\n\n                    }\n\n                }\n\n                // non-indexed elements (unconnected triangle soup)\n\n            } else {\n\n                for ( i = 0, il = positions.length; i < il; i += 9 ) {\n\n                    x = positions[ i ];\n                    y = positions[ i + 1 ];\n                    z = positions[ i + 2 ];\n                    pA.set( x, y, z );\n\n                    x = positions[ i + 3 ];\n                    y = positions[ i + 4 ];\n                    z = positions[ i + 5 ];\n                    pB.set( x, y, z );\n\n                    x = positions[ i + 6 ];\n                    y = positions[ i + 7 ];\n                    z = positions[ i + 8 ];\n                    pC.set( x, y, z );\n\n                    cb.subVectors( pC, pB );\n                    ab.subVectors( pA, pB );\n                    cb.cross( ab );\n\n                    normals[ i ] \t = cb.x;\n                    normals[ i + 1 ] = cb.y;\n                    normals[ i + 2 ] = cb.z;\n\n                    normals[ i + 3 ] = cb.x;\n                    normals[ i + 4 ] = cb.y;\n                    normals[ i + 5 ] = cb.z;\n\n                    normals[ i + 6 ] = cb.x;\n                    normals[ i + 7 ] = cb.y;\n                    normals[ i + 8 ] = cb.z;\n\n                }\n\n            }\n\n            this.normalizeNormals();\n\n            this.normalsNeedUpdate = true;\n\n        }\n\n    },\n\n    normalizeNormals: function () {\n\n        var normals = this.attributes[ \"normal\" ].array;\n\n        var x, y, z, n;\n\n        for ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n            x = normals[ i ];\n            y = normals[ i + 1 ];\n            z = normals[ i + 2 ];\n\n            n = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n            normals[ i ] \t *= n;\n            normals[ i + 1 ] *= n;\n            normals[ i + 2 ] *= n;\n\n        }\n\n    },\n\n    computeTangents: function () {\n\n        // based on http://www.terathon.com/code/tangent.html\n        // (per vertex tangents)\n\n        if ( this.attributes[ \"index\" ] === undefined ||\n            this.attributes[ \"position\" ] === undefined ||\n            this.attributes[ \"normal\" ] === undefined ||\n            this.attributes[ \"uv\" ] === undefined ) {\n\n            console.warn( \"Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()\" );\n            return;\n\n        }\n\n        var indices = this.attributes[ \"index\" ].array;\n        var positions = this.attributes[ \"position\" ].array;\n        var normals = this.attributes[ \"normal\" ].array;\n        var uvs = this.attributes[ \"uv\" ].array;\n\n        var nVertices = positions.length / 3;\n\n        if ( this.attributes[ \"tangent\" ] === undefined ) {\n\n            var nTangentElements = 4 * nVertices;\n\n            this.attributes[ \"tangent\" ] = {\n\n                itemSize: 4,\n                array: new Float32Array( nTangentElements )\n\n            };\n\n        }\n\n        var tangents = this.attributes[ \"tangent\" ].array;\n\n        var tan1 = [], tan2 = [];\n\n        for ( var k = 0; k < nVertices; k ++ ) {\n\n            tan1[ k ] = new THREE.Vector3();\n            tan2[ k ] = new THREE.Vector3();\n\n        }\n\n        var xA, yA, zA,\n            xB, yB, zB,\n            xC, yC, zC,\n\n            uA, vA,\n            uB, vB,\n            uC, vC,\n\n            x1, x2, y1, y2, z1, z2,\n            s1, s2, t1, t2, r;\n\n        var sdir = new THREE.Vector3(), tdir = new THREE.Vector3();\n\n        function handleTriangle( a, b, c ) {\n\n            xA = positions[ a * 3 ];\n            yA = positions[ a * 3 + 1 ];\n            zA = positions[ a * 3 + 2 ];\n\n            xB = positions[ b * 3 ];\n            yB = positions[ b * 3 + 1 ];\n            zB = positions[ b * 3 + 2 ];\n\n            xC = positions[ c * 3 ];\n            yC = positions[ c * 3 + 1 ];\n            zC = positions[ c * 3 + 2 ];\n\n            uA = uvs[ a * 2 ];\n            vA = uvs[ a * 2 + 1 ];\n\n            uB = uvs[ b * 2 ];\n            vB = uvs[ b * 2 + 1 ];\n\n            uC = uvs[ c * 2 ];\n            vC = uvs[ c * 2 + 1 ];\n\n            x1 = xB - xA;\n            x2 = xC - xA;\n\n            y1 = yB - yA;\n            y2 = yC - yA;\n\n            z1 = zB - zA;\n            z2 = zC - zA;\n\n            s1 = uB - uA;\n            s2 = uC - uA;\n\n            t1 = vB - vA;\n            t2 = vC - vA;\n\n            r = 1.0 / ( s1 * t2 - s2 * t1 );\n\n            sdir.set(\n                ( t2 * x1 - t1 * x2 ) * r,\n                ( t2 * y1 - t1 * y2 ) * r,\n                ( t2 * z1 - t1 * z2 ) * r\n            );\n\n            tdir.set(\n                ( s1 * x2 - s2 * x1 ) * r,\n                ( s1 * y2 - s2 * y1 ) * r,\n                ( s1 * z2 - s2 * z1 ) * r\n            );\n\n            tan1[ a ].add( sdir );\n            tan1[ b ].add( sdir );\n            tan1[ c ].add( sdir );\n\n            tan2[ a ].add( tdir );\n            tan2[ b ].add( tdir );\n            tan2[ c ].add( tdir );\n\n        }\n\n        var i, il;\n        var j, jl;\n        var iA, iB, iC;\n\n        var offsets = this.offsets;\n\n        for ( j = 0, jl = offsets.length; j < jl; ++ j ) {\n\n            var start = offsets[ j ].start;\n            var count = offsets[ j ].count;\n            var index = offsets[ j ].index;\n\n            for ( i = start, il = start + count; i < il; i += 3 ) {\n\n                iA = index + indices[ i ];\n                iB = index + indices[ i + 1 ];\n                iC = index + indices[ i + 2 ];\n\n                handleTriangle( iA, iB, iC );\n\n            }\n\n        }\n\n        var tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();\n        var n = new THREE.Vector3(), n2 = new THREE.Vector3();\n        var w, t, test;\n\n        function handleVertex( v ) {\n\n            n.x = normals[ v * 3 ];\n            n.y = normals[ v * 3 + 1 ];\n            n.z = normals[ v * 3 + 2 ];\n\n            n2.copy( n );\n\n            t = tan1[ v ];\n\n            // Gram-Schmidt orthogonalize\n\n            tmp.copy( t );\n            tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n            // Calculate handedness\n\n            tmp2.crossVectors( n2, t );\n            test = tmp2.dot( tan2[ v ] );\n            w = ( test < 0.0 ) ? -1.0 : 1.0;\n\n            tangents[ v * 4 ]     = tmp.x;\n            tangents[ v * 4 + 1 ] = tmp.y;\n            tangents[ v * 4 + 2 ] = tmp.z;\n            tangents[ v * 4 + 3 ] = w;\n\n        }\n\n        for ( j = 0, jl = offsets.length; j < jl; ++ j ) {\n\n            var start = offsets[ j ].start;\n            var count = offsets[ j ].count;\n            var index = offsets[ j ].index;\n\n            for ( i = start, il = start + count; i < il; i += 3 ) {\n\n                iA = index + indices[ i ];\n                iB = index + indices[ i + 1 ];\n                iC = index + indices[ i + 2 ];\n\n                handleVertex( iA );\n                handleVertex( iB );\n                handleVertex( iC );\n\n            }\n\n        }\n\n        this.hasTangents = true;\n        this.tangentsNeedUpdate = true;\n\n    },\n\n    clone: function () {\n\n        var geometry = new THREE.BufferGeometry();\n\n        var types = [ Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];\n\n        for ( var attr in this.attributes ) {\n\n            var sourceAttr = this.attributes[ attr ];\n            var sourceArray = sourceAttr.array;\n\n            var attribute = {\n\n                itemSize: sourceAttr.itemSize,\n                numItems: sourceAttr.numItems,\n                array: null\n\n            };\n\n            for ( var i = 0, il = types.length; i < il; i ++ ) {\n\n                var type = types[ i ];\n\n                if ( sourceArray instanceof type ) {\n\n                    attribute.array = new type( sourceArray );\n                    break;\n\n                }\n\n            }\n\n            geometry.attributes[ attr ] = attribute;\n\n        }\n\n        for ( var i = 0, il = this.offsets.length; i < il; i ++ ) {\n\n            var offset = this.offsets[ i ];\n\n            geometry.offsets.push( {\n\n                start: offset.start,\n                index: offset.index,\n                count: offset.count\n\n            } );\n\n        }\n\n        return geometry;\n\n    },\n\n    dispose: function () {\n\n        this.dispatchEvent( { type: 'dispose' } );\n\n    }\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Camera = function () {\n\n    THREE.Object3D.call( this );\n\n    this.matrixWorldInverse = new THREE.Matrix4();\n\n    this.projectionMatrix = new THREE.Matrix4();\n    this.projectionMatrixInverse = new THREE.Matrix4();\n\n};\n\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Camera.prototype.lookAt = function () {\n\n    // This routine does not support cameras with rotated and/or translated parent(s)\n\n    var m1 = new THREE.Matrix4();\n\n    return function ( vector ) {\n\n        m1.lookAt( this.position, vector, this.up );\n\n        this.quaternion.setFromRotationMatrix( m1 );\n\n    };\n\n}();\n\nTHREE.Camera.prototype.clone = function (camera) {\n\n    if ( camera === undefined ) camera = new THREE.Camera();\n\n    THREE.Object3D.prototype.clone.call( this, camera );\n\n    camera.matrixWorldInverse.copy( this.matrixWorldInverse );\n    camera.projectionMatrix.copy( this.projectionMatrix );\n    camera.projectionMatrixInverse.copy( this.projectionMatrixInverse );\n\n    return camera;\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\n    THREE.Camera.call( this );\n\n    this.left = left;\n    this.right = right;\n    this.top = top;\n    this.bottom = bottom;\n\n    this.near = ( near !== undefined ) ? near : 0.1;\n    this.far = ( far !== undefined ) ? far : 2000;\n\n    this.updateProjectionMatrix();\n\n};\n\nTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\n\nTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\n\n    this.projectionMatrix.makeOrthographic( this.left, this.right, this.top, this.bottom, this.near, this.far );\n\n};\n\nTHREE.OrthographicCamera.prototype.clone = function () {\n\n    var camera = new THREE.OrthographicCamera();\n\n    THREE.Camera.prototype.clone.call( this, camera );\n\n    camera.left = this.left;\n    camera.right = this.right;\n    camera.top = this.top;\n    camera.bottom = this.bottom;\n\n    camera.near = this.near;\n    camera.far = this.far;\n\n    return camera;\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\n\n    THREE.Camera.call( this );\n\n    this.fov = fov !== undefined ? fov : 50;\n    this.aspect = aspect !== undefined ? aspect : 1;\n    this.near = near !== undefined ? near : 0.1;\n    this.far = far !== undefined ? far : 2000;\n\n    this.updateProjectionMatrix();\n\n};\n\nTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\n\n\n/**\n * Uses Focal Length (in mm) to estimate and set FOV\n * 35mm (fullframe) camera is used if frame size is not specified;\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\n */\n\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\n\n    if ( frameHeight === undefined ) frameHeight = 24;\n\n    this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\n    this.updateProjectionMatrix();\n\n}\n\n\n/**\n * Sets an offset in a larger frustum. This is useful for multi-window or\n * multi-monitor/multi-machine setups.\n *\n * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n * the monitors are in grid like this\n *\n *   +---+---+---+\n *   | A | B | C |\n *   +---+---+---+\n *   | D | E | F |\n *   +---+---+---+\n *\n * then for each monitor you would call it like this\n *\n *   var w = 1920;\n *   var h = 1080;\n *   var fullWidth = w * 3;\n *   var fullHeight = h * 2;\n *\n *   --A--\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n *   --B--\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n *   --C--\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n *   --D--\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n *   --E--\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n *   --F--\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n *\n *   Note there is no reason monitors have to be the same size or in a grid.\n */\n\nTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\n\n    this.fullWidth = fullWidth;\n    this.fullHeight = fullHeight;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n\n    this.updateProjectionMatrix();\n\n};\n\n\nTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\n\n    if ( this.fullWidth ) {\n\n        var aspect = this.fullWidth / this.fullHeight;\n        var top = Math.tan( THREE.Math.degToRad( this.fov * 0.5 ) ) * this.near;\n        var bottom = -top;\n        var left = aspect * bottom;\n        var right = aspect * top;\n        var width = Math.abs( right - left );\n        var height = Math.abs( top - bottom );\n\n        this.projectionMatrix.makeFrustum(\n            left + this.x * width / this.fullWidth,\n            left + ( this.x + this.width ) * width / this.fullWidth,\n            top - ( this.y + this.height ) * height / this.fullHeight,\n            top - this.y * height / this.fullHeight,\n            this.near,\n            this.far\n        );\n\n    } else {\n\n        this.projectionMatrix.makePerspective( this.fov, this.aspect, this.near, this.far );\n\n    }\n\n};\n\nTHREE.PerspectiveCamera.prototype.clone = function () {\n\n    var camera = new THREE.PerspectiveCamera();\n\n    THREE.Camera.prototype.clone.call( this, camera );\n\n    camera.fov = this.fov;\n    camera.aspect = this.aspect;\n    camera.near = this.near;\n    camera.far = this.far;\n\n    return camera;\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Light = function ( hex ) {\n\n    THREE.Object3D.call( this );\n\n    this.color = new THREE.Color( hex );\n\n};\n\nTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Light.prototype.clone = function ( light ) {\n\n    if ( light === undefined ) light = new THREE.Light();\n\n    THREE.Object3D.prototype.clone.call( this, light );\n\n    light.color.copy( this.color );\n\n    return light;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AmbientLight = function ( hex ) {\n\n    THREE.Light.call( this, hex );\n\n};\n\nTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.AmbientLight.prototype.clone = function () {\n\n    var light = new THREE.AmbientLight();\n\n    THREE.Light.prototype.clone.call( this, light );\n\n    return light;\n\n};\n\n/**\n * @author MPanknin / http://www.redplant.de/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.AreaLight = function ( hex, intensity ) {\n\n    THREE.Light.call( this, hex );\n\n    this.normal = new THREE.Vector3( 0, -1, 0 );\n    this.right = new THREE.Vector3( 1, 0, 0 );\n\n    this.intensity = ( intensity !== undefined ) ? intensity : 1;\n\n    this.width = 1.0;\n    this.height = 1.0;\n\n    this.constantAttenuation = 1.5;\n    this.linearAttenuation = 0.5;\n    this.quadraticAttenuation = 0.1;\n\n};\n\nTHREE.AreaLight.prototype = Object.create( THREE.Light.prototype );\n\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DirectionalLight = function ( hex, intensity ) {\n\n    THREE.Light.call( this, hex );\n\n    this.position.set( 0, 1, 0 );\n    this.target = new THREE.Object3D();\n\n    this.intensity = ( intensity !== undefined ) ? intensity : 1;\n\n    this.castShadow = false;\n    this.onlyShadow = false;\n\n    //\n\n    this.shadowCameraNear = 50;\n    this.shadowCameraFar = 5000;\n\n    this.shadowCameraLeft = -500;\n    this.shadowCameraRight = 500;\n    this.shadowCameraTop = 500;\n    this.shadowCameraBottom = -500;\n\n    this.shadowCameraVisible = false;\n\n    this.shadowBias = 0;\n    this.shadowDarkness = 0.5;\n\n    this.shadowMapWidth = 512;\n    this.shadowMapHeight = 512;\n\n    //\n\n    this.shadowCascade = false;\n\n    this.shadowCascadeOffset = new THREE.Vector3( 0, 0, -1000 );\n    this.shadowCascadeCount = 2;\n\n    this.shadowCascadeBias = [ 0, 0, 0 ];\n    this.shadowCascadeWidth = [ 512, 512, 512 ];\n    this.shadowCascadeHeight = [ 512, 512, 512 ];\n\n    this.shadowCascadeNearZ = [ -1.000, 0.990, 0.998 ];\n    this.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];\n\n    this.shadowCascadeArray = [];\n\n    //\n\n    this.shadowMap = null;\n    this.shadowMapSize = null;\n    this.shadowCamera = null;\n    this.shadowMatrix = null;\n\n};\n\nTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.DirectionalLight.prototype.clone = function () {\n\n    var light = new THREE.DirectionalLight();\n\n    THREE.Light.prototype.clone.call( this, light );\n\n    light.target = this.target.clone();\n\n    light.intensity = this.intensity;\n\n    light.castShadow = this.castShadow;\n    light.onlyShadow = this.onlyShadow;\n\n    return light;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.HemisphereLight = function ( skyColorHex, groundColorHex, intensity ) {\n\n    THREE.Light.call( this, skyColorHex );\n\n    this.position.set( 0, 100, 0 );\n\n    this.groundColor = new THREE.Color( groundColorHex );\n    this.intensity = ( intensity !== undefined ) ? intensity : 1;\n\n};\n\nTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.HemisphereLight.prototype.clone = function () {\n\n    var light = new THREE.HemisphereLight();\n\n    THREE.Light.prototype.clone.call( this, light );\n\n    light.groundColor.copy( this.groundColor );\n    light.intensity = this.intensity;\n\n    return light;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLight = function ( hex, intensity, distance ) {\n\n    THREE.Light.call( this, hex );\n\n    this.intensity = ( intensity !== undefined ) ? intensity : 1;\n    this.distance = ( distance !== undefined ) ? distance : 0;\n\n};\n\nTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.PointLight.prototype.clone = function () {\n\n    var light = new THREE.PointLight();\n\n    THREE.Light.prototype.clone.call( this, light );\n\n    light.intensity = this.intensity;\n    light.distance = this.distance;\n\n    return light;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpotLight = function ( hex, intensity, distance, angle, exponent ) {\n\n    THREE.Light.call( this, hex );\n\n    this.position.set( 0, 1, 0 );\n    this.target = new THREE.Object3D();\n\n    this.intensity = ( intensity !== undefined ) ? intensity : 1;\n    this.distance = ( distance !== undefined ) ? distance : 0;\n    this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n    this.exponent = ( exponent !== undefined ) ? exponent : 10;\n\n    this.castShadow = false;\n    this.onlyShadow = false;\n\n    //\n\n    this.shadowCameraNear = 50;\n    this.shadowCameraFar = 5000;\n    this.shadowCameraFov = 50;\n\n    this.shadowCameraVisible = false;\n\n    this.shadowBias = 0;\n    this.shadowDarkness = 0.5;\n\n    this.shadowMapWidth = 512;\n    this.shadowMapHeight = 512;\n\n    //\n\n    this.shadowMap = null;\n    this.shadowMapSize = null;\n    this.shadowCamera = null;\n    this.shadowMatrix = null;\n\n};\n\nTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.SpotLight.prototype.clone = function () {\n\n    var light = new THREE.SpotLight();\n\n    THREE.Light.prototype.clone.call( this, light );\n\n    light.target = this.target.clone();\n\n    light.intensity = this.intensity;\n    light.distance = this.distance;\n    light.angle = this.angle;\n    light.exponent = this.exponent;\n\n    light.castShadow = this.castShadow;\n    light.onlyShadow = this.onlyShadow;\n\n    return light;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Loader = function ( showStatus ) {\n\n    this.showStatus = showStatus;\n    this.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;\n\n    this.onLoadStart = function () {};\n    this.onLoadProgress = function () {};\n    this.onLoadComplete = function () {};\n\n};\n\nTHREE.Loader.prototype = {\n\n    constructor: THREE.Loader,\n\n    crossOrigin: 'anonymous',\n\n    addStatusElement: function () {\n\n        var e = document.createElement( \"div\" );\n\n        e.style.position = \"absolute\";\n        e.style.right = \"0px\";\n        e.style.top = \"0px\";\n        e.style.fontSize = \"0.8em\";\n        e.style.textAlign = \"left\";\n        e.style.background = \"rgba(0,0,0,0.25)\";\n        e.style.color = \"#fff\";\n        e.style.width = \"120px\";\n        e.style.padding = \"0.5em 0.5em 0.5em 0.5em\";\n        e.style.zIndex = 1000;\n\n        e.innerHTML = \"Loading ...\";\n\n        return e;\n\n    },\n\n    updateProgress: function ( progress ) {\n\n        var message = \"Loaded \";\n\n        if ( progress.total ) {\n\n            message += ( 100 * progress.loaded / progress.total ).toFixed(0) + \"%\";\n\n\n        } else {\n\n            message += ( progress.loaded / 1000 ).toFixed(2) + \" KB\";\n\n        }\n\n        this.statusDomElement.innerHTML = message;\n\n    },\n\n    extractUrlBase: function ( url ) {\n\n        var parts = url.split( '/' );\n        parts.pop();\n        return ( parts.length < 1 ? '.' : parts.join( '/' ) ) + '/';\n\n    },\n\n    initMaterials: function ( materials, texturePath ) {\n\n        var array = [];\n\n        for ( var i = 0; i < materials.length; ++ i ) {\n\n            array[ i ] = THREE.Loader.prototype.createMaterial( materials[ i ], texturePath );\n\n        }\n\n        return array;\n\n    },\n\n    needsTangents: function ( materials ) {\n\n        for( var i = 0, il = materials.length; i < il; i ++ ) {\n\n            var m = materials[ i ];\n\n            if ( m instanceof THREE.ShaderMaterial ) return true;\n\n        }\n\n        return false;\n\n    },\n\n    createMaterial: function ( m, texturePath ) {\n\n        var _this = this;\n\n        function is_pow2( n ) {\n\n            var l = Math.log( n ) / Math.LN2;\n            return Math.floor( l ) == l;\n\n        }\n\n        function nearest_pow2( n ) {\n\n            var l = Math.log( n ) / Math.LN2;\n            return Math.pow( 2, Math.round(  l ) );\n\n        }\n\n        function load_image( where, url ) {\n\n            var image = new Image();\n\n            image.onload = function () {\n\n                if ( !is_pow2( this.width ) || !is_pow2( this.height ) ) {\n\n                    var width = nearest_pow2( this.width );\n                    var height = nearest_pow2( this.height );\n\n                    where.image.width = width;\n                    where.image.height = height;\n                    where.image.getContext( '2d' ).drawImage( this, 0, 0, width, height );\n\n                } else {\n\n                    where.image = this;\n\n                }\n\n                where.needsUpdate = true;\n\n            };\n\n            image.crossOrigin = _this.crossOrigin;\n            image.src = url;\n\n        }\n\n        function create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {\n\n            var isCompressed = /\\.dds$/i.test( sourceFile );\n            var fullPath = texturePath + \"/\" + sourceFile;\n\n            if ( isCompressed ) {\n\n                var texture = THREE.ImageUtils.loadCompressedTexture( fullPath );\n\n                where[ name ] = texture;\n\n            } else {\n\n                var texture = document.createElement( 'canvas' );\n\n                where[ name ] = new THREE.Texture( texture );\n\n            }\n\n            where[ name ].sourceFile = sourceFile;\n\n            if( repeat ) {\n\n                where[ name ].repeat.set( repeat[ 0 ], repeat[ 1 ] );\n\n                if ( repeat[ 0 ] !== 1 ) where[ name ].wrapS = THREE.RepeatWrapping;\n                if ( repeat[ 1 ] !== 1 ) where[ name ].wrapT = THREE.RepeatWrapping;\n\n            }\n\n            if ( offset ) {\n\n                where[ name ].offset.set( offset[ 0 ], offset[ 1 ] );\n\n            }\n\n            if ( wrap ) {\n\n                var wrapMap = {\n                    \"repeat\": THREE.RepeatWrapping,\n                    \"mirror\": THREE.MirroredRepeatWrapping\n                }\n\n                if ( wrapMap[ wrap[ 0 ] ] !== undefined ) where[ name ].wrapS = wrapMap[ wrap[ 0 ] ];\n                if ( wrapMap[ wrap[ 1 ] ] !== undefined ) where[ name ].wrapT = wrapMap[ wrap[ 1 ] ];\n\n            }\n\n            if ( anisotropy ) {\n\n                where[ name ].anisotropy = anisotropy;\n\n            }\n\n            if ( ! isCompressed ) {\n\n                load_image( where[ name ], fullPath );\n\n            }\n\n        }\n\n        function rgb2hex( rgb ) {\n\n            return ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;\n\n        }\n\n        // defaults\n\n        var mtype = \"MeshLambertMaterial\";\n        var mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };\n\n        // parameters from model file\n\n        if ( m.shading ) {\n\n            var shading = m.shading.toLowerCase();\n\n            if ( shading === \"phong\" ) mtype = \"MeshPhongMaterial\";\n            else if ( shading === \"basic\" ) mtype = \"MeshBasicMaterial\";\n\n        }\n\n        if ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {\n\n            mpars.blending = THREE[ m.blending ];\n\n        }\n\n        if ( m.transparent !== undefined || m.opacity < 1.0 ) {\n\n            mpars.transparent = m.transparent;\n\n        }\n\n        if ( m.depthTest !== undefined ) {\n\n            mpars.depthTest = m.depthTest;\n\n        }\n\n        if ( m.depthWrite !== undefined ) {\n\n            mpars.depthWrite = m.depthWrite;\n\n        }\n\n        if ( m.visible !== undefined ) {\n\n            mpars.visible = m.visible;\n\n        }\n\n        if ( m.flipSided !== undefined ) {\n\n            mpars.side = THREE.BackSide;\n\n        }\n\n        if ( m.doubleSided !== undefined ) {\n\n            mpars.side = THREE.DoubleSide;\n\n        }\n\n        if ( m.wireframe !== undefined ) {\n\n            mpars.wireframe = m.wireframe;\n\n        }\n\n        if ( m.vertexColors !== undefined ) {\n\n            if ( m.vertexColors === \"face\" ) {\n\n                mpars.vertexColors = THREE.FaceColors;\n\n            } else if ( m.vertexColors ) {\n\n                mpars.vertexColors = THREE.VertexColors;\n\n            }\n\n        }\n\n        // colors\n\n        if ( m.colorDiffuse ) {\n\n            mpars.color = rgb2hex( m.colorDiffuse );\n\n        } else if ( m.DbgColor ) {\n\n            mpars.color = m.DbgColor;\n\n        }\n\n        if ( m.colorSpecular ) {\n\n            mpars.specular = rgb2hex( m.colorSpecular );\n\n        }\n\n        if ( m.colorAmbient ) {\n\n            mpars.ambient = rgb2hex( m.colorAmbient );\n\n        }\n\n        // modifiers\n\n        if ( m.transparency ) {\n\n            mpars.opacity = m.transparency;\n\n        }\n\n        if ( m.specularCoef ) {\n\n            mpars.shininess = m.specularCoef;\n\n        }\n\n        // textures\n\n        if ( m.mapDiffuse && texturePath ) {\n\n            create_texture( mpars, \"map\", m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\n        }\n\n        if ( m.mapLight && texturePath ) {\n\n            create_texture( mpars, \"lightMap\", m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\n        }\n\n        if ( m.mapBump && texturePath ) {\n\n            create_texture( mpars, \"bumpMap\", m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\n        }\n\n        if ( m.mapNormal && texturePath ) {\n\n            create_texture( mpars, \"normalMap\", m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\n        }\n\n        if ( m.mapSpecular && texturePath ) {\n\n            create_texture( mpars, \"specularMap\", m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\n        }\n\n        //\n\n        if ( m.mapBumpScale ) {\n\n            mpars.bumpScale = m.mapBumpScale;\n\n        }\n\n        // special case for normal mapped material\n\n        if ( m.mapNormal ) {\n\n            var shader = THREE.ShaderLib[ \"normalmap\" ];\n            var uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n            uniforms[ \"tNormal\" ].value = mpars.normalMap;\n\n            if ( m.mapNormalFactor ) {\n\n                uniforms[ \"uNormalScale\" ].value.set( m.mapNormalFactor, m.mapNormalFactor );\n\n            }\n\n            if ( mpars.map ) {\n\n                uniforms[ \"tDiffuse\" ].value = mpars.map;\n                uniforms[ \"enableDiffuse\" ].value = true;\n\n            }\n\n            if ( mpars.specularMap ) {\n\n                uniforms[ \"tSpecular\" ].value = mpars.specularMap;\n                uniforms[ \"enableSpecular\" ].value = true;\n\n            }\n\n            if ( mpars.lightMap ) {\n\n                uniforms[ \"tAO\" ].value = mpars.lightMap;\n                uniforms[ \"enableAO\" ].value = true;\n\n            }\n\n            // for the moment don't handle displacement texture\n\n            uniforms[ \"uDiffuseColor\" ].value.setHex( mpars.color );\n            uniforms[ \"uSpecularColor\" ].value.setHex( mpars.specular );\n            uniforms[ \"uAmbientColor\" ].value.setHex( mpars.ambient );\n\n            uniforms[ \"uShininess\" ].value = mpars.shininess;\n\n            if ( mpars.opacity !== undefined ) {\n\n                uniforms[ \"uOpacity\" ].value = mpars.opacity;\n\n            }\n\n            var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\n            var material = new THREE.ShaderMaterial( parameters );\n\n            if ( mpars.transparent ) {\n\n                material.transparent = true;\n\n            }\n\n        } else {\n\n            var material = new THREE[ mtype ]( mpars );\n\n        }\n\n        if ( m.DbgName !== undefined ) material.name = m.DbgName;\n\n        return material;\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.XHRLoader = function ( manager ) {\n\n    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.XHRLoader.prototype = {\n\n    constructor: THREE.XHRLoader,\n\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n        var request = new XMLHttpRequest();\n\n        if ( onLoad !== undefined ) {\n\n            request.addEventListener( 'load', function ( event ) {\n\n                onLoad( event.target.responseText );\n                scope.manager.itemEnd( url );\n\n            }, false );\n\n        }\n\n        if ( onProgress !== undefined ) {\n\n            request.addEventListener( 'progress', function ( event ) {\n\n                onProgress( event );\n\n            }, false );\n\n        }\n\n        if ( onError !== undefined ) {\n\n            request.addEventListener( 'error', function ( event ) {\n\n                onError( event );\n\n            }, false );\n\n        }\n\n        if ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;\n\n        request.open( 'GET', url, true );\n        request.send( null );\n\n        scope.manager.itemStart( url );\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ImageLoader = function ( manager ) {\n\n    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.ImageLoader.prototype = {\n\n    constructor: THREE.ImageLoader,\n\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n        var image = document.createElement( 'img' );\n\n        if ( onLoad !== undefined ) {\n\n            image.addEventListener( 'load', function ( event ) {\n\n                scope.manager.itemEnd( url );\n                onLoad( this );\n\n            }, false );\n\n        }\n\n        if ( onProgress !== undefined ) {\n\n            image.addEventListener( 'progress', function ( event ) {\n\n                onProgress( event );\n\n            }, false );\n\n        }\n\n        if ( onError !== undefined ) {\n\n            image.addEventListener( 'error', function ( event ) {\n\n                onError( event );\n\n            }, false );\n\n        }\n\n        if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n        image.src = url;\n\n        scope.manager.itemStart( url );\n\n        return image;\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    }\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.JSONLoader = function ( showStatus ) {\n\n    THREE.Loader.call( this, showStatus );\n\n    this.withCredentials = false;\n\n};\n\nTHREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );\n\nTHREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {\n\n    var scope = this;\n\n    // todo: unify load API to for easier SceneLoader use\n\n    texturePath = texturePath && ( typeof texturePath === \"string\" ) ? texturePath : this.extractUrlBase( url );\n\n    this.onLoadStart();\n    this.loadAjaxJSON( this, url, callback, texturePath );\n\n};\n\nTHREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {\n\n    var xhr = new XMLHttpRequest();\n\n    var length = 0;\n\n    xhr.onreadystatechange = function () {\n\n        if ( xhr.readyState === xhr.DONE ) {\n\n            if ( xhr.status === 200 || xhr.status === 0 ) {\n\n                if ( xhr.responseText ) {\n\n                    var json = JSON.parse( xhr.responseText );\n                    var result = context.parse( json, texturePath );\n                    callback( result.geometry, result.materials );\n\n                } else {\n\n                    console.warn( \"THREE.JSONLoader: [\" + url + \"] seems to be unreachable or file there is empty\" );\n\n                }\n\n                // in context of more complex asset initialization\n                // do not block on single failed file\n                // maybe should go even one more level up\n\n                context.onLoadComplete();\n\n            } else {\n\n                console.error( \"THREE.JSONLoader: Couldn't load [\" + url + \"] [\" + xhr.status + \"]\" );\n\n            }\n\n        } else if ( xhr.readyState === xhr.LOADING ) {\n\n            if ( callbackProgress ) {\n\n                if ( length === 0 ) {\n\n                    length = xhr.getResponseHeader( \"Content-Length\" );\n\n                }\n\n                callbackProgress( { total: length, loaded: xhr.responseText.length } );\n\n            }\n\n        } else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {\n\n            if ( callbackProgress !== undefined ) {\n\n                length = xhr.getResponseHeader( \"Content-Length\" );\n\n            }\n\n        }\n\n    };\n\n    xhr.open( \"GET\", url, true );\n    xhr.withCredentials = this.withCredentials;\n    xhr.send( null );\n\n};\n\nTHREE.JSONLoader.prototype.parse = function ( json, texturePath ) {\n\n    var scope = this,\n        geometry = new THREE.Geometry(),\n        scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n    parseModel( scale );\n\n    parseSkin();\n    parseMorphing( scale );\n\n    geometry.computeCentroids();\n    geometry.computeFaceNormals();\n    geometry.computeBoundingSphere();\n\n    function parseModel( scale ) {\n\n        function isBitSet( value, position ) {\n\n            return value & ( 1 << position );\n\n        }\n\n        var i, j, fi,\n\n            offset, zLength,\n\n            colorIndex, normalIndex, uvIndex, materialIndex,\n\n            type,\n            isQuad,\n            hasMaterial,\n            hasFaceVertexUv,\n            hasFaceNormal, hasFaceVertexNormal,\n            hasFaceColor, hasFaceVertexColor,\n\n            vertex, face, faceA, faceB, color, hex, normal,\n\n            uvLayer, uv, u, v,\n\n            faces = json.faces,\n            vertices = json.vertices,\n            normals = json.normals,\n            colors = json.colors,\n\n            nUvLayers = 0;\n\n        if ( json.uvs !== undefined ) {\n\n            // disregard empty arrays\n\n            for ( i = 0; i < json.uvs.length; i++ ) {\n\n                if ( json.uvs[ i ].length ) nUvLayers ++;\n\n            }\n\n            for ( i = 0; i < nUvLayers; i++ ) {\n\n                geometry.faceVertexUvs[ i ] = [];\n\n            }\n\n        }\n\n        offset = 0;\n        zLength = vertices.length;\n\n        while ( offset < zLength ) {\n\n            vertex = new THREE.Vector3();\n\n            vertex.x = vertices[ offset ++ ] * scale;\n            vertex.y = vertices[ offset ++ ] * scale;\n            vertex.z = vertices[ offset ++ ] * scale;\n\n            geometry.vertices.push( vertex );\n\n        }\n\n        offset = 0;\n        zLength = faces.length;\n\n        while ( offset < zLength ) {\n\n            type = faces[ offset ++ ];\n\n\n            isQuad              = isBitSet( type, 0 );\n            hasMaterial         = isBitSet( type, 1 );\n            hasFaceVertexUv     = isBitSet( type, 3 );\n            hasFaceNormal       = isBitSet( type, 4 );\n            hasFaceVertexNormal = isBitSet( type, 5 );\n            hasFaceColor\t    = isBitSet( type, 6 );\n            hasFaceVertexColor  = isBitSet( type, 7 );\n\n            // console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n            if ( isQuad ) {\n\n                faceA = new THREE.Face3();\n                faceA.a = faces[ offset ];\n                faceA.b = faces[ offset + 1 ];\n                faceA.c = faces[ offset + 3 ];\n\n                faceB = new THREE.Face3();\n                faceB.a = faces[ offset + 1 ];\n                faceB.b = faces[ offset + 2 ];\n                faceB.c = faces[ offset + 3 ];\n\n                offset += 4;\n\n                if ( hasMaterial ) {\n\n                    materialIndex = faces[ offset ++ ];\n                    faceA.materialIndex = materialIndex;\n                    faceB.materialIndex = materialIndex;\n\n                }\n\n                // to get face <=> uv index correspondence\n\n                fi = geometry.faces.length;\n\n                if ( hasFaceVertexUv ) {\n\n                    for ( i = 0; i < nUvLayers; i++ ) {\n\n                        uvLayer = json.uvs[ i ];\n\n                        geometry.faceVertexUvs[ i ][ fi ] = [];\n                        geometry.faceVertexUvs[ i ][ fi + 1 ] = []\n\n                        for ( j = 0; j < 4; j ++ ) {\n\n                            uvIndex = faces[ offset ++ ];\n\n                            u = uvLayer[ uvIndex * 2 ];\n                            v = uvLayer[ uvIndex * 2 + 1 ];\n\n                            uv = new THREE.Vector2( u, v );\n\n                            if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n                            if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n                        }\n\n                    }\n\n                }\n\n                if ( hasFaceNormal ) {\n\n                    normalIndex = faces[ offset ++ ] * 3;\n\n                    faceA.normal.set(\n                        normals[ normalIndex ++ ],\n                        normals[ normalIndex ++ ],\n                        normals[ normalIndex ]\n                    );\n\n                    faceB.normal.copy( faceA.normal );\n\n                }\n\n                if ( hasFaceVertexNormal ) {\n\n                    for ( i = 0; i < 4; i++ ) {\n\n                        normalIndex = faces[ offset ++ ] * 3;\n\n                        normal = new THREE.Vector3(\n                            normals[ normalIndex ++ ],\n                            normals[ normalIndex ++ ],\n                            normals[ normalIndex ]\n                        );\n\n\n                        if ( i !== 2 ) faceA.vertexNormals.push( normal );\n                        if ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n                    }\n\n                }\n\n\n                if ( hasFaceColor ) {\n\n                    colorIndex = faces[ offset ++ ];\n                    hex = colors[ colorIndex ];\n\n                    faceA.color.setHex( hex );\n                    faceB.color.setHex( hex );\n\n                }\n\n\n                if ( hasFaceVertexColor ) {\n\n                    for ( i = 0; i < 4; i++ ) {\n\n                        colorIndex = faces[ offset ++ ];\n                        hex = colors[ colorIndex ];\n\n                        if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n                        if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n                    }\n\n                }\n\n                geometry.faces.push( faceA );\n                geometry.faces.push( faceB );\n\n            } else {\n\n                face = new THREE.Face3();\n                face.a = faces[ offset ++ ];\n                face.b = faces[ offset ++ ];\n                face.c = faces[ offset ++ ];\n\n                if ( hasMaterial ) {\n\n                    materialIndex = faces[ offset ++ ];\n                    face.materialIndex = materialIndex;\n\n                }\n\n                // to get face <=> uv index correspondence\n\n                fi = geometry.faces.length;\n\n                if ( hasFaceVertexUv ) {\n\n                    for ( i = 0; i < nUvLayers; i++ ) {\n\n                        uvLayer = json.uvs[ i ];\n\n                        geometry.faceVertexUvs[ i ][ fi ] = [];\n\n                        for ( j = 0; j < 3; j ++ ) {\n\n                            uvIndex = faces[ offset ++ ];\n\n                            u = uvLayer[ uvIndex * 2 ];\n                            v = uvLayer[ uvIndex * 2 + 1 ];\n\n                            uv = new THREE.Vector2( u, v );\n\n                            geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n                        }\n\n                    }\n\n                }\n\n                if ( hasFaceNormal ) {\n\n                    normalIndex = faces[ offset ++ ] * 3;\n\n                    face.normal.set(\n                        normals[ normalIndex ++ ],\n                        normals[ normalIndex ++ ],\n                        normals[ normalIndex ]\n                    );\n\n                }\n\n                if ( hasFaceVertexNormal ) {\n\n                    for ( i = 0; i < 3; i++ ) {\n\n                        normalIndex = faces[ offset ++ ] * 3;\n\n                        normal = new THREE.Vector3(\n                            normals[ normalIndex ++ ],\n                            normals[ normalIndex ++ ],\n                            normals[ normalIndex ]\n                        );\n\n                        face.vertexNormals.push( normal );\n\n                    }\n\n                }\n\n\n                if ( hasFaceColor ) {\n\n                    colorIndex = faces[ offset ++ ];\n                    face.color.setHex( colors[ colorIndex ] );\n\n                }\n\n\n                if ( hasFaceVertexColor ) {\n\n                    for ( i = 0; i < 3; i++ ) {\n\n                        colorIndex = faces[ offset ++ ];\n                        face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n                    }\n\n                }\n\n                geometry.faces.push( face );\n\n            }\n\n        }\n\n    };\n\n    function parseSkin() {\n\n        var i, l, x, y, z, w, a, b, c, d;\n\n        if ( json.skinWeights ) {\n\n            for ( i = 0, l = json.skinWeights.length; i < l; i += 2 ) {\n\n                x = json.skinWeights[ i     ];\n                y = json.skinWeights[ i + 1 ];\n                z = 0;\n                w = 0;\n\n                geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n            }\n\n        }\n\n        if ( json.skinIndices ) {\n\n            for ( i = 0, l = json.skinIndices.length; i < l; i += 2 ) {\n\n                a = json.skinIndices[ i     ];\n                b = json.skinIndices[ i + 1 ];\n                c = 0;\n                d = 0;\n\n                geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n            }\n\n        }\n\n        geometry.bones = json.bones;\n        // could change this to json.animations[0] or remove completely\n        geometry.animation = json.animation;\n        geometry.animations = json.animations;\n    };\n\n    function parseMorphing( scale ) {\n\n        if ( json.morphTargets !== undefined ) {\n\n            var i, l, v, vl, dstVertices, srcVertices;\n\n            for ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n                geometry.morphTargets[ i ] = {};\n                geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n                geometry.morphTargets[ i ].vertices = [];\n\n                dstVertices = geometry.morphTargets[ i ].vertices;\n                srcVertices = json.morphTargets [ i ].vertices;\n\n                for( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n                    var vertex = new THREE.Vector3();\n                    vertex.x = srcVertices[ v ] * scale;\n                    vertex.y = srcVertices[ v + 1 ] * scale;\n                    vertex.z = srcVertices[ v + 2 ] * scale;\n\n                    dstVertices.push( vertex );\n\n                }\n\n            }\n\n        }\n\n        if ( json.morphColors !== undefined ) {\n\n            var i, l, c, cl, dstColors, srcColors, color;\n\n            for ( i = 0, l = json.morphColors.length; i < l; i++ ) {\n\n                geometry.morphColors[ i ] = {};\n                geometry.morphColors[ i ].name = json.morphColors[ i ].name;\n                geometry.morphColors[ i ].colors = [];\n\n                dstColors = geometry.morphColors[ i ].colors;\n                srcColors = json.morphColors [ i ].colors;\n\n                for ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {\n\n                    color = new THREE.Color( 0xffaa00 );\n                    color.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );\n                    dstColors.push( color );\n\n                }\n\n            }\n\n        }\n\n    };\n\n    if ( json.materials === undefined ) {\n\n        return { geometry: geometry };\n\n    } else {\n\n        var materials = this.initMaterials( json.materials, texturePath );\n\n        if ( this.needsTangents( materials ) ) {\n\n            geometry.computeTangents();\n\n        }\n\n        return { geometry: geometry, materials: materials };\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\n    var scope = this;\n\n    var loaded = 0, total = 0;\n\n    this.onLoad = onLoad;\n    this.onProgress = onProgress;\n    this.onError = onError;\n\n    this.itemStart = function ( url ) {\n\n        total ++;\n\n    };\n\n    this.itemEnd = function ( url ) {\n\n        loaded ++;\n\n        if ( scope.onProgress !== undefined ) {\n\n            scope.onProgress( url, loaded, total );\n\n        }\n\n        if ( loaded === total && scope.onLoad !== undefined ) {\n\n            scope.onLoad();\n\n        }\n\n    };\n\n};\n\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometryLoader = function ( manager ) {\n\n    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.BufferGeometryLoader.prototype = {\n\n    constructor: THREE.BufferGeometryLoader,\n\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n\n        var loader = new THREE.XHRLoader();\n        loader.setCrossOrigin( this.crossOrigin );\n        loader.load( url, function ( text ) {\n\n            onLoad( scope.parse( JSON.parse( text ) ) );\n\n        } );\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    },\n\n    parse: function ( json ) {\n\n        var geometry = new THREE.BufferGeometry();\n\n        var attributes = json.attributes;\n        var offsets = json.offsets;\n        var boundingSphere = json.boundingSphere;\n\n        for ( var key in attributes ) {\n\n            var attribute = attributes[ key ];\n\n            geometry.attributes[ key ] = {\n                itemSize: attribute.itemSize,\n                array: new self[ attribute.type ]( attribute.array )\n            }\n\n        }\n\n        if ( offsets !== undefined ) {\n\n            geometry.offsets = JSON.parse( JSON.stringify( offsets ) );\n\n        }\n\n        if ( boundingSphere !== undefined ) {\n\n            geometry.boundingSphere = new THREE.Sphere(\n                new THREE.Vector3().fromArray( boundingSphere.center !== undefined ? boundingSphere.center : [ 0, 0, 0 ] ),\n                boundingSphere.radius\n            );\n\n        }\n\n        return geometry;\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GeometryLoader = function ( manager ) {\n\n    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.GeometryLoader.prototype = {\n\n    constructor: THREE.GeometryLoader,\n\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n\n        var loader = new THREE.XHRLoader();\n        loader.setCrossOrigin( this.crossOrigin );\n        loader.load( url, function ( text ) {\n\n            onLoad( scope.parse( JSON.parse( text ) ) );\n\n        } );\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    },\n\n    parse: function ( json ) {\n\n\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MaterialLoader = function ( manager ) {\n\n    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.MaterialLoader.prototype = {\n\n    constructor: THREE.MaterialLoader,\n\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n\n        var loader = new THREE.XHRLoader();\n        loader.setCrossOrigin( this.crossOrigin );\n        loader.load( url, function ( text ) {\n\n            onLoad( scope.parse( JSON.parse( text ) ) );\n\n        } );\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    },\n\n    parse: function ( json ) {\n\n        var material = new THREE[ json.type ];\n\n        if ( json.color !== undefined ) material.color.setHex( json.color );\n        if ( json.ambient !== undefined ) material.ambient.setHex( json.ambient );\n        if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n        if ( json.specular !== undefined ) material.specular.setHex( json.specular );\n        if ( json.shininess !== undefined ) material.shininess = json.shininess;\n        if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n        if ( json.blending !== undefined ) material.blending = json.blending;\n        if ( json.opacity !== undefined ) material.opacity = json.opacity;\n        if ( json.transparent !== undefined ) material.transparent = json.transparent;\n        if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\n        if ( json.materials !== undefined ) {\n\n            for ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n                material.materials.push( this.parse( json.materials[ i ] ) );\n\n            }\n\n        }\n\n        return material;\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ObjectLoader = function ( manager ) {\n\n    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.ObjectLoader.prototype = {\n\n    constructor: THREE.ObjectLoader,\n\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n\n        var loader = new THREE.XHRLoader( scope.manager );\n        loader.setCrossOrigin( this.crossOrigin );\n        loader.load( url, function ( text ) {\n\n            onLoad( scope.parse( JSON.parse( text ) ) );\n\n        } );\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    },\n\n    parse: function ( json ) {\n\n        var geometries = this.parseGeometries( json.geometries );\n        var materials = this.parseMaterials( json.materials );\n        var object = this.parseObject( json.object, geometries, materials );\n\n        return object;\n\n    },\n\n    parseGeometries: function ( json ) {\n\n        var geometries = {};\n\n        if ( json !== undefined ) {\n\n            var geometryLoader = new THREE.JSONLoader();\n            var bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n            for ( var i = 0, l = json.length; i < l; i ++ ) {\n\n                var geometry;\n                var data = json[ i ];\n\n                switch ( data.type ) {\n\n                    case 'PlaneGeometry':\n\n                        geometry = new THREE.PlaneGeometry(\n                            data.width,\n                            data.height,\n                            data.widthSegments,\n                            data.heightSegments\n                        );\n\n                        break;\n\n                    case 'CircleGeometry':\n\n                        geometry = new THREE.CircleGeometry(\n                            data.radius,\n                            data.segments\n                        );\n\n                        break;\n\n                    case 'CubeGeometry':\n\n                        geometry = new THREE.CubeGeometry(\n                            data.width,\n                            data.height,\n                            data.depth,\n                            data.widthSegments,\n                            data.heightSegments,\n                            data.depthSegments\n                        );\n\n                        break;\n\n                    case 'CylinderGeometry':\n\n                        geometry = new THREE.CylinderGeometry(\n                            data.radiusTop,\n                            data.radiusBottom,\n                            data.height,\n                            data.radiusSegments,\n                            data.heightSegments,\n                            data.openEnded\n                        );\n\n                        break;\n\n                    case 'SphereGeometry':\n\n                        geometry = new THREE.SphereGeometry(\n                            data.radius,\n                            data.widthSegments,\n                            data.heightSegments,\n                            data.phiStart,\n                            data.phiLength,\n                            data.thetaStart,\n                            data.thetaLength\n                        );\n\n                        break;\n\n                    case 'IcosahedronGeometry':\n\n                        geometry = new THREE.IcosahedronGeometry(\n                            data.radius,\n                            data.detail\n                        );\n\n                        break;\n\n                    case 'TorusGeometry':\n\n                        geometry = new THREE.TorusGeometry(\n                            data.radius,\n                            data.tube,\n                            data.radialSegments,\n                            data.tubularSegments,\n                            data.arc\n                        );\n\n                        break;\n\n                    case 'TorusKnotGeometry':\n\n                        geometry = new THREE.TorusKnotGeometry(\n                            data.radius,\n                            data.tube,\n                            data.radialSegments,\n                            data.tubularSegments,\n                            data.p,\n                            data.q,\n                            data.heightScale\n                        );\n\n                        break;\n\n                    case 'BufferGeometry':\n\n                        geometry = bufferGeometryLoader.parse( data.data );\n\n                        break;\n\n                    case 'Geometry':\n\n                        geometry = geometryLoader.parse( data.data ).geometry;\n\n                        break;\n\n                }\n\n                geometry.uuid = data.uuid;\n\n                if ( data.name !== undefined ) geometry.name = data.name;\n\n                geometries[ data.uuid ] = geometry;\n\n            }\n\n        }\n\n        return geometries;\n\n    },\n\n    parseMaterials: function ( json ) {\n\n        var materials = {};\n\n        if ( json !== undefined ) {\n\n            var loader = new THREE.MaterialLoader();\n\n            for ( var i = 0, l = json.length; i < l; i ++ ) {\n\n                var data = json[ i ];\n                var material = loader.parse( data );\n\n                material.uuid = data.uuid;\n\n                if ( data.name !== undefined ) material.name = data.name;\n\n                materials[ data.uuid ] = material;\n\n            }\n\n        }\n\n        return materials;\n\n    },\n\n    parseObject: function () {\n\n        var matrix = new THREE.Matrix4();\n\n        return function ( data, geometries, materials ) {\n\n            var object;\n\n            switch ( data.type ) {\n\n                case 'Scene':\n\n                    object = new THREE.Scene();\n\n                    break;\n\n                case 'PerspectiveCamera':\n\n                    object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n                    break;\n\n                case 'OrthographicCamera':\n\n                    object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n                    break;\n\n                case 'AmbientLight':\n\n                    object = new THREE.AmbientLight( data.color );\n\n                    break;\n\n                case 'DirectionalLight':\n\n                    object = new THREE.DirectionalLight( data.color, data.intensity );\n\n                    break;\n\n                case 'PointLight':\n\n                    object = new THREE.PointLight( data.color, data.intensity, data.distance );\n\n                    break;\n\n                case 'SpotLight':\n\n                    object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent );\n\n                    break;\n\n                case 'HemisphereLight':\n\n                    object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\n                    break;\n\n                case 'Mesh':\n\n                    var geometry = geometries[ data.geometry ];\n                    var material = materials[ data.material ];\n\n                    if ( geometry === undefined ) {\n\n                        console.error( 'THREE.ObjectLoader: Undefined geometry ' + data.geometry );\n\n                    }\n\n                    if ( material === undefined ) {\n\n                        console.error( 'THREE.ObjectLoader: Undefined material ' + data.material );\n\n                    }\n\n                    object = new THREE.Mesh( geometry, material );\n\n                    break;\n\n                default:\n\n                    object = new THREE.Object3D();\n\n            }\n\n            object.uuid = data.uuid;\n\n            if ( data.name !== undefined ) object.name = data.name;\n            if ( data.matrix !== undefined ) {\n\n                matrix.fromArray( data.matrix );\n                matrix.decompose( object.position, object.quaternion, object.scale );\n\n            } else {\n\n                if ( data.position !== undefined ) object.position.fromArray( data.position );\n                if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n                if ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n            }\n\n            if ( data.visible !== undefined ) object.visible = data.visible;\n            if ( data.userData !== undefined ) object.userData = data.userData;\n\n            if ( data.children !== undefined ) {\n\n                for ( var child in data.children ) {\n\n                    object.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n                }\n\n            }\n\n            return object;\n\n        }\n\n    }()\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SceneLoader = function () {\n\n    this.onLoadStart = function () {};\n    this.onLoadProgress = function() {};\n    this.onLoadComplete = function () {};\n\n    this.callbackSync = function () {};\n    this.callbackProgress = function () {};\n\n    this.geometryHandlers = {};\n    this.hierarchyHandlers = {};\n\n    this.addGeometryHandler( \"ascii\", THREE.JSONLoader );\n\n};\n\nTHREE.SceneLoader.prototype = {\n\n    constructor: THREE.SceneLoader,\n\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n\n        var loader = new THREE.XHRLoader( scope.manager );\n        loader.setCrossOrigin( this.crossOrigin );\n        loader.load( url, function ( text ) {\n\n            scope.parse( JSON.parse( text ), onLoad, url );\n\n        } );\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    },\n\n    addGeometryHandler: function ( typeID, loaderClass ) {\n\n        this.geometryHandlers[ typeID ] = { \"loaderClass\": loaderClass };\n\n    },\n\n    addHierarchyHandler: function ( typeID, loaderClass ) {\n\n        this.hierarchyHandlers[ typeID ] = { \"loaderClass\": loaderClass };\n\n    },\n\n    parse: function ( json, callbackFinished, url ) {\n\n        var scope = this;\n\n        var urlBase = THREE.Loader.prototype.extractUrlBase( url );\n\n        var geometry, material, camera, fog,\n            texture, images, color,\n            light, hex, intensity,\n            counter_models, counter_textures,\n            total_models, total_textures,\n            result;\n\n        var target_array = [];\n\n        var data = json;\n\n        // async geometry loaders\n\n        for ( var typeID in this.geometryHandlers ) {\n\n            var loaderClass = this.geometryHandlers[ typeID ][ \"loaderClass\" ];\n            this.geometryHandlers[ typeID ][ \"loaderObject\" ] = new loaderClass();\n\n        }\n\n        // async hierachy loaders\n\n        for ( var typeID in this.hierarchyHandlers ) {\n\n            var loaderClass = this.hierarchyHandlers[ typeID ][ \"loaderClass\" ];\n            this.hierarchyHandlers[ typeID ][ \"loaderObject\" ] = new loaderClass();\n\n        }\n\n        counter_models = 0;\n        counter_textures = 0;\n\n        result = {\n\n            scene: new THREE.Scene(),\n            geometries: {},\n            face_materials: {},\n            materials: {},\n            textures: {},\n            objects: {},\n            cameras: {},\n            lights: {},\n            fogs: {},\n            empties: {},\n            groups: {}\n\n        };\n\n        if ( data.transform ) {\n\n            var position = data.transform.position,\n                rotation = data.transform.rotation,\n                scale = data.transform.scale;\n\n            if ( position ) {\n\n                result.scene.position.fromArray( position );\n\n            }\n\n            if ( rotation ) {\n\n                result.scene.rotation.fromArray( rotation );\n\n            }\n\n            if ( scale ) {\n\n                result.scene.scale.fromArray( scale );\n\n            }\n\n            if ( position || rotation || scale ) {\n\n                result.scene.updateMatrix();\n                result.scene.updateMatrixWorld();\n\n            }\n\n        }\n\n        function get_url( source_url, url_type ) {\n\n            if ( url_type == \"relativeToHTML\" ) {\n\n                return source_url;\n\n            } else {\n\n                return urlBase + \"/\" + source_url;\n\n            }\n\n        };\n\n        // toplevel loader function, delegates to handle_children\n\n        function handle_objects() {\n\n            handle_children( result.scene, data.objects );\n\n        }\n\n        // handle all the children from the loaded json and attach them to given parent\n\n        function handle_children( parent, children ) {\n\n            var mat, dst, pos, rot, scl, quat;\n\n            for ( var objID in children ) {\n\n                // check by id if child has already been handled,\n                // if not, create new object\n\n                var object = result.objects[ objID ];\n                var objJSON = children[ objID ];\n\n                if ( object === undefined ) {\n\n                    // meshes\n\n                    if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {\n\n                        if ( objJSON.loading === undefined ) {\n\n                            var reservedTypes = {\n                                \"type\": 1, \"url\": 1, \"material\": 1,\n                                \"position\": 1, \"rotation\": 1, \"scale\" : 1,\n                                \"visible\": 1, \"children\": 1, \"userData\": 1,\n                                \"skin\": 1, \"morph\": 1, \"mirroredLoop\": 1, \"duration\": 1\n                            };\n\n                            var loaderParameters = {};\n\n                            for ( var parType in objJSON ) {\n\n                                if ( ! ( parType in reservedTypes ) ) {\n\n                                    loaderParameters[ parType ] = objJSON[ parType ];\n\n                                }\n\n                            }\n\n                            material = result.materials[ objJSON.material ];\n\n                            objJSON.loading = true;\n\n                            var loader = scope.hierarchyHandlers[ objJSON.type ][ \"loaderObject\" ];\n\n                            // ColladaLoader\n\n                            if ( loader.options ) {\n\n                                loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );\n\n                                // UTF8Loader\n                                // OBJLoader\n\n                            } else {\n\n                                loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ), loaderParameters );\n\n                            }\n\n                        }\n\n                    } else if ( objJSON.geometry !== undefined ) {\n\n                        geometry = result.geometries[ objJSON.geometry ];\n\n                        // geometry already loaded\n\n                        if ( geometry ) {\n\n                            var needsTangents = false;\n\n                            material = result.materials[ objJSON.material ];\n                            needsTangents = material instanceof THREE.ShaderMaterial;\n\n                            pos = objJSON.position;\n                            rot = objJSON.rotation;\n                            scl = objJSON.scale;\n                            mat = objJSON.matrix;\n                            quat = objJSON.quaternion;\n\n                            // use materials from the model file\n                            // if there is no material specified in the object\n\n                            if ( ! objJSON.material ) {\n\n                                material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );\n\n                            }\n\n                            // use materials from the model file\n                            // if there is just empty face material\n                            // (must create new material as each model has its own face material)\n\n                            if ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {\n\n                                material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );\n\n                            }\n\n                            if ( material instanceof THREE.MeshFaceMaterial ) {\n\n                                for ( var i = 0; i < material.materials.length; i ++ ) {\n\n                                    needsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );\n\n                                }\n\n                            }\n\n                            if ( needsTangents ) {\n\n                                geometry.computeTangents();\n\n                            }\n\n                            if ( objJSON.skin ) {\n\n                                object = new THREE.SkinnedMesh( geometry, material );\n\n                            } else if ( objJSON.morph ) {\n\n                                object = new THREE.MorphAnimMesh( geometry, material );\n\n                                if ( objJSON.duration !== undefined ) {\n\n                                    object.duration = objJSON.duration;\n\n                                }\n\n                                if ( objJSON.time !== undefined ) {\n\n                                    object.time = objJSON.time;\n\n                                }\n\n                                if ( objJSON.mirroredLoop !== undefined ) {\n\n                                    object.mirroredLoop = objJSON.mirroredLoop;\n\n                                }\n\n                                if ( material.morphNormals ) {\n\n                                    geometry.computeMorphNormals();\n\n                                }\n\n                            } else {\n\n                                object = new THREE.Mesh( geometry, material );\n\n                            }\n\n                            object.name = objID;\n\n                            if ( mat ) {\n\n                                object.matrixAutoUpdate = false;\n                                object.matrix.set(\n                                    mat[0],  mat[1],  mat[2],  mat[3],\n                                    mat[4],  mat[5],  mat[6],  mat[7],\n                                    mat[8],  mat[9],  mat[10], mat[11],\n                                    mat[12], mat[13], mat[14], mat[15]\n                                );\n\n                            } else {\n\n                                object.position.fromArray( pos );\n\n                                if ( quat ) {\n\n                                    object.quaternion.fromArray( quat );\n\n                                } else {\n\n                                    object.rotation.fromArray( rot );\n\n                                }\n\n                                object.scale.fromArray( scl );\n\n                            }\n\n                            object.visible = objJSON.visible;\n                            object.castShadow = objJSON.castShadow;\n                            object.receiveShadow = objJSON.receiveShadow;\n\n                            parent.add( object );\n\n                            result.objects[ objID ] = object;\n\n                        }\n\n                        // lights\n\n                    } else if ( objJSON.type === \"DirectionalLight\" || objJSON.type === \"PointLight\" || objJSON.type === \"AmbientLight\" ) {\n\n                        hex = ( objJSON.color !== undefined ) ? objJSON.color : 0xffffff;\n                        intensity = ( objJSON.intensity !== undefined ) ? objJSON.intensity : 1;\n\n                        if ( objJSON.type === \"DirectionalLight\" ) {\n\n                            pos = objJSON.direction;\n\n                            light = new THREE.DirectionalLight( hex, intensity );\n                            light.position.fromArray( pos );\n\n                            if ( objJSON.target ) {\n\n                                target_array.push( { \"object\": light, \"targetName\" : objJSON.target } );\n\n                                // kill existing default target\n                                // otherwise it gets added to scene when parent gets added\n\n                                light.target = null;\n\n                            }\n\n                        } else if ( objJSON.type === \"PointLight\" ) {\n\n                            pos = objJSON.position;\n                            dst = objJSON.distance;\n\n                            light = new THREE.PointLight( hex, intensity, dst );\n                            light.position.fromArray( pos );\n\n                        } else if ( objJSON.type === \"AmbientLight\" ) {\n\n                            light = new THREE.AmbientLight( hex );\n\n                        }\n\n                        parent.add( light );\n\n                        light.name = objID;\n                        result.lights[ objID ] = light;\n                        result.objects[ objID ] = light;\n\n                        // cameras\n\n                    } else if ( objJSON.type === \"PerspectiveCamera\" || objJSON.type === \"OrthographicCamera\" ) {\n\n                        pos = objJSON.position;\n                        rot = objJSON.rotation;\n                        quat = objJSON.quaternion;\n\n                        if ( objJSON.type === \"PerspectiveCamera\" ) {\n\n                            camera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );\n\n                        } else if ( objJSON.type === \"OrthographicCamera\" ) {\n\n                            camera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );\n\n                        }\n\n                        camera.name = objID;\n                        camera.position.fromArray( pos );\n\n                        if ( quat !== undefined ) {\n\n                            camera.quaternion.fromArray( quat );\n\n                        } else if ( rot !== undefined ) {\n\n                            camera.rotation.fromArray( rot );\n\n                        }\n\n                        parent.add( camera );\n\n                        result.cameras[ objID ] = camera;\n                        result.objects[ objID ] = camera;\n\n                        // pure Object3D\n\n                    } else {\n\n                        pos = objJSON.position;\n                        rot = objJSON.rotation;\n                        scl = objJSON.scale;\n                        quat = objJSON.quaternion;\n\n                        object = new THREE.Object3D();\n                        object.name = objID;\n                        object.position.fromArray( pos );\n\n                        if ( quat ) {\n\n                            object.quaternion.fromArray( quat );\n\n                        } else {\n\n                            object.rotation.fromArray( rot );\n\n                        }\n\n                        object.scale.fromArray( scl );\n                        object.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;\n\n                        parent.add( object );\n\n                        result.objects[ objID ] = object;\n                        result.empties[ objID ] = object;\n\n                    }\n\n                    if ( object ) {\n\n                        if ( objJSON.userData !== undefined ) {\n\n                            for ( var key in objJSON.userData ) {\n\n                                var value = objJSON.userData[ key ];\n                                object.userData[ key ] = value;\n\n                            }\n\n                        }\n\n                        if ( objJSON.groups !== undefined ) {\n\n                            for ( var i = 0; i < objJSON.groups.length; i ++ ) {\n\n                                var groupID = objJSON.groups[ i ];\n\n                                if ( result.groups[ groupID ] === undefined ) {\n\n                                    result.groups[ groupID ] = [];\n\n                                }\n\n                                result.groups[ groupID ].push( objID );\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n                if ( object !== undefined && objJSON.children !== undefined ) {\n\n                    handle_children( object, objJSON.children );\n\n                }\n\n            }\n\n        };\n\n        function handle_mesh( geo, mat, id ) {\n\n            result.geometries[ id ] = geo;\n            result.face_materials[ id ] = mat;\n            handle_objects();\n\n        };\n\n        function handle_hierarchy( node, id, parent, material, obj ) {\n\n            var p = obj.position;\n            var r = obj.rotation;\n            var q = obj.quaternion;\n            var s = obj.scale;\n\n            node.position.fromArray( p );\n\n            if ( q ) {\n\n                node.quaternion.fromArray( q );\n\n            } else {\n\n                node.rotation.fromArray( r );\n\n            }\n\n            node.scale.fromArray( s );\n\n            // override children materials\n            // if object material was specified in JSON explicitly\n\n            if ( material ) {\n\n                node.traverse( function ( child ) {\n\n                    child.material = material;\n\n                } );\n\n            }\n\n            // override children visibility\n            // with root node visibility as specified in JSON\n\n            var visible = ( obj.visible !== undefined ) ? obj.visible : true;\n\n            node.traverse( function ( child ) {\n\n                child.visible = visible;\n\n            } );\n\n            parent.add( node );\n\n            node.name = id;\n\n            result.objects[ id ] = node;\n            handle_objects();\n\n        };\n\n        function create_callback_geometry( id ) {\n\n            return function ( geo, mat ) {\n\n                geo.name = id;\n\n                handle_mesh( geo, mat, id );\n\n                counter_models -= 1;\n\n                scope.onLoadComplete();\n\n                async_callback_gate();\n\n            }\n\n        };\n\n        function create_callback_hierachy( id, parent, material, obj ) {\n\n            return function ( event ) {\n\n                var result;\n\n                // loaders which use EventDispatcher\n\n                if ( event.content ) {\n\n                    result = event.content;\n\n                    // ColladaLoader\n\n                } else if ( event.dae ) {\n\n                    result = event.scene;\n\n\n                    // UTF8Loader\n\n                } else {\n\n                    result = event;\n\n                }\n\n                handle_hierarchy( result, id, parent, material, obj );\n\n                counter_models -= 1;\n\n                scope.onLoadComplete();\n\n                async_callback_gate();\n\n            }\n\n        };\n\n        function create_callback_embed( id ) {\n\n            return function ( geo, mat ) {\n\n                geo.name = id;\n\n                result.geometries[ id ] = geo;\n                result.face_materials[ id ] = mat;\n\n            }\n\n        };\n\n        function async_callback_gate() {\n\n            var progress = {\n\n                totalModels : total_models,\n                totalTextures : total_textures,\n                loadedModels : total_models - counter_models,\n                loadedTextures : total_textures - counter_textures\n\n            };\n\n            scope.callbackProgress( progress, result );\n\n            scope.onLoadProgress();\n\n            if ( counter_models === 0 && counter_textures === 0 ) {\n\n                finalize();\n                callbackFinished( result );\n\n            }\n\n        };\n\n        function finalize() {\n\n            // take care of targets which could be asynchronously loaded objects\n\n            for ( var i = 0; i < target_array.length; i ++ ) {\n\n                var ta = target_array[ i ];\n\n                var target = result.objects[ ta.targetName ];\n\n                if ( target ) {\n\n                    ta.object.target = target;\n\n                } else {\n\n                    // if there was error and target of specified name doesn't exist in the scene file\n                    // create instead dummy target\n                    // (target must be added to scene explicitly as parent is already added)\n\n                    ta.object.target = new THREE.Object3D();\n                    result.scene.add( ta.object.target );\n\n                }\n\n                ta.object.target.userData.targetInverse = ta.object;\n\n            }\n\n        };\n\n        var callbackTexture = function ( count ) {\n\n            counter_textures -= count;\n            async_callback_gate();\n\n            scope.onLoadComplete();\n\n        };\n\n        // must use this instead of just directly calling callbackTexture\n        // because of closure in the calling context loop\n\n        var generateTextureCallback = function ( count ) {\n\n            return function () {\n\n                callbackTexture( count );\n\n            };\n\n        };\n\n        function traverse_json_hierarchy( objJSON, callback ) {\n\n            callback( objJSON );\n\n            if ( objJSON.children !== undefined ) {\n\n                for ( var objChildID in objJSON.children ) {\n\n                    traverse_json_hierarchy( objJSON.children[ objChildID ], callback );\n\n                }\n\n            }\n\n        };\n\n        // first go synchronous elements\n\n        // fogs\n\n        var fogID, fogJSON;\n\n        for ( fogID in data.fogs ) {\n\n            fogJSON = data.fogs[ fogID ];\n\n            if ( fogJSON.type === \"linear\" ) {\n\n                fog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );\n\n            } else if ( fogJSON.type === \"exp2\" ) {\n\n                fog = new THREE.FogExp2( 0x000000, fogJSON.density );\n\n            }\n\n            color = fogJSON.color;\n            fog.color.setRGB( color[0], color[1], color[2] );\n\n            result.fogs[ fogID ] = fog;\n\n        }\n\n        // now come potentially asynchronous elements\n\n        // geometries\n\n        // count how many geometries will be loaded asynchronously\n\n        var geoID, geoJSON;\n\n        for ( geoID in data.geometries ) {\n\n            geoJSON = data.geometries[ geoID ];\n\n            if ( geoJSON.type in this.geometryHandlers ) {\n\n                counter_models += 1;\n\n                scope.onLoadStart();\n\n            }\n\n        }\n\n        // count how many hierarchies will be loaded asynchronously\n\n        for ( var objID in data.objects ) {\n\n            traverse_json_hierarchy( data.objects[ objID ], function ( objJSON ) {\n\n                if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {\n\n                    counter_models += 1;\n\n                    scope.onLoadStart();\n\n                }\n\n            });\n\n        }\n\n        total_models = counter_models;\n\n        for ( geoID in data.geometries ) {\n\n            geoJSON = data.geometries[ geoID ];\n\n            if ( geoJSON.type === \"cube\" ) {\n\n                geometry = new THREE.CubeGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );\n                geometry.name = geoID;\n                result.geometries[ geoID ] = geometry;\n\n            } else if ( geoJSON.type === \"plane\" ) {\n\n                geometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );\n                geometry.name = geoID;\n                result.geometries[ geoID ] = geometry;\n\n            } else if ( geoJSON.type === \"sphere\" ) {\n\n                geometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );\n                geometry.name = geoID;\n                result.geometries[ geoID ] = geometry;\n\n            } else if ( geoJSON.type === \"cylinder\" ) {\n\n                geometry = new THREE.CylinderGeometry( geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs );\n                geometry.name = geoID;\n                result.geometries[ geoID ] = geometry;\n\n            } else if ( geoJSON.type === \"torus\" ) {\n\n                geometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );\n                geometry.name = geoID;\n                result.geometries[ geoID ] = geometry;\n\n            } else if ( geoJSON.type === \"icosahedron\" ) {\n\n                geometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );\n                geometry.name = geoID;\n                result.geometries[ geoID ] = geometry;\n\n            } else if ( geoJSON.type in this.geometryHandlers ) {\n\n                var loaderParameters = {};\n\n                for ( var parType in geoJSON ) {\n\n                    if ( parType !== \"type\" && parType !== \"url\" ) {\n\n                        loaderParameters[ parType ] = geoJSON[ parType ];\n\n                    }\n\n                }\n\n                var loader = this.geometryHandlers[ geoJSON.type ][ \"loaderObject\" ];\n                loader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ), loaderParameters );\n\n            } else if ( geoJSON.type === \"embedded\" ) {\n\n                var modelJson = data.embeds[ geoJSON.id ],\n                    texture_path = \"\";\n\n                // pass metadata along to jsonLoader so it knows the format version\n\n                modelJson.metadata = data.metadata;\n\n                if ( modelJson ) {\n\n                    var jsonLoader = this.geometryHandlers[ \"ascii\" ][ \"loaderObject\" ];\n                    var model = jsonLoader.parse( modelJson, texture_path );\n                    create_callback_embed( geoID )( model.geometry, model.materials );\n\n                }\n\n            }\n\n        }\n\n        // textures\n\n        // count how many textures will be loaded asynchronously\n\n        var textureID, textureJSON;\n\n        for ( textureID in data.textures ) {\n\n            textureJSON = data.textures[ textureID ];\n\n            if ( textureJSON.url instanceof Array ) {\n\n                counter_textures += textureJSON.url.length;\n\n                for( var n = 0; n < textureJSON.url.length; n ++ ) {\n\n                    scope.onLoadStart();\n\n                }\n\n            } else {\n\n                counter_textures += 1;\n\n                scope.onLoadStart();\n\n            }\n\n        }\n\n        total_textures = counter_textures;\n\n        for ( textureID in data.textures ) {\n\n            textureJSON = data.textures[ textureID ];\n\n            if ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined ) {\n\n                textureJSON.mapping = new THREE[ textureJSON.mapping ]();\n\n            }\n\n            if ( textureJSON.url instanceof Array ) {\n\n                var count = textureJSON.url.length;\n                var url_array = [];\n\n                for( var i = 0; i < count; i ++ ) {\n\n                    url_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );\n\n                }\n\n                var isCompressed = /\\.dds$/i.test( url_array[ 0 ] );\n\n                if ( isCompressed ) {\n\n                    texture = THREE.ImageUtils.loadCompressedTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );\n\n                } else {\n\n                    texture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );\n\n                }\n\n            } else {\n\n                var isCompressed = /\\.dds$/i.test( textureJSON.url );\n                var fullUrl = get_url( textureJSON.url, data.urlBaseType );\n                var textureCallback = generateTextureCallback( 1 );\n\n                if ( isCompressed ) {\n\n                    texture = THREE.ImageUtils.loadCompressedTexture( fullUrl, textureJSON.mapping, textureCallback );\n\n                } else {\n\n                    texture = THREE.ImageUtils.loadTexture( fullUrl, textureJSON.mapping, textureCallback );\n\n                }\n\n                if ( THREE[ textureJSON.minFilter ] !== undefined )\n                    texture.minFilter = THREE[ textureJSON.minFilter ];\n\n                if ( THREE[ textureJSON.magFilter ] !== undefined )\n                    texture.magFilter = THREE[ textureJSON.magFilter ];\n\n                if ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;\n\n                if ( textureJSON.repeat ) {\n\n                    texture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );\n\n                    if ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n                    if ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\n                }\n\n                if ( textureJSON.offset ) {\n\n                    texture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );\n\n                }\n\n                // handle wrap after repeat so that default repeat can be overriden\n\n                if ( textureJSON.wrap ) {\n\n                    var wrapMap = {\n                        \"repeat\": THREE.RepeatWrapping,\n                        \"mirror\": THREE.MirroredRepeatWrapping\n                    }\n\n                    if ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];\n                    if ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];\n\n                }\n\n            }\n\n            result.textures[ textureID ] = texture;\n\n        }\n\n        // materials\n\n        var matID, matJSON;\n        var parID;\n\n        for ( matID in data.materials ) {\n\n            matJSON = data.materials[ matID ];\n\n            for ( parID in matJSON.parameters ) {\n\n                if ( parID === \"envMap\" || parID === \"map\" || parID === \"lightMap\" || parID === \"bumpMap\" ) {\n\n                    matJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];\n\n                } else if ( parID === \"shading\" ) {\n\n                    matJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === \"flat\" ) ? THREE.FlatShading : THREE.SmoothShading;\n\n                } else if ( parID === \"side\" ) {\n\n                    if ( matJSON.parameters[ parID ] == \"double\" ) {\n\n                        matJSON.parameters[ parID ] = THREE.DoubleSide;\n\n                    } else if ( matJSON.parameters[ parID ] == \"back\" ) {\n\n                        matJSON.parameters[ parID ] = THREE.BackSide;\n\n                    } else {\n\n                        matJSON.parameters[ parID ] = THREE.FrontSide;\n\n                    }\n\n                } else if ( parID === \"blending\" ) {\n\n                    matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;\n\n                } else if ( parID === \"combine\" ) {\n\n                    matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;\n\n                } else if ( parID === \"vertexColors\" ) {\n\n                    if ( matJSON.parameters[ parID ] == \"face\" ) {\n\n                        matJSON.parameters[ parID ] = THREE.FaceColors;\n\n                        // default to vertex colors if \"vertexColors\" is anything else face colors or 0 / null / false\n\n                    } else if ( matJSON.parameters[ parID ] ) {\n\n                        matJSON.parameters[ parID ] = THREE.VertexColors;\n\n                    }\n\n                } else if ( parID === \"wrapRGB\" ) {\n\n                    var v3 = matJSON.parameters[ parID ];\n                    matJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );\n\n                }\n\n            }\n\n            if ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 ) {\n\n                matJSON.parameters.transparent = true;\n\n            }\n\n            if ( matJSON.parameters.normalMap ) {\n\n                var shader = THREE.ShaderLib[ \"normalmap\" ];\n                var uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n                var diffuse = matJSON.parameters.color;\n                var specular = matJSON.parameters.specular;\n                var ambient = matJSON.parameters.ambient;\n                var shininess = matJSON.parameters.shininess;\n\n                uniforms[ \"tNormal\" ].value = result.textures[ matJSON.parameters.normalMap ];\n\n                if ( matJSON.parameters.normalScale ) {\n\n                    uniforms[ \"uNormalScale\" ].value.set( matJSON.parameters.normalScale[ 0 ], matJSON.parameters.normalScale[ 1 ] );\n\n                }\n\n                if ( matJSON.parameters.map ) {\n\n                    uniforms[ \"tDiffuse\" ].value = matJSON.parameters.map;\n                    uniforms[ \"enableDiffuse\" ].value = true;\n\n                }\n\n                if ( matJSON.parameters.envMap ) {\n\n                    uniforms[ \"tCube\" ].value = matJSON.parameters.envMap;\n                    uniforms[ \"enableReflection\" ].value = true;\n                    uniforms[ \"uReflectivity\" ].value = matJSON.parameters.reflectivity;\n\n                }\n\n                if ( matJSON.parameters.lightMap ) {\n\n                    uniforms[ \"tAO\" ].value = matJSON.parameters.lightMap;\n                    uniforms[ \"enableAO\" ].value = true;\n\n                }\n\n                if ( matJSON.parameters.specularMap ) {\n\n                    uniforms[ \"tSpecular\" ].value = result.textures[ matJSON.parameters.specularMap ];\n                    uniforms[ \"enableSpecular\" ].value = true;\n\n                }\n\n                if ( matJSON.parameters.displacementMap ) {\n\n                    uniforms[ \"tDisplacement\" ].value = result.textures[ matJSON.parameters.displacementMap ];\n                    uniforms[ \"enableDisplacement\" ].value = true;\n\n                    uniforms[ \"uDisplacementBias\" ].value = matJSON.parameters.displacementBias;\n                    uniforms[ \"uDisplacementScale\" ].value = matJSON.parameters.displacementScale;\n\n                }\n\n                uniforms[ \"uDiffuseColor\" ].value.setHex( diffuse );\n                uniforms[ \"uSpecularColor\" ].value.setHex( specular );\n                uniforms[ \"uAmbientColor\" ].value.setHex( ambient );\n\n                uniforms[ \"uShininess\" ].value = shininess;\n\n                if ( matJSON.parameters.opacity ) {\n\n                    uniforms[ \"uOpacity\" ].value = matJSON.parameters.opacity;\n\n                }\n\n                var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\n\n                material = new THREE.ShaderMaterial( parameters );\n\n            } else {\n\n                material = new THREE[ matJSON.type ]( matJSON.parameters );\n\n            }\n\n            material.name = matID;\n\n            result.materials[ matID ] = material;\n\n        }\n\n        // second pass through all materials to initialize MeshFaceMaterials\n        // that could be referring to other materials out of order\n\n        for ( matID in data.materials ) {\n\n            matJSON = data.materials[ matID ];\n\n            if ( matJSON.parameters.materials ) {\n\n                var materialArray = [];\n\n                for ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {\n\n                    var label = matJSON.parameters.materials[ i ];\n                    materialArray.push( result.materials[ label ] );\n\n                }\n\n                result.materials[ matID ].materials = materialArray;\n\n            }\n\n        }\n\n        // objects ( synchronous init of procedural primitives )\n\n        handle_objects();\n\n        // defaults\n\n        if ( result.cameras && data.defaults.camera ) {\n\n            result.currentCamera = result.cameras[ data.defaults.camera ];\n\n        }\n\n        if ( result.fogs && data.defaults.fog ) {\n\n            result.scene.fog = result.fogs[ data.defaults.fog ];\n\n        }\n\n        // synchronous callback\n\n        scope.callbackSync( result );\n\n        // just in case there are no async elements\n\n        async_callback_gate();\n\n    }\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.TextureLoader = function ( manager ) {\n\n    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.TextureLoader.prototype = {\n\n    constructor: THREE.TextureLoader,\n\n    load: function ( url, onLoad, onProgress, onError ) {\n\n        var scope = this;\n\n        var loader = new THREE.ImageLoader( scope.manager );\n        loader.setCrossOrigin( this.crossOrigin );\n        loader.load( url, function ( image ) {\n\n            var texture = new THREE.Texture( image );\n            texture.needsUpdate = true;\n\n            if ( onLoad !== undefined ) {\n\n                onLoad( texture );\n\n            }\n\n        } );\n\n    },\n\n    setCrossOrigin: function ( value ) {\n\n        this.crossOrigin = value;\n\n    }\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Material = function () {\n\n    this.id = THREE.MaterialIdCount ++;\n    this.uuid = THREE.Math.generateUUID();\n\n    this.name = '';\n\n    this.side = THREE.FrontSide;\n\n    this.opacity = 1;\n    this.transparent = false;\n\n    this.blending = THREE.NormalBlending;\n\n    this.blendSrc = THREE.SrcAlphaFactor;\n    this.blendDst = THREE.OneMinusSrcAlphaFactor;\n    this.blendEquation = THREE.AddEquation;\n\n    this.depthTest = true;\n    this.depthWrite = true;\n\n    this.polygonOffset = false;\n    this.polygonOffsetFactor = 0;\n    this.polygonOffsetUnits = 0;\n\n    this.alphaTest = 0;\n\n    this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n    this.visible = true;\n\n    this.needsUpdate = true;\n\n};\n\nTHREE.Material.prototype = {\n\n    constructor: THREE.Material,\n\n    setValues: function ( values ) {\n\n        if ( values === undefined ) return;\n\n        for ( var key in values ) {\n\n            var newValue = values[ key ];\n\n            if ( newValue === undefined ) {\n\n                console.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n                continue;\n\n            }\n\n            if ( key in this ) {\n\n                var currentValue = this[ key ];\n\n                if ( currentValue instanceof THREE.Color ) {\n\n                    currentValue.set( newValue );\n\n                } else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\n                    currentValue.copy( newValue );\n\n                } else if ( key == 'overdraw') {\n\n                    // ensure overdraw is backwards-compatable with legacy boolean type\n                    this[ key ] = Number(newValue);\n\n                } else {\n\n                    this[ key ] = newValue;\n\n                }\n\n            }\n\n        }\n\n    },\n\n    clone: function ( material ) {\n\n        if ( material === undefined ) material = new THREE.Material();\n\n        material.name = this.name;\n\n        material.side = this.side;\n\n        material.opacity = this.opacity;\n        material.transparent = this.transparent;\n\n        material.blending = this.blending;\n\n        material.blendSrc = this.blendSrc;\n        material.blendDst = this.blendDst;\n        material.blendEquation = this.blendEquation;\n\n        material.depthTest = this.depthTest;\n        material.depthWrite = this.depthWrite;\n\n        material.polygonOffset = this.polygonOffset;\n        material.polygonOffsetFactor = this.polygonOffsetFactor;\n        material.polygonOffsetUnits = this.polygonOffsetUnits;\n\n        material.alphaTest = this.alphaTest;\n\n        material.overdraw = this.overdraw;\n\n        material.visible = this.visible;\n\n        return material;\n\n    },\n\n    dispose: function () {\n\n        this.dispatchEvent( { type: 'dispose' } );\n\n    }\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Material.prototype );\n\nTHREE.MaterialIdCount = 0;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\",\n *\n *  vertexColors: <bool>\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.LineBasicMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.color = new THREE.Color( 0xffffff );\n\n    this.linewidth = 1;\n    this.linecap = 'round';\n    this.linejoin = 'round';\n\n    this.vertexColors = false;\n\n    this.fog = true;\n\n    this.setValues( parameters );\n\n};\n\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.LineBasicMaterial.prototype.clone = function () {\n\n    var material = new THREE.LineBasicMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.color.copy( this.color );\n\n    material.linewidth = this.linewidth;\n    material.linecap = this.linecap;\n    material.linejoin = this.linejoin;\n\n    material.vertexColors = this.vertexColors;\n\n    material.fog = this.fog;\n\n    return material;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>,\n *\n *  vertexColors: <bool>\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.LineDashedMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.color = new THREE.Color( 0xffffff );\n\n    this.linewidth = 1;\n\n    this.scale = 1;\n    this.dashSize = 3;\n    this.gapSize = 1;\n\n    this.vertexColors = false;\n\n    this.fog = true;\n\n    this.setValues( parameters );\n\n};\n\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.LineDashedMaterial.prototype.clone = function () {\n\n    var material = new THREE.LineDashedMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.color.copy( this.color );\n\n    material.linewidth = this.linewidth;\n\n    material.scale = this.scale;\n    material.dashSize = this.dashSize;\n    material.gapSize = this.gapSize;\n\n    material.vertexColors = this.vertexColors;\n\n    material.fog = this.fog;\n\n    return material;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.MeshBasicMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.color = new THREE.Color( 0xffffff ); // emissive\n\n    this.map = null;\n\n    this.lightMap = null;\n\n    this.specularMap = null;\n\n    this.envMap = null;\n    this.combine = THREE.MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n\n    this.fog = true;\n\n    this.shading = THREE.SmoothShading;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n\n    this.vertexColors = THREE.NoColors;\n\n    this.skinning = false;\n    this.morphTargets = false;\n\n    this.setValues( parameters );\n\n};\n\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshBasicMaterial.prototype.clone = function () {\n\n    var material = new THREE.MeshBasicMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.color.copy( this.color );\n\n    material.map = this.map;\n\n    material.lightMap = this.lightMap;\n\n    material.specularMap = this.specularMap;\n\n    material.envMap = this.envMap;\n    material.combine = this.combine;\n    material.reflectivity = this.reflectivity;\n    material.refractionRatio = this.refractionRatio;\n\n    material.fog = this.fog;\n\n    material.shading = this.shading;\n\n    material.wireframe = this.wireframe;\n    material.wireframeLinewidth = this.wireframeLinewidth;\n    material.wireframeLinecap = this.wireframeLinecap;\n    material.wireframeLinejoin = this.wireframeLinejoin;\n\n    material.vertexColors = this.vertexColors;\n\n    material.skinning = this.skinning;\n    material.morphTargets = this.morphTargets;\n\n    return material;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  ambient: <hex>,\n *  emissive: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.MeshLambertMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.color = new THREE.Color( 0xffffff ); // diffuse\n    this.ambient = new THREE.Color( 0xffffff );\n    this.emissive = new THREE.Color( 0x000000 );\n\n    this.wrapAround = false;\n    this.wrapRGB = new THREE.Vector3( 1, 1, 1 );\n\n    this.map = null;\n\n    this.lightMap = null;\n\n    this.specularMap = null;\n\n    this.envMap = null;\n    this.combine = THREE.MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n\n    this.fog = true;\n\n    this.shading = THREE.SmoothShading;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n\n    this.vertexColors = THREE.NoColors;\n\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n\n    this.setValues( parameters );\n\n};\n\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshLambertMaterial.prototype.clone = function () {\n\n    var material = new THREE.MeshLambertMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.color.copy( this.color );\n    material.ambient.copy( this.ambient );\n    material.emissive.copy( this.emissive );\n\n    material.wrapAround = this.wrapAround;\n    material.wrapRGB.copy( this.wrapRGB );\n\n    material.map = this.map;\n\n    material.lightMap = this.lightMap;\n\n    material.specularMap = this.specularMap;\n\n    material.envMap = this.envMap;\n    material.combine = this.combine;\n    material.reflectivity = this.reflectivity;\n    material.refractionRatio = this.refractionRatio;\n\n    material.fog = this.fog;\n\n    material.shading = this.shading;\n\n    material.wireframe = this.wireframe;\n    material.wireframeLinewidth = this.wireframeLinewidth;\n    material.wireframeLinecap = this.wireframeLinecap;\n    material.wireframeLinejoin = this.wireframeLinejoin;\n\n    material.vertexColors = this.vertexColors;\n\n    material.skinning = this.skinning;\n    material.morphTargets = this.morphTargets;\n    material.morphNormals = this.morphNormals;\n\n    return material;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  ambient: <hex>,\n *  emissive: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.MeshPhongMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.color = new THREE.Color( 0xffffff ); // diffuse\n    this.ambient = new THREE.Color( 0xffffff );\n    this.emissive = new THREE.Color( 0x000000 );\n    this.specular = new THREE.Color( 0x111111 );\n    this.shininess = 30;\n\n    this.metal = false;\n    this.perPixel = true;\n\n    this.wrapAround = false;\n    this.wrapRGB = new THREE.Vector3( 1, 1, 1 );\n\n    this.map = null;\n\n    this.lightMap = null;\n\n    this.bumpMap = null;\n    this.bumpScale = 1;\n\n    this.normalMap = null;\n    this.normalScale = new THREE.Vector2( 1, 1 );\n\n    this.specularMap = null;\n\n    this.envMap = null;\n    this.combine = THREE.MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n\n    this.fog = true;\n\n    this.shading = THREE.SmoothShading;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n\n    this.vertexColors = THREE.NoColors;\n\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n\n    this.setValues( parameters );\n\n};\n\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshPhongMaterial.prototype.clone = function () {\n\n    var material = new THREE.MeshPhongMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.color.copy( this.color );\n    material.ambient.copy( this.ambient );\n    material.emissive.copy( this.emissive );\n    material.specular.copy( this.specular );\n    material.shininess = this.shininess;\n\n    material.metal = this.metal;\n    material.perPixel = this.perPixel;\n\n    material.wrapAround = this.wrapAround;\n    material.wrapRGB.copy( this.wrapRGB );\n\n    material.map = this.map;\n\n    material.lightMap = this.lightMap;\n\n    material.bumpMap = this.bumpMap;\n    material.bumpScale = this.bumpScale;\n\n    material.normalMap = this.normalMap;\n    material.normalScale.copy( this.normalScale );\n\n    material.specularMap = this.specularMap;\n\n    material.envMap = this.envMap;\n    material.combine = this.combine;\n    material.reflectivity = this.reflectivity;\n    material.refractionRatio = this.refractionRatio;\n\n    material.fog = this.fog;\n\n    material.shading = this.shading;\n\n    material.wireframe = this.wireframe;\n    material.wireframeLinewidth = this.wireframeLinewidth;\n    material.wireframeLinecap = this.wireframeLinecap;\n    material.wireframeLinejoin = this.wireframeLinejoin;\n\n    material.vertexColors = this.vertexColors;\n\n    material.skinning = this.skinning;\n    material.morphTargets = this.morphTargets;\n    material.morphNormals = this.morphNormals;\n\n    return material;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshDepthMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n\n    this.setValues( parameters );\n\n};\n\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshDepthMaterial.prototype.clone = function () {\n\n    var material = new THREE.MeshDepthMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.wireframe = this.wireframe;\n    material.wireframeLinewidth = this.wireframeLinewidth;\n\n    return material;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  shading: THREE.FlatShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshNormalMaterial = function ( parameters ) {\n\n    THREE.Material.call( this, parameters );\n\n    this.shading = THREE.FlatShading;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n\n    this.morphTargets = false;\n\n    this.setValues( parameters );\n\n};\n\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshNormalMaterial.prototype.clone = function () {\n\n    var material = new THREE.MeshNormalMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.shading = this.shading;\n\n    material.wireframe = this.wireframe;\n    material.wireframeLinewidth = this.wireframeLinewidth;\n\n    return material;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MeshFaceMaterial = function ( materials ) {\n\n    this.materials = materials instanceof Array ? materials : [];\n\n};\n\nTHREE.MeshFaceMaterial.prototype.clone = function () {\n\n    var material = new THREE.MeshFaceMaterial();\n\n    for ( var i = 0; i < this.materials.length; i ++ ) {\n\n        material.materials.push( this.materials[ i ].clone() );\n\n    }\n\n    return material;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  vertexColors: <bool>,\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.ParticleSystemMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.color = new THREE.Color( 0xffffff );\n\n    this.map = null;\n\n    this.size = 1;\n    this.sizeAttenuation = true;\n\n    this.vertexColors = false;\n\n    this.fog = true;\n\n    this.setValues( parameters );\n\n};\n\nTHREE.ParticleSystemMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.ParticleSystemMaterial.prototype.clone = function () {\n\n    var material = new THREE.ParticleSystemMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.color.copy( this.color );\n\n    material.map = this.map;\n\n    material.size = this.size;\n    material.sizeAttenuation = this.sizeAttenuation;\n\n    material.vertexColors = this.vertexColors;\n\n    material.fog = this.fog;\n\n    return material;\n\n};\n\n// backwards compatibility\n\nTHREE.ParticleBasicMaterial = THREE.ParticleSystemMaterial;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\n *\n *  defines: { \"label\" : \"value\" },\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.ShaderMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.fragmentShader = \"void main() {}\";\n    this.vertexShader = \"void main() {}\";\n    this.uniforms = {};\n    this.defines = {};\n    this.attributes = null;\n\n    this.shading = THREE.SmoothShading;\n\n    this.linewidth = 1;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n\n    this.fog = false; // set to use scene fog\n\n    this.lights = false; // set to use scene lights\n\n    this.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\n\n    this.skinning = false; // set to use skinning attribute streams\n\n    this.morphTargets = false; // set to use morph targets\n    this.morphNormals = false; // set to use morph normals\n\n    // When rendered geometry doesn't include these attributes but the material does,\n    // use these default values in WebGL. This avoids errors when buffer data is missing.\n    this.defaultAttributeValues = {\n        \"color\" : [ 1, 1, 1],\n        \"uv\" : [ 0, 0 ],\n        \"uv2\" : [ 0, 0 ]\n    };\n\n    // By default, bind position to attribute index 0. In WebGL, attribute 0\n    // should always be used to avoid potentially expensive emulation.\n    this.index0AttributeName = \"position\";\n\n    this.setValues( parameters );\n\n};\n\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.ShaderMaterial.prototype.clone = function () {\n\n    var material = new THREE.ShaderMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.fragmentShader = this.fragmentShader;\n    material.vertexShader = this.vertexShader;\n\n    material.uniforms = THREE.UniformsUtils.clone( this.uniforms );\n\n    material.attributes = this.attributes;\n    material.defines = this.defines;\n\n    material.shading = this.shading;\n\n    material.wireframe = this.wireframe;\n    material.wireframeLinewidth = this.wireframeLinewidth;\n\n    material.fog = this.fog;\n\n    material.lights = this.lights;\n\n    material.vertexColors = this.vertexColors;\n\n    material.skinning = this.skinning;\n\n    material.morphTargets = this.morphTargets;\n    material.morphNormals = this.morphNormals;\n\n    return material;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  useScreenCoordinates: <bool>,\n *  sizeAttenuation: <bool>,\n *  alignment: THREE.SpriteAlignment.center,\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2(),\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.SpriteMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    // defaults\n\n    this.color = new THREE.Color( 0xffffff );\n    this.map = new THREE.Texture();\n\n    this.useScreenCoordinates = true;\n    this.depthTest = !this.useScreenCoordinates;\n    this.sizeAttenuation = !this.useScreenCoordinates;\n    this.alignment = THREE.SpriteAlignment.center.clone();\n\n    this.fog = false;\n\n    this.uvOffset = new THREE.Vector2( 0, 0 );\n    this.uvScale  = new THREE.Vector2( 1, 1 );\n\n    // set parameters\n\n    this.setValues( parameters );\n\n    // override coupled defaults if not specified explicitly by parameters\n\n    parameters = parameters || {};\n\n    if ( parameters.depthTest === undefined ) this.depthTest = !this.useScreenCoordinates;\n    if ( parameters.sizeAttenuation === undefined ) this.sizeAttenuation = !this.useScreenCoordinates;\n\n};\n\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.SpriteMaterial.prototype.clone = function () {\n\n    var material = new THREE.SpriteMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.color.copy( this.color );\n    material.map = this.map;\n\n    material.useScreenCoordinates = this.useScreenCoordinates;\n    material.sizeAttenuation = this.sizeAttenuation;\n    material.alignment.copy( this.alignment );\n\n    material.uvOffset.copy( this.uvOffset );\n    material.uvScale.copy( this.uvScale );\n\n    material.fog = this.fog;\n\n    return material;\n\n};\n\n// Alignment enums\n\nTHREE.SpriteAlignment = {};\nTHREE.SpriteAlignment.topLeft = new THREE.Vector2( 0.5, -0.5 );\nTHREE.SpriteAlignment.topCenter = new THREE.Vector2( 0, -0.5 );\nTHREE.SpriteAlignment.topRight = new THREE.Vector2( -0.5, -0.5 );\nTHREE.SpriteAlignment.centerLeft = new THREE.Vector2( 0.5, 0 );\nTHREE.SpriteAlignment.center = new THREE.Vector2( 0, 0 );\nTHREE.SpriteAlignment.centerRight = new THREE.Vector2( -0.5, 0 );\nTHREE.SpriteAlignment.bottomLeft = new THREE.Vector2( 0.5, 0.5 );\nTHREE.SpriteAlignment.bottomCenter = new THREE.Vector2( 0, 0.5 );\nTHREE.SpriteAlignment.bottomRight = new THREE.Vector2( -0.5, 0.5 );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  color: <hex>,\n *  program: <function>,\n *  opacity: <float>,\n *  blending: THREE.NormalBlending\n * }\n */\n\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n    THREE.Material.call( this );\n\n    this.color = new THREE.Color( 0xffffff );\n    this.program = function ( context, color ) {};\n\n    this.setValues( parameters );\n\n};\n\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n    var material = new THREE.SpriteCanvasMaterial();\n\n    THREE.Material.prototype.clone.call( this, material );\n\n    material.color.copy( this.color );\n    material.program = this.program;\n\n    return material;\n\n};\n\n// backwards compatibility\n\nTHREE.ParticleCanvasMaterial = THREE.SpriteCanvasMaterial;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n    this.id = THREE.TextureIdCount ++;\n    this.uuid = THREE.Math.generateUUID();\n\n    this.name = '';\n\n    this.image = image;\n    this.mipmaps = [];\n\n    this.mapping = mapping !== undefined ? mapping : new THREE.UVMapping();\n\n    this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n    this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\n    this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\n    this.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n    this.format = format !== undefined ? format : THREE.RGBAFormat;\n    this.type = type !== undefined ? type : THREE.UnsignedByteType;\n\n    this.offset = new THREE.Vector2( 0, 0 );\n    this.repeat = new THREE.Vector2( 1, 1 );\n\n    this.generateMipmaps = true;\n    this.premultiplyAlpha = false;\n    this.flipY = true;\n    this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n    this.needsUpdate = false;\n    this.onUpdate = null;\n\n};\n\nTHREE.Texture.prototype = {\n\n    constructor: THREE.Texture,\n\n    clone: function ( texture ) {\n\n        if ( texture === undefined ) texture = new THREE.Texture();\n\n        texture.image = this.image;\n        texture.mipmaps = this.mipmaps.slice(0);\n\n        texture.mapping = this.mapping;\n\n        texture.wrapS = this.wrapS;\n        texture.wrapT = this.wrapT;\n\n        texture.magFilter = this.magFilter;\n        texture.minFilter = this.minFilter;\n\n        texture.anisotropy = this.anisotropy;\n\n        texture.format = this.format;\n        texture.type = this.type;\n\n        texture.offset.copy( this.offset );\n        texture.repeat.copy( this.repeat );\n\n        texture.generateMipmaps = this.generateMipmaps;\n        texture.premultiplyAlpha = this.premultiplyAlpha;\n        texture.flipY = this.flipY;\n        texture.unpackAlignment = this.unpackAlignment;\n\n        return texture;\n\n    },\n\n    dispose: function () {\n\n        this.dispatchEvent( { type: 'dispose' } );\n\n    }\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );\n\nTHREE.TextureIdCount = 0;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n    THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    this.image = { width: width, height: height };\n    this.mipmaps = mipmaps;\n\n    this.generateMipmaps = false; // WebGL currently can't generate mipmaps for compressed textures, they must be embedded in DDS file\n\n};\n\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\n\nTHREE.CompressedTexture.prototype.clone = function () {\n\n    var texture = new THREE.CompressedTexture();\n\n    THREE.Texture.prototype.clone.call( this, texture );\n\n    return texture;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n    THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n    this.image = { data: data, width: width, height: height };\n\n};\n\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\n\nTHREE.DataTexture.prototype.clone = function () {\n\n    var texture = new THREE.DataTexture();\n\n    THREE.Texture.prototype.clone.call( this, texture );\n\n    return texture;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ParticleSystem = function ( geometry, material ) {\n\n    THREE.Object3D.call( this );\n\n    this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n    this.material = material !== undefined ? material : new THREE.ParticleSystemMaterial( { color: Math.random() * 0xffffff } );\n\n    this.sortParticles = false;\n    this.frustumCulled = false;\n\n};\n\nTHREE.ParticleSystem.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.ParticleSystem.prototype.clone = function ( object ) {\n\n    if ( object === undefined ) object = new THREE.ParticleSystem( this.geometry, this.material );\n\n    object.sortParticles = this.sortParticles;\n\n    THREE.Object3D.prototype.clone.call( this, object );\n\n    return object;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Line = function ( geometry, material, type ) {\n\n    THREE.Object3D.call( this );\n\n    this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n    this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    this.type = ( type !== undefined ) ? type : THREE.LineStrip;\n\n};\n\nTHREE.LineStrip = 0;\nTHREE.LinePieces = 1;\n\nTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Line.prototype.clone = function ( object ) {\n\n    if ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.type );\n\n    THREE.Object3D.prototype.clone.call( this, object );\n\n    return object;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nTHREE.Mesh = function ( geometry, material ) {\n\n    THREE.Object3D.call( this );\n\n    this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n    this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n    this.updateMorphTargets();\n\n};\n\nTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Mesh.prototype.updateMorphTargets = function () {\n\n    if ( this.geometry.morphTargets.length > 0 ) {\n\n        this.morphTargetBase = -1;\n        this.morphTargetForcedOrder = [];\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n\n        for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\n            this.morphTargetInfluences.push( 0 );\n            this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\n        }\n\n    }\n\n};\n\nTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\n\n    if ( this.morphTargetDictionary[ name ] !== undefined ) {\n\n        return this.morphTargetDictionary[ name ];\n\n    }\n\n    console.log( \"THREE.Mesh.getMorphTargetIndexByName: morph target \" + name + \" does not exist. Returning 0.\" );\n\n    return 0;\n\n};\n\nTHREE.Mesh.prototype.clone = function ( object ) {\n\n    if ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );\n\n    THREE.Object3D.prototype.clone.call( this, object );\n\n    return object;\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Bone = function( belongsToSkin ) {\n\n    THREE.Object3D.call( this );\n\n    this.skin = belongsToSkin;\n    this.skinMatrix = new THREE.Matrix4();\n\n};\n\nTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Bone.prototype.update = function ( parentSkinMatrix, forceUpdate ) {\n\n    // update local\n\n    if ( this.matrixAutoUpdate ) {\n\n        forceUpdate |= this.updateMatrix();\n\n    }\n\n    // update skin matrix\n\n    if ( forceUpdate || this.matrixWorldNeedsUpdate ) {\n\n        if( parentSkinMatrix ) {\n\n            this.skinMatrix.multiplyMatrices( parentSkinMatrix, this.matrix );\n\n        } else {\n\n            this.skinMatrix.copy( this.matrix );\n\n        }\n\n        this.matrixWorldNeedsUpdate = false;\n        forceUpdate = true;\n\n    }\n\n    // update children\n\n    var child, i, l = this.children.length;\n\n    for ( i = 0; i < l; i ++ ) {\n\n        this.children[ i ].update( this.skinMatrix, forceUpdate );\n\n    }\n\n};\n\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\n    THREE.Mesh.call( this, geometry, material );\n\n    //\n\n    this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n    // init bones\n\n    this.identityMatrix = new THREE.Matrix4();\n\n    this.bones = [];\n    this.boneMatrices = [];\n\n    var b, bone, gbone, p, q, s;\n\n    if ( this.geometry && this.geometry.bones !== undefined ) {\n\n        for ( b = 0; b < this.geometry.bones.length; b ++ ) {\n\n            gbone = this.geometry.bones[ b ];\n\n            p = gbone.pos;\n            q = gbone.rotq;\n            s = gbone.scl;\n\n            bone = this.addBone();\n\n            bone.name = gbone.name;\n            bone.position.set( p[0], p[1], p[2] );\n            bone.quaternion.set( q[0], q[1], q[2], q[3] );\n\n            if ( s !== undefined ) {\n\n                bone.scale.set( s[0], s[1], s[2] );\n\n            } else {\n\n                bone.scale.set( 1, 1, 1 );\n\n            }\n\n        }\n\n        for ( b = 0; b < this.bones.length; b ++ ) {\n\n            gbone = this.geometry.bones[ b ];\n            bone = this.bones[ b ];\n\n            if ( gbone.parent === -1 ) {\n\n                this.add( bone );\n\n            } else {\n\n                this.bones[ gbone.parent ].add( bone );\n\n            }\n\n        }\n\n        //\n\n        var nBones = this.bones.length;\n\n        if ( this.useVertexTexture ) {\n\n            // layout (1 matrix = 4 pixels)\n            //\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n            //  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)\n            //  \t 16x16 pixel texture max   64 bones (16 * 16 / 4)\n            //  \t 32x32 pixel texture max  256 bones (32 * 32 / 4)\n            //  \t 64x64 pixel texture max 1024 bones (64 * 64 / 4)\n\n            var size;\n\n            if ( nBones > 256 )\n                size = 64;\n            else if ( nBones > 64 )\n                size = 32;\n            else if ( nBones > 16 )\n                size = 16;\n            else\n                size = 8;\n\n            this.boneTextureWidth = size;\n            this.boneTextureHeight = size;\n\n            this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n            this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n            this.boneTexture.minFilter = THREE.NearestFilter;\n            this.boneTexture.magFilter = THREE.NearestFilter;\n            this.boneTexture.generateMipmaps = false;\n            this.boneTexture.flipY = false;\n\n        } else {\n\n            this.boneMatrices = new Float32Array( 16 * nBones );\n\n        }\n\n        this.pose();\n\n    }\n\n};\n\nTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.SkinnedMesh.prototype.addBone = function( bone ) {\n\n    if ( bone === undefined ) {\n\n        bone = new THREE.Bone( this );\n\n    }\n\n    this.bones.push( bone );\n\n    return bone;\n\n};\n\nTHREE.SkinnedMesh.prototype.updateMatrixWorld = function () {\n\n    var offsetMatrix = new THREE.Matrix4();\n\n    return function ( force ) {\n\n        this.matrixAutoUpdate && this.updateMatrix();\n\n        // update matrixWorld\n\n        if ( this.matrixWorldNeedsUpdate || force ) {\n\n            if ( this.parent ) {\n\n                this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n            } else {\n\n                this.matrixWorld.copy( this.matrix );\n\n            }\n\n            this.matrixWorldNeedsUpdate = false;\n\n            force = true;\n\n        }\n\n        // update children\n\n        for ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n            var child = this.children[ i ];\n\n            if ( child instanceof THREE.Bone ) {\n\n                child.update( this.identityMatrix, false );\n\n            } else {\n\n                child.updateMatrixWorld( true );\n\n            }\n\n        }\n\n        // make a snapshot of the bones' rest position\n\n        if ( this.boneInverses == undefined ) {\n\n            this.boneInverses = [];\n\n            for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n                var inverse = new THREE.Matrix4();\n\n                inverse.getInverse( this.bones[ b ].skinMatrix );\n\n                this.boneInverses.push( inverse );\n\n            }\n\n        }\n\n        // flatten bone matrices to array\n\n        for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n            // compute the offset between the current and the original transform;\n\n            // TODO: we could get rid of this multiplication step if the skinMatrix\n            // was already representing the offset; however, this requires some\n            // major changes to the animation system\n\n            offsetMatrix.multiplyMatrices( this.bones[ b ].skinMatrix, this.boneInverses[ b ] );\n            offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\n\n        }\n\n        if ( this.useVertexTexture ) {\n\n            this.boneTexture.needsUpdate = true;\n\n        }\n\n    };\n\n}();\n\nTHREE.SkinnedMesh.prototype.pose = function () {\n\n    this.updateMatrixWorld( true );\n\n    this.normalizeSkinWeights();\n\n};\n\nTHREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {\n\n    if ( this.geometry instanceof THREE.Geometry ) {\n\n        for ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {\n\n            var sw = this.geometry.skinWeights[ i ];\n\n            var scale = 1.0 / sw.lengthManhattan();\n\n            if ( scale !== Infinity ) {\n\n                sw.multiplyScalar( scale );\n\n            } else {\n\n                sw.set( 1 ); // this will be normalized by the shader anyway\n\n            }\n\n        }\n\n    } else {\n\n        // skinning weights assumed to be normalized for THREE.BufferGeometry\n\n    }\n\n};\n\nTHREE.SkinnedMesh.prototype.clone = function ( object ) {\n\n    if ( object === undefined ) {\n\n        object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );\n\n    }\n\n    THREE.Mesh.prototype.clone.call( this, object );\n\n    return object;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphAnimMesh = function ( geometry, material ) {\n\n    THREE.Mesh.call( this, geometry, material );\n\n    // API\n\n    this.duration = 1000; // milliseconds\n    this.mirroredLoop = false;\n    this.time = 0;\n\n    // internals\n\n    this.lastKeyframe = 0;\n    this.currentKeyframe = 0;\n\n    this.direction = 1;\n    this.directionBackwards = false;\n\n    this.setFrameRange( 0, this.geometry.morphTargets.length - 1 );\n\n};\n\nTHREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {\n\n    this.startKeyframe = start;\n    this.endKeyframe = end;\n\n    this.length = this.endKeyframe - this.startKeyframe + 1;\n\n};\n\nTHREE.MorphAnimMesh.prototype.setDirectionForward = function () {\n\n    this.direction = 1;\n    this.directionBackwards = false;\n\n};\n\nTHREE.MorphAnimMesh.prototype.setDirectionBackward = function () {\n\n    this.direction = -1;\n    this.directionBackwards = true;\n\n};\n\nTHREE.MorphAnimMesh.prototype.parseAnimations = function () {\n\n    var geometry = this.geometry;\n\n    if ( ! geometry.animations ) geometry.animations = {};\n\n    var firstAnimation, animations = geometry.animations;\n\n    var pattern = /([a-z]+)(\\d+)/;\n\n    for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n        var morph = geometry.morphTargets[ i ];\n        var parts = morph.name.match( pattern );\n\n        if ( parts && parts.length > 1 ) {\n\n            var label = parts[ 1 ];\n            var num = parts[ 2 ];\n\n            if ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: -Infinity };\n\n            var animation = animations[ label ];\n\n            if ( i < animation.start ) animation.start = i;\n            if ( i > animation.end ) animation.end = i;\n\n            if ( ! firstAnimation ) firstAnimation = label;\n\n        }\n\n    }\n\n    geometry.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {\n\n    if ( ! this.geometry.animations ) this.geometry.animations = {};\n\n    this.geometry.animations[ label ] = { start: start, end: end };\n\n};\n\nTHREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {\n\n    var animation = this.geometry.animations[ label ];\n\n    if ( animation ) {\n\n        this.setFrameRange( animation.start, animation.end );\n        this.duration = 1000 * ( ( animation.end - animation.start ) / fps );\n        this.time = 0;\n\n    } else {\n\n        console.warn( \"animation[\" + label + \"] undefined\" );\n\n    }\n\n};\n\nTHREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {\n\n    var frameTime = this.duration / this.length;\n\n    this.time += this.direction * delta;\n\n    if ( this.mirroredLoop ) {\n\n        if ( this.time > this.duration || this.time < 0 ) {\n\n            this.direction *= -1;\n\n            if ( this.time > this.duration ) {\n\n                this.time = this.duration;\n                this.directionBackwards = true;\n\n            }\n\n            if ( this.time < 0 ) {\n\n                this.time = 0;\n                this.directionBackwards = false;\n\n            }\n\n        }\n\n    } else {\n\n        this.time = this.time % this.duration;\n\n        if ( this.time < 0 ) this.time += this.duration;\n\n    }\n\n    var keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );\n\n    if ( keyframe !== this.currentKeyframe ) {\n\n        this.morphTargetInfluences[ this.lastKeyframe ] = 0;\n        this.morphTargetInfluences[ this.currentKeyframe ] = 1;\n\n        this.morphTargetInfluences[ keyframe ] = 0;\n\n        this.lastKeyframe = this.currentKeyframe;\n        this.currentKeyframe = keyframe;\n\n    }\n\n    var mix = ( this.time % frameTime ) / frameTime;\n\n    if ( this.directionBackwards ) {\n\n        mix = 1 - mix;\n\n    }\n\n    this.morphTargetInfluences[ this.currentKeyframe ] = mix;\n    this.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;\n\n};\n\nTHREE.MorphAnimMesh.prototype.clone = function ( object ) {\n\n    if ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );\n\n    object.duration = this.duration;\n    object.mirroredLoop = this.mirroredLoop;\n    object.time = this.time;\n\n    object.lastKeyframe = this.lastKeyframe;\n    object.currentKeyframe = this.currentKeyframe;\n\n    object.direction = this.direction;\n    object.directionBackwards = this.directionBackwards;\n\n    THREE.Mesh.prototype.clone.call( this, object );\n\n    return object;\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LOD = function () {\n\n    THREE.Object3D.call( this );\n\n    this.objects = [];\n\n};\n\n\nTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.LOD.prototype.addLevel = function ( object, distance ) {\n\n    if ( distance === undefined ) distance = 0;\n\n    distance = Math.abs( distance );\n\n    for ( var l = 0; l < this.objects.length; l ++ ) {\n\n        if ( distance < this.objects[ l ].distance ) {\n\n            break;\n\n        }\n\n    }\n\n    this.objects.splice( l, 0, { distance: distance, object: object } );\n    this.add( object );\n\n};\n\nTHREE.LOD.prototype.getObjectForDistance = function ( distance ) {\n\n    for ( var i = 1, l = this.objects.length; i < l; i ++ ) {\n\n        if ( distance < this.objects[ i ].distance ) {\n\n            break;\n\n        }\n\n    }\n\n    return this.objects[ i - 1 ].object;\n\n};\n\nTHREE.LOD.prototype.update = function () {\n\n    var v1 = new THREE.Vector3();\n    var v2 = new THREE.Vector3();\n\n    return function ( camera ) {\n\n        if ( this.objects.length > 1 ) {\n\n            v1.getPositionFromMatrix( camera.matrixWorld );\n            v2.getPositionFromMatrix( this.matrixWorld );\n\n            var distance = v1.distanceTo( v2 );\n\n            this.objects[ 0 ].object.visible = true;\n\n            for ( var i = 1, l = this.objects.length; i < l; i ++ ) {\n\n                if ( distance >= this.objects[ i ].distance ) {\n\n                    this.objects[ i - 1 ].object.visible = false;\n                    this.objects[ i     ].object.visible = true;\n\n                } else {\n\n                    break;\n\n                }\n\n            }\n\n            for( ; i < l; i ++ ) {\n\n                this.objects[ i ].object.visible = false;\n\n            }\n\n        }\n\n    };\n\n}();\n\nTHREE.LOD.prototype.clone = function () {\n\n    // TODO\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Sprite = function ( material ) {\n\n    THREE.Object3D.call( this );\n\n    this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\n    this.rotation = 0;\n\n};\n\nTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\n\n/*\n * Custom update matrix\n */\n\nTHREE.Sprite.prototype.updateMatrix = function () {\n\n    this.matrix.compose( this.position, this.quaternion, this.scale );\n\n    this.matrixWorldNeedsUpdate = true;\n\n};\n\nTHREE.Sprite.prototype.clone = function ( object ) {\n\n    if ( object === undefined ) object = new THREE.Sprite( this.material );\n\n    THREE.Object3D.prototype.clone.call( this, object );\n\n    return object;\n\n};\n\n// Backwards compatibility\n\nTHREE.Particle = THREE.Sprite;\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Scene = function () {\n\n    THREE.Object3D.call( this );\n\n    this.fog = null;\n    this.overrideMaterial = null;\n\n    this.autoUpdate = true; // checked by the renderer\n    this.matrixAutoUpdate = false;\n\n    this.__lights = [];\n\n    this.__objectsAdded = [];\n    this.__objectsRemoved = [];\n\n};\n\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Scene.prototype.__addObject = function ( object ) {\n\n    if ( object instanceof THREE.Light ) {\n\n        if ( this.__lights.indexOf( object ) === - 1 ) {\n\n            this.__lights.push( object );\n\n        }\n\n        if ( object.target && object.target.parent === undefined ) {\n\n            this.add( object.target );\n\n        }\n\n    } else if ( !( object instanceof THREE.Camera || object instanceof THREE.Bone ) ) {\n\n        this.__objectsAdded.push( object );\n\n        // check if previously removed\n\n        var i = this.__objectsRemoved.indexOf( object );\n\n        if ( i !== -1 ) {\n\n            this.__objectsRemoved.splice( i, 1 );\n\n        }\n\n    }\n\n    for ( var c = 0; c < object.children.length; c ++ ) {\n\n        this.__addObject( object.children[ c ] );\n\n    }\n\n};\n\nTHREE.Scene.prototype.__removeObject = function ( object ) {\n\n    if ( object instanceof THREE.Light ) {\n\n        var i = this.__lights.indexOf( object );\n\n        if ( i !== -1 ) {\n\n            this.__lights.splice( i, 1 );\n\n        }\n\n        if ( object.shadowCascadeArray ) {\n\n            for ( var x = 0; x < object.shadowCascadeArray.length; x ++ ) {\n\n                this.__removeObject( object.shadowCascadeArray[ x ] );\n\n            }\n\n        }\n\n    } else if ( !( object instanceof THREE.Camera ) ) {\n\n        this.__objectsRemoved.push( object );\n\n        // check if previously added\n\n        var i = this.__objectsAdded.indexOf( object );\n\n        if ( i !== -1 ) {\n\n            this.__objectsAdded.splice( i, 1 );\n\n        }\n\n    }\n\n    for ( var c = 0; c < object.children.length; c ++ ) {\n\n        this.__removeObject( object.children[ c ] );\n\n    }\n\n};\n\nTHREE.Scene.prototype.clone = function ( object ) {\n\n    if ( object === undefined ) object = new THREE.Scene();\n\n    THREE.Object3D.prototype.clone.call(this, object);\n\n    if ( this.fog !== null ) object.fog = this.fog.clone();\n    if ( this.overrideMaterial !== null ) object.overrideMaterial = this.overrideMaterial.clone();\n\n    object.autoUpdate = this.autoUpdate;\n    object.matrixAutoUpdate = this.matrixAutoUpdate;\n\n    return object;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Fog = function ( hex, near, far ) {\n\n    this.name = '';\n\n    this.color = new THREE.Color( hex );\n\n    this.near = ( near !== undefined ) ? near : 1;\n    this.far = ( far !== undefined ) ? far : 1000;\n\n};\n\nTHREE.Fog.prototype.clone = function () {\n\n    return new THREE.Fog( this.color.getHex(), this.near, this.far );\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.FogExp2 = function ( hex, density ) {\n\n    this.name = '';\n\n    this.color = new THREE.Color( hex );\n    this.density = ( density !== undefined ) ? density : 0.00025;\n\n};\n\nTHREE.FogExp2.prototype.clone = function () {\n\n    return new THREE.FogExp2( this.color.getHex(), this.density );\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CanvasRenderer = function ( parameters ) {\n\n    console.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n    var smoothstep = THREE.Math.smoothstep;\n\n    parameters = parameters || {};\n\n    var _this = this,\n        _renderData, _elements, _lights,\n        _projector = new THREE.Projector(),\n\n        _canvas = parameters.canvas !== undefined\n            ? parameters.canvas\n            : document.createElement( 'canvas' ),\n\n        _canvasWidth = _canvas.width,\n        _canvasHeight = _canvas.height,\n        _canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n        _canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n        _context = _canvas.getContext( '2d' ),\n\n        _clearColor = new THREE.Color( 0x000000 ),\n        _clearAlpha = 0,\n\n        _contextGlobalAlpha = 1,\n        _contextGlobalCompositeOperation = 0,\n        _contextStrokeStyle = null,\n        _contextFillStyle = null,\n        _contextLineWidth = null,\n        _contextLineCap = null,\n        _contextLineJoin = null,\n        _contextDashSize = null,\n        _contextGapSize = 0,\n\n        _camera,\n\n        _v1, _v2, _v3, _v4,\n        _v5 = new THREE.RenderableVertex(),\n        _v6 = new THREE.RenderableVertex(),\n\n        _v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n        _v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\n        _color = new THREE.Color(),\n        _color1 = new THREE.Color(),\n        _color2 = new THREE.Color(),\n        _color3 = new THREE.Color(),\n        _color4 = new THREE.Color(),\n\n        _diffuseColor = new THREE.Color(),\n        _emissiveColor = new THREE.Color(),\n\n        _lightColor = new THREE.Color(),\n\n        _patterns = {}, _imagedatas = {},\n\n        _near, _far,\n\n        _image, _uvs,\n        _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n        _clipBox = new THREE.Box2(),\n        _clearBox = new THREE.Box2(),\n        _elemBox = new THREE.Box2(),\n\n        _ambientLight = new THREE.Color(),\n        _directionalLights = new THREE.Color(),\n        _pointLights = new THREE.Color(),\n\n        _vector3 = new THREE.Vector3(), // Needed for PointLight\n\n        _pixelMap, _pixelMapContext, _pixelMapImage, _pixelMapData,\n        _gradientMap, _gradientMapContext, _gradientMapQuality = 16;\n\n    _pixelMap = document.createElement( 'canvas' );\n    _pixelMap.width = _pixelMap.height = 2;\n\n    _pixelMapContext = _pixelMap.getContext( '2d' );\n    _pixelMapContext.fillStyle = 'rgba(0,0,0,1)';\n    _pixelMapContext.fillRect( 0, 0, 2, 2 );\n\n    _pixelMapImage = _pixelMapContext.getImageData( 0, 0, 2, 2 );\n    _pixelMapData = _pixelMapImage.data;\n\n    _gradientMap = document.createElement( 'canvas' );\n    _gradientMap.width = _gradientMap.height = _gradientMapQuality;\n\n    _gradientMapContext = _gradientMap.getContext( '2d' );\n    _gradientMapContext.translate( - _gradientMapQuality / 2, - _gradientMapQuality / 2 );\n    _gradientMapContext.scale( _gradientMapQuality, _gradientMapQuality );\n\n    _gradientMapQuality --; // Fix UVs\n\n    // dash+gap fallbacks for Firefox and everything else\n\n    if ( _context.setLineDash === undefined ) {\n\n        if ( _context.mozDash !== undefined ) {\n\n            _context.setLineDash = function ( values ) {\n\n                _context.mozDash = values[ 0 ] !== null ? values : null;\n\n            }\n\n        } else {\n\n            _context.setLineDash = function () {}\n\n        }\n\n    }\n\n    this.domElement = _canvas;\n\n    this.devicePixelRatio = parameters.devicePixelRatio !== undefined\n        ? parameters.devicePixelRatio\n        : self.devicePixelRatio !== undefined\n        ? self.devicePixelRatio\n        : 1;\n\n    this.autoClear = true;\n    this.sortObjects = true;\n    this.sortElements = true;\n\n    this.info = {\n\n        render: {\n\n            vertices: 0,\n            faces: 0\n\n        }\n\n    }\n\n    // WebGLRenderer compatibility\n\n    this.supportsVertexTextures = function () {};\n    this.setFaceCulling = function () {};\n\n    this.setSize = function ( width, height, updateStyle ) {\n\n        _canvasWidth = width * this.devicePixelRatio;\n        _canvasHeight = height * this.devicePixelRatio;\n\n        _canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n        _canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n        _canvas.width = _canvasWidth;\n        _canvas.height = _canvasHeight;\n\n        if ( this.devicePixelRatio !== 1 && updateStyle !== false ) {\n\n            _canvas.style.width = width + 'px';\n            _canvas.style.height = height + 'px';\n\n        }\n\n        _clipBox.set(\n            new THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\n            new THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\n        );\n\n        _clearBox.set(\n            new THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\n            new THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\n        );\n\n        _contextGlobalAlpha = 1;\n        _contextGlobalCompositeOperation = 0;\n        _contextStrokeStyle = null;\n        _contextFillStyle = null;\n        _contextLineWidth = null;\n        _contextLineCap = null;\n        _contextLineJoin = null;\n\n    };\n\n    this.setClearColor = function ( color, alpha ) {\n\n        _clearColor.set( color );\n        _clearAlpha = alpha !== undefined ? alpha : 1;\n\n        _clearBox.set(\n            new THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\n            new THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\n        );\n\n    };\n\n    this.setClearColorHex = function ( hex, alpha ) {\n\n        console.warn( 'DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n        this.setClearColor( hex, alpha );\n\n    };\n\n    this.getMaxAnisotropy = function () {\n\n        return 0;\n\n    };\n\n    this.clear = function () {\n\n        _context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );\n\n        if ( _clearBox.empty() === false ) {\n\n            _clearBox.intersect( _clipBox );\n            _clearBox.expandByScalar( 2 );\n\n            if ( _clearAlpha < 1 ) {\n\n                _context.clearRect(\n                    _clearBox.min.x | 0,\n                    _clearBox.min.y | 0,\n                    ( _clearBox.max.x - _clearBox.min.x ) | 0,\n                    ( _clearBox.max.y - _clearBox.min.y ) | 0\n                );\n\n            }\n\n            if ( _clearAlpha > 0 ) {\n\n                setBlending( THREE.NormalBlending );\n                setOpacity( 1 );\n\n                setFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n                _context.fillRect(\n                    _clearBox.min.x | 0,\n                    _clearBox.min.y | 0,\n                    ( _clearBox.max.x - _clearBox.min.x ) | 0,\n                    ( _clearBox.max.y - _clearBox.min.y ) | 0\n                );\n\n            }\n\n            _clearBox.makeEmpty();\n\n        }\n\n\n    };\n\n    this.render = function ( scene, camera ) {\n\n        if ( camera instanceof THREE.Camera === false ) {\n\n            console.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n            return;\n\n        }\n\n        if ( this.autoClear === true ) this.clear();\n\n        _context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );\n\n        _this.info.render.vertices = 0;\n        _this.info.render.faces = 0;\n\n        _renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n        _elements = _renderData.elements;\n        _lights = _renderData.lights;\n        _camera = camera;\n\n        /* DEBUG\n         setFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n         _context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n         */\n\n        calculateLights();\n\n        for ( var e = 0, el = _elements.length; e < el; e++ ) {\n\n            var element = _elements[ e ];\n\n            var material = element.material;\n\n            if ( material === undefined || material.visible === false ) continue;\n\n            _elemBox.makeEmpty();\n\n            if ( element instanceof THREE.RenderableSprite ) {\n\n                _v1 = element;\n                _v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n                renderSprite( _v1, element, material );\n\n            } else if ( element instanceof THREE.RenderableLine ) {\n\n                _v1 = element.v1; _v2 = element.v2;\n\n                _v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n                _v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n                _elemBox.setFromPoints( [\n                    _v1.positionScreen,\n                    _v2.positionScreen\n                ] );\n\n                if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {\n\n                    renderLine( _v1, _v2, element, material );\n\n                }\n\n            } else if ( element instanceof THREE.RenderableFace3 ) {\n\n                _v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n                if ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;\n                if ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;\n                if ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;\n\n                _v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n                _v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n                _v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n                if ( material.overdraw > 0 ) {\n\n                    expand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n                    expand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n                    expand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n                }\n\n                _elemBox.setFromPoints( [\n                    _v1.positionScreen,\n                    _v2.positionScreen,\n                    _v3.positionScreen\n                ] );\n\n                if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {\n\n                    renderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n                }\n\n            }\n\n            /* DEBUG\n             setLineWidth( 1 );\n             setStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n             _context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n             */\n\n            _clearBox.union( _elemBox );\n\n        }\n\n        /* DEBUG\n         setLineWidth( 1 );\n         setStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n         _context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n         */\n\n        _context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n    };\n\n    //\n\n    function calculateLights() {\n\n        _ambientLight.setRGB( 0, 0, 0 );\n        _directionalLights.setRGB( 0, 0, 0 );\n        _pointLights.setRGB( 0, 0, 0 );\n\n        for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n            var light = _lights[ l ];\n            var lightColor = light.color;\n\n            if ( light instanceof THREE.AmbientLight ) {\n\n                _ambientLight.add( lightColor );\n\n            } else if ( light instanceof THREE.DirectionalLight ) {\n\n                // for sprites\n\n                _directionalLights.add( lightColor );\n\n            } else if ( light instanceof THREE.PointLight ) {\n\n                // for sprites\n\n                _pointLights.add( lightColor );\n\n            }\n\n        }\n\n    }\n\n    function calculateLight( position, normal, color ) {\n\n        for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n            var light = _lights[ l ];\n\n            _lightColor.copy( light.color );\n\n            if ( light instanceof THREE.DirectionalLight ) {\n\n                var lightPosition = _vector3.getPositionFromMatrix( light.matrixWorld ).normalize();\n\n                var amount = normal.dot( lightPosition );\n\n                if ( amount <= 0 ) continue;\n\n                amount *= light.intensity;\n\n                color.add( _lightColor.multiplyScalar( amount ) );\n\n            } else if ( light instanceof THREE.PointLight ) {\n\n                var lightPosition = _vector3.getPositionFromMatrix( light.matrixWorld );\n\n                var amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n                if ( amount <= 0 ) continue;\n\n                amount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n                if ( amount == 0 ) continue;\n\n                amount *= light.intensity;\n\n                color.add( _lightColor.multiplyScalar( amount ) );\n\n            }\n\n        }\n\n    }\n\n    function renderSprite( v1, element, material ) {\n\n        setOpacity( material.opacity );\n        setBlending( material.blending );\n\n        var width, height, scaleX, scaleY,\n            bitmap, bitmapWidth, bitmapHeight;\n\n        if ( material instanceof THREE.SpriteMaterial ||\n            material instanceof THREE.ParticleSystemMaterial ) { // Backwards compatibility\n\n            if ( material.map.image !== undefined ) {\n\n                bitmap = material.map.image;\n                bitmapWidth = bitmap.width >> 1;\n                bitmapHeight = bitmap.height >> 1;\n\n                scaleX = element.scale.x * _canvasWidthHalf;\n                scaleY = element.scale.y * _canvasHeightHalf;\n\n                width = scaleX * bitmapWidth;\n                height = scaleY * bitmapHeight;\n\n                // TODO: Rotations break this...\n\n                _elemBox.min.set( v1.x - width, v1.y - height );\n                _elemBox.max.set( v1.x + width, v1.y + height );\n\n                if ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\n\n                    _elemBox.makeEmpty();\n                    return;\n\n                }\n\n                _context.save();\n                _context.translate( v1.x, v1.y );\n                _context.rotate( - element.rotation );\n                _context.scale( scaleX, - scaleY );\n\n                _context.translate( - bitmapWidth, - bitmapHeight );\n                _context.drawImage( bitmap, 0, 0 );\n                _context.restore();\n\n            } else {\n\n                scaleX = element.object.scale.x;\n                scaleY = element.object.scale.y;\n\n                // TODO: Be able to disable this\n\n                scaleX *= element.scale.x * _canvasWidthHalf;\n                scaleY *= element.scale.y * _canvasHeightHalf;\n\n                _elemBox.min.set( v1.x - scaleX, v1.y - scaleY );\n                _elemBox.max.set( v1.x + scaleX, v1.y + scaleY );\n\n                if ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\n\n                    _elemBox.makeEmpty();\n                    return;\n\n                }\n\n                setFillStyle( material.color.getStyle() );\n\n                _context.save();\n                _context.translate( v1.x, v1.y );\n                _context.rotate( - element.rotation );\n                _context.scale( scaleX, scaleY );\n                _context.fillRect( -1, -1, 2, 2 );\n                _context.restore();\n\n            }\n\n            /* DEBUG\n             setStrokeStyle( 'rgb(255,255,0)' );\n             _context.beginPath();\n             _context.moveTo( v1.x - 10, v1.y );\n             _context.lineTo( v1.x + 10, v1.y );\n             _context.moveTo( v1.x, v1.y - 10 );\n             _context.lineTo( v1.x, v1.y + 10 );\n             _context.stroke();\n             */\n\n        } else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\n            width = element.scale.x * _canvasWidthHalf;\n            height = element.scale.y * _canvasHeightHalf;\n\n            _elemBox.min.set( v1.x - width, v1.y - height );\n            _elemBox.max.set( v1.x + width, v1.y + height );\n\n            if ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\n\n                _elemBox.makeEmpty();\n                return;\n\n            }\n\n            setStrokeStyle( material.color.getStyle() );\n            setFillStyle( material.color.getStyle() );\n\n            _context.save();\n            _context.translate( v1.x, v1.y );\n            _context.rotate( - element.rotation );\n            _context.scale( width, height );\n\n            material.program( _context );\n\n            _context.restore();\n\n        }\n\n    }\n\n    function renderLine( v1, v2, element, material ) {\n\n        setOpacity( material.opacity );\n        setBlending( material.blending );\n\n        _context.beginPath();\n        _context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n        _context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n        if ( material instanceof THREE.LineBasicMaterial ) {\n\n            setLineWidth( material.linewidth );\n            setLineCap( material.linecap );\n            setLineJoin( material.linejoin );\n\n            if ( material.vertexColors !== THREE.VertexColors ) {\n\n                setStrokeStyle( material.color.getStyle() );\n\n            } else {\n\n                var colorStyle1 = element.vertexColors[0].getStyle();\n                var colorStyle2 = element.vertexColors[1].getStyle();\n\n                if ( colorStyle1 === colorStyle2 ) {\n\n                    setStrokeStyle( colorStyle1 );\n\n                } else {\n\n                    try {\n\n                        var grad = _context.createLinearGradient(\n                            v1.positionScreen.x,\n                            v1.positionScreen.y,\n                            v2.positionScreen.x,\n                            v2.positionScreen.y\n                        );\n                        grad.addColorStop( 0, colorStyle1 );\n                        grad.addColorStop( 1, colorStyle2 );\n\n                    } catch ( exception ) {\n\n                        grad = colorStyle1;\n\n                    }\n\n                    setStrokeStyle( grad );\n\n                }\n\n            }\n\n            _context.stroke();\n            _elemBox.expandByScalar( material.linewidth * 2 );\n\n        } else if ( material instanceof THREE.LineDashedMaterial ) {\n\n            setLineWidth( material.linewidth );\n            setLineCap( material.linecap );\n            setLineJoin( material.linejoin );\n            setStrokeStyle( material.color.getStyle() );\n            setDashAndGap( material.dashSize, material.gapSize );\n\n            _context.stroke();\n\n            _elemBox.expandByScalar( material.linewidth * 2 );\n\n            setDashAndGap( null, null );\n\n        }\n\n    }\n\n    function renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n        _this.info.render.vertices += 3;\n        _this.info.render.faces ++;\n\n        setOpacity( material.opacity );\n        setBlending( material.blending );\n\n        _v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n        _v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n        _v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n        drawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n        if ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\n            _diffuseColor.copy( material.color );\n            _emissiveColor.copy( material.emissive );\n\n            if ( material.vertexColors === THREE.FaceColors ) {\n\n                _diffuseColor.multiply( element.color );\n\n            }\n\n            if ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 3 ) {\n\n                _color1.copy( _ambientLight );\n                _color2.copy( _ambientLight );\n                _color3.copy( _ambientLight );\n\n                calculateLight( element.v1.positionWorld, element.vertexNormalsModel[ 0 ], _color1 );\n                calculateLight( element.v2.positionWorld, element.vertexNormalsModel[ 1 ], _color2 );\n                calculateLight( element.v3.positionWorld, element.vertexNormalsModel[ 2 ], _color3 );\n\n                _color1.multiply( _diffuseColor ).add( _emissiveColor );\n                _color2.multiply( _diffuseColor ).add( _emissiveColor );\n                _color3.multiply( _diffuseColor ).add( _emissiveColor );\n                _color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\n\n                _image = getGradientTexture( _color1, _color2, _color3, _color4 );\n\n                clipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\n\n            } else {\n\n                _color.copy( _ambientLight );\n\n                calculateLight( element.centroidModel, element.normalModel, _color );\n\n                _color.multiply( _diffuseColor ).add( _emissiveColor );\n\n                material.wireframe === true\n                    ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n                    : fillPath( _color );\n\n            }\n\n        } else if ( material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {\n\n            if ( material.map !== null ) {\n\n                if ( material.map.mapping instanceof THREE.UVMapping ) {\n\n                    _uvs = element.uvs[ 0 ];\n                    patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n                }\n\n\n            } else if ( material.envMap !== null ) {\n\n                if ( material.envMap.mapping instanceof THREE.SphericalReflectionMapping ) {\n\n                    _vector3.copy( element.vertexNormalsModelView[ uv1 ] );\n                    _uv1x = 0.5 * _vector3.x + 0.5;\n                    _uv1y = 0.5 * _vector3.y + 0.5;\n\n                    _vector3.copy( element.vertexNormalsModelView[ uv2 ] );\n                    _uv2x = 0.5 * _vector3.x + 0.5;\n                    _uv2y = 0.5 * _vector3.y + 0.5;\n\n                    _vector3.copy( element.vertexNormalsModelView[ uv3 ] );\n                    _uv3x = 0.5 * _vector3.x + 0.5;\n                    _uv3y = 0.5 * _vector3.y + 0.5;\n\n                    patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n                }/* else if ( material.envMap.mapping == THREE.SphericalRefractionMapping ) {\n\n\n\n                 }*/\n\n\n            } else {\n\n                _color.copy( material.color );\n\n                if ( material.vertexColors === THREE.FaceColors ) {\n\n                    _color.multiply( element.color );\n\n                }\n\n                material.wireframe === true\n                    ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n                    : fillPath( _color );\n\n            }\n\n        } else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n            _near = _camera.near;\n            _far = _camera.far;\n\n            _color1.r = _color1.g = _color1.b = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _near, _far );\n            _color2.r = _color2.g = _color2.b = 1 - smoothstep( v2.positionScreen.z * v2.positionScreen.w, _near, _far );\n            _color3.r = _color3.g = _color3.b = 1 - smoothstep( v3.positionScreen.z * v3.positionScreen.w, _near, _far );\n            _color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\n\n            _image = getGradientTexture( _color1, _color2, _color3, _color4 );\n\n            clipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\n\n        } else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n            var normal;\n\n            if ( material.shading == THREE.FlatShading ) {\n\n                normal = element.normalModelView;\n\n                _color.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n                material.wireframe === true\n                    ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n                    : fillPath( _color );\n\n            } else if ( material.shading == THREE.SmoothShading ) {\n\n                normal = element.vertexNormalsModelView[ uv1 ];\n                _color1.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n                normal = element.vertexNormalsModelView[ uv2 ];\n                _color2.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n                normal = element.vertexNormalsModelView[ uv3 ];\n                _color3.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n                _color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\n\n                _image = getGradientTexture( _color1, _color2, _color3, _color4 );\n\n                clipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\n\n            }\n\n        }\n\n    }\n\n    //\n\n    function drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n        _context.beginPath();\n        _context.moveTo( x0, y0 );\n        _context.lineTo( x1, y1 );\n        _context.lineTo( x2, y2 );\n        _context.closePath();\n\n    }\n\n    function strokePath( color, linewidth, linecap, linejoin ) {\n\n        setLineWidth( linewidth );\n        setLineCap( linecap );\n        setLineJoin( linejoin );\n        setStrokeStyle( color.getStyle() );\n\n        _context.stroke();\n\n        _elemBox.expandByScalar( linewidth * 2 );\n\n    }\n\n    function fillPath( color ) {\n\n        setFillStyle( color.getStyle() );\n        _context.fill();\n\n    }\n\n    function patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n        if ( texture instanceof THREE.DataTexture || texture.image === undefined || texture.image.width == 0 ) return;\n\n        if ( texture.needsUpdate === true ) {\n\n            var repeatX = texture.wrapS == THREE.RepeatWrapping;\n            var repeatY = texture.wrapT == THREE.RepeatWrapping;\n\n            _patterns[ texture.id ] = _context.createPattern(\n                texture.image, repeatX === true && repeatY === true\n                    ? 'repeat'\n                    : repeatX === true && repeatY === false\n                    ? 'repeat-x'\n                    : repeatX === false && repeatY === true\n                    ? 'repeat-y'\n                    : 'no-repeat'\n            );\n\n            texture.needsUpdate = false;\n\n        }\n\n        _patterns[ texture.id ] === undefined\n            ? setFillStyle( 'rgba(0,0,0,1)' )\n            : setFillStyle( _patterns[ texture.id ] );\n\n        // http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n        var a, b, c, d, e, f, det, idet,\n            offsetX = texture.offset.x / texture.repeat.x,\n            offsetY = texture.offset.y / texture.repeat.y,\n            width = texture.image.width * texture.repeat.x,\n            height = texture.image.height * texture.repeat.y;\n\n        u0 = ( u0 + offsetX ) * width;\n        v0 = ( 1.0 - v0 + offsetY ) * height;\n\n        u1 = ( u1 + offsetX ) * width;\n        v1 = ( 1.0 - v1 + offsetY ) * height;\n\n        u2 = ( u2 + offsetX ) * width;\n        v2 = ( 1.0 - v2 + offsetY ) * height;\n\n        x1 -= x0; y1 -= y0;\n        x2 -= x0; y2 -= y0;\n\n        u1 -= u0; v1 -= v0;\n        u2 -= u0; v2 -= v0;\n\n        det = u1 * v2 - u2 * v1;\n\n        if ( det === 0 ) {\n\n            if ( _imagedatas[ texture.id ] === undefined ) {\n\n                var canvas = document.createElement( 'canvas' )\n                canvas.width = texture.image.width;\n                canvas.height = texture.image.height;\n\n                var context = canvas.getContext( '2d' );\n                context.drawImage( texture.image, 0, 0 );\n\n                _imagedatas[ texture.id ] = context.getImageData( 0, 0, texture.image.width, texture.image.height ).data;\n\n            }\n\n            var data = _imagedatas[ texture.id ];\n            var index = ( Math.floor( u0 ) + Math.floor( v0 ) * texture.image.width ) * 4;\n\n            _color.setRGB( data[ index ] / 255, data[ index + 1 ] / 255, data[ index + 2 ] / 255 );\n            fillPath( _color );\n\n            return;\n\n        }\n\n        idet = 1 / det;\n\n        a = ( v2 * x1 - v1 * x2 ) * idet;\n        b = ( v2 * y1 - v1 * y2 ) * idet;\n        c = ( u1 * x2 - u2 * x1 ) * idet;\n        d = ( u1 * y2 - u2 * y1 ) * idet;\n\n        e = x0 - a * u0 - c * v0;\n        f = y0 - b * u0 - d * v0;\n\n        _context.save();\n        _context.transform( a, b, c, d, e, f );\n        _context.fill();\n        _context.restore();\n\n    }\n\n    function clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n        // http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n        var a, b, c, d, e, f, det, idet,\n            width = image.width - 1,\n            height = image.height - 1;\n\n        u0 *= width; v0 *= height;\n        u1 *= width; v1 *= height;\n        u2 *= width; v2 *= height;\n\n        x1 -= x0; y1 -= y0;\n        x2 -= x0; y2 -= y0;\n\n        u1 -= u0; v1 -= v0;\n        u2 -= u0; v2 -= v0;\n\n        det = u1 * v2 - u2 * v1;\n\n        idet = 1 / det;\n\n        a = ( v2 * x1 - v1 * x2 ) * idet;\n        b = ( v2 * y1 - v1 * y2 ) * idet;\n        c = ( u1 * x2 - u2 * x1 ) * idet;\n        d = ( u1 * y2 - u2 * y1 ) * idet;\n\n        e = x0 - a * u0 - c * v0;\n        f = y0 - b * u0 - d * v0;\n\n        _context.save();\n        _context.transform( a, b, c, d, e, f );\n        _context.clip();\n        _context.drawImage( image, 0, 0 );\n        _context.restore();\n\n    }\n\n    function getGradientTexture( color1, color2, color3, color4 ) {\n\n        // http://mrdoob.com/blog/post/710\n\n        _pixelMapData[ 0 ] = ( color1.r * 255 ) | 0;\n        _pixelMapData[ 1 ] = ( color1.g * 255 ) | 0;\n        _pixelMapData[ 2 ] = ( color1.b * 255 ) | 0;\n\n        _pixelMapData[ 4 ] = ( color2.r * 255 ) | 0;\n        _pixelMapData[ 5 ] = ( color2.g * 255 ) | 0;\n        _pixelMapData[ 6 ] = ( color2.b * 255 ) | 0;\n\n        _pixelMapData[ 8 ] = ( color3.r * 255 ) | 0;\n        _pixelMapData[ 9 ] = ( color3.g * 255 ) | 0;\n        _pixelMapData[ 10 ] = ( color3.b * 255 ) | 0;\n\n        _pixelMapData[ 12 ] = ( color4.r * 255 ) | 0;\n        _pixelMapData[ 13 ] = ( color4.g * 255 ) | 0;\n        _pixelMapData[ 14 ] = ( color4.b * 255 ) | 0;\n\n        _pixelMapContext.putImageData( _pixelMapImage, 0, 0 );\n        _gradientMapContext.drawImage( _pixelMap, 0, 0 );\n\n        return _gradientMap;\n\n    }\n\n    // Hide anti-alias gaps\n\n    function expand( v1, v2, pixels ) {\n\n        var x = v2.x - v1.x, y = v2.y - v1.y,\n            det = x * x + y * y, idet;\n\n        if ( det === 0 ) return;\n\n        idet = pixels / Math.sqrt( det );\n\n        x *= idet; y *= idet;\n\n        v2.x += x; v2.y += y;\n        v1.x -= x; v1.y -= y;\n\n    }\n\n    // Context cached methods.\n\n    function setOpacity( value ) {\n\n        if ( _contextGlobalAlpha !== value ) {\n\n            _context.globalAlpha = value;\n            _contextGlobalAlpha = value;\n\n        }\n\n    }\n\n    function setBlending( value ) {\n\n        if ( _contextGlobalCompositeOperation !== value ) {\n\n            if ( value === THREE.NormalBlending ) {\n\n                _context.globalCompositeOperation = 'source-over';\n\n            } else if ( value === THREE.AdditiveBlending ) {\n\n                _context.globalCompositeOperation = 'lighter';\n\n            } else if ( value === THREE.SubtractiveBlending ) {\n\n                _context.globalCompositeOperation = 'darker';\n\n            }\n\n            _contextGlobalCompositeOperation = value;\n\n        }\n\n    }\n\n    function setLineWidth( value ) {\n\n        if ( _contextLineWidth !== value ) {\n\n            _context.lineWidth = value;\n            _contextLineWidth = value;\n\n        }\n\n    }\n\n    function setLineCap( value ) {\n\n        // \"butt\", \"round\", \"square\"\n\n        if ( _contextLineCap !== value ) {\n\n            _context.lineCap = value;\n            _contextLineCap = value;\n\n        }\n\n    }\n\n    function setLineJoin( value ) {\n\n        // \"round\", \"bevel\", \"miter\"\n\n        if ( _contextLineJoin !== value ) {\n\n            _context.lineJoin = value;\n            _contextLineJoin = value;\n\n        }\n\n    }\n\n    function setStrokeStyle( value ) {\n\n        if ( _contextStrokeStyle !== value ) {\n\n            _context.strokeStyle = value;\n            _contextStrokeStyle = value;\n\n        }\n\n    }\n\n    function setFillStyle( value ) {\n\n        if ( _contextFillStyle !== value ) {\n\n            _context.fillStyle = value;\n            _contextFillStyle = value;\n\n        }\n\n    }\n\n    function setDashAndGap( dashSizeValue, gapSizeValue ) {\n\n        if ( _contextDashSize !== dashSizeValue || _contextGapSize !== gapSizeValue ) {\n\n            _context.setLineDash( [ dashSizeValue, gapSizeValue ] );\n            _contextDashSize = dashSizeValue;\n            _contextGapSize = gapSizeValue;\n\n        }\n\n    }\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\nTHREE.ShaderChunk = {\n\n    // FOG\n\n    fog_pars_fragment: [\n\n        \"#ifdef USE_FOG\",\n\n        \"uniform vec3 fogColor;\",\n\n        \"#ifdef FOG_EXP2\",\n\n        \"uniform float fogDensity;\",\n\n        \"#else\",\n\n        \"uniform float fogNear;\",\n        \"uniform float fogFar;\",\n\n        \"#endif\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    fog_fragment: [\n\n        \"#ifdef USE_FOG\",\n\n        \"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\n\n        \"#ifdef FOG_EXP2\",\n\n        \"const float LOG2 = 1.442695;\",\n        \"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\n        \"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\n\n        \"#else\",\n\n        \"float fogFactor = smoothstep( fogNear, fogFar, depth );\",\n\n        \"#endif\",\n\n        \"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // ENVIRONMENT MAP\n\n    envmap_pars_fragment: [\n\n        \"#ifdef USE_ENVMAP\",\n\n        \"uniform float reflectivity;\",\n        \"uniform samplerCube envMap;\",\n        \"uniform float flipEnvMap;\",\n        \"uniform int combine;\",\n\n        \"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\",\n\n        \"uniform bool useRefract;\",\n        \"uniform float refractionRatio;\",\n\n        \"#else\",\n\n        \"varying vec3 vReflect;\",\n\n        \"#endif\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    envmap_fragment: [\n\n        \"#ifdef USE_ENVMAP\",\n\n        \"vec3 reflectVec;\",\n\n        \"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\",\n\n        \"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\n\n        \"if ( useRefract ) {\",\n\n        \"reflectVec = refract( cameraToVertex, normal, refractionRatio );\",\n\n        \"} else { \",\n\n        \"reflectVec = reflect( cameraToVertex, normal );\",\n\n        \"}\",\n\n        \"#else\",\n\n        \"reflectVec = vReflect;\",\n\n        \"#endif\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\",\n        \"vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\",\n\n        \"#else\",\n\n        \"vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\",\n\n        \"#endif\",\n\n        \"#ifdef GAMMA_INPUT\",\n\n        \"cubeColor.xyz *= cubeColor.xyz;\",\n\n        \"#endif\",\n\n        \"if ( combine == 1 ) {\",\n\n        \"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\",\n\n        \"} else if ( combine == 2 ) {\",\n\n        \"gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\",\n\n        \"} else {\",\n\n        \"gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\",\n\n        \"}\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    envmap_pars_vertex: [\n\n        \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\",\n\n        \"varying vec3 vReflect;\",\n\n        \"uniform float refractionRatio;\",\n        \"uniform bool useRefract;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    worldpos_vertex : [\n\n        \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\",\n\n        \"#ifdef USE_SKINNING\",\n\n        \"vec4 worldPosition = modelMatrix * skinned;\",\n\n        \"#endif\",\n\n        \"#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\",\n\n        \"vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\",\n\n        \"#endif\",\n\n        \"#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\",\n\n        \"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\n        \"#endif\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    envmap_vertex : [\n\n        \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\",\n\n        \"vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\",\n        \"worldNormal = normalize( worldNormal );\",\n\n        \"vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\",\n\n        \"if ( useRefract ) {\",\n\n        \"vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\",\n\n        \"} else {\",\n\n        \"vReflect = reflect( cameraToVertex, worldNormal );\",\n\n        \"}\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // COLOR MAP (particles)\n\n    map_particle_pars_fragment: [\n\n        \"#ifdef USE_MAP\",\n\n        \"uniform sampler2D map;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n\n    map_particle_fragment: [\n\n        \"#ifdef USE_MAP\",\n\n        \"gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // COLOR MAP (triangles)\n\n    map_pars_vertex: [\n\n        \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\n\n        \"varying vec2 vUv;\",\n        \"uniform vec4 offsetRepeat;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    map_pars_fragment: [\n\n        \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\n\n        \"varying vec2 vUv;\",\n\n        \"#endif\",\n\n        \"#ifdef USE_MAP\",\n\n        \"uniform sampler2D map;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    map_vertex: [\n\n        \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\n\n        \"vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    map_fragment: [\n\n        \"#ifdef USE_MAP\",\n\n        \"vec4 texelColor = texture2D( map, vUv );\",\n\n        \"#ifdef GAMMA_INPUT\",\n\n        \"texelColor.xyz *= texelColor.xyz;\",\n\n        \"#endif\",\n\n        \"gl_FragColor = gl_FragColor * texelColor;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // LIGHT MAP\n\n    lightmap_pars_fragment: [\n\n        \"#ifdef USE_LIGHTMAP\",\n\n        \"varying vec2 vUv2;\",\n        \"uniform sampler2D lightMap;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    lightmap_pars_vertex: [\n\n        \"#ifdef USE_LIGHTMAP\",\n\n        \"varying vec2 vUv2;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    lightmap_fragment: [\n\n        \"#ifdef USE_LIGHTMAP\",\n\n        \"gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    lightmap_vertex: [\n\n        \"#ifdef USE_LIGHTMAP\",\n\n        \"vUv2 = uv2;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // BUMP MAP\n\n    bumpmap_pars_fragment: [\n\n        \"#ifdef USE_BUMPMAP\",\n\n        \"uniform sampler2D bumpMap;\",\n        \"uniform float bumpScale;\",\n\n        // Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n        //\thttp://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n        // Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n        \"vec2 dHdxy_fwd() {\",\n\n        \"vec2 dSTdx = dFdx( vUv );\",\n        \"vec2 dSTdy = dFdy( vUv );\",\n\n        \"float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\",\n        \"float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\",\n        \"float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\",\n\n        \"return vec2( dBx, dBy );\",\n\n        \"}\",\n\n        \"vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\",\n\n        \"vec3 vSigmaX = dFdx( surf_pos );\",\n        \"vec3 vSigmaY = dFdy( surf_pos );\",\n        \"vec3 vN = surf_norm;\",\t\t// normalized\n\n        \"vec3 R1 = cross( vSigmaY, vN );\",\n        \"vec3 R2 = cross( vN, vSigmaX );\",\n\n        \"float fDet = dot( vSigmaX, R1 );\",\n\n        \"vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\",\n        \"return normalize( abs( fDet ) * surf_norm - vGrad );\",\n\n        \"}\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // NORMAL MAP\n\n    normalmap_pars_fragment: [\n\n        \"#ifdef USE_NORMALMAP\",\n\n        \"uniform sampler2D normalMap;\",\n        \"uniform vec2 normalScale;\",\n\n        // Per-Pixel Tangent Space Normal Mapping\n        // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n        \"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\",\n\n        \"vec3 q0 = dFdx( eye_pos.xyz );\",\n        \"vec3 q1 = dFdy( eye_pos.xyz );\",\n        \"vec2 st0 = dFdx( vUv.st );\",\n        \"vec2 st1 = dFdy( vUv.st );\",\n\n        \"vec3 S = normalize(  q0 * st1.t - q1 * st0.t );\",\n        \"vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\",\n        \"vec3 N = normalize( surf_norm );\",\n\n        \"vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\",\n        \"mapN.xy = normalScale * mapN.xy;\",\n        \"mat3 tsn = mat3( S, T, N );\",\n        \"return normalize( tsn * mapN );\",\n\n        \"}\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // SPECULAR MAP\n\n    specularmap_pars_fragment: [\n\n        \"#ifdef USE_SPECULARMAP\",\n\n        \"uniform sampler2D specularMap;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    specularmap_fragment: [\n\n        \"float specularStrength;\",\n\n        \"#ifdef USE_SPECULARMAP\",\n\n        \"vec4 texelSpecular = texture2D( specularMap, vUv );\",\n        \"specularStrength = texelSpecular.r;\",\n\n        \"#else\",\n\n        \"specularStrength = 1.0;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // LIGHTS LAMBERT\n\n    lights_lambert_pars_vertex: [\n\n        \"uniform vec3 ambient;\",\n        \"uniform vec3 diffuse;\",\n        \"uniform vec3 emissive;\",\n\n        \"uniform vec3 ambientLightColor;\",\n\n        \"#if MAX_DIR_LIGHTS > 0\",\n\n        \"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\n        \"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#if MAX_HEMI_LIGHTS > 0\",\n\n        \"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\n        \"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\n        \"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#if MAX_POINT_LIGHTS > 0\",\n\n        \"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\n        \"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\n        \"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0\",\n\n        \"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\n        \"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\n        \"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\n        \"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\n        \"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\n        \"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"uniform vec3 wrapRGB;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    lights_lambert_vertex: [\n\n        \"vLightFront = vec3( 0.0 );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vLightBack = vec3( 0.0 );\",\n\n        \"#endif\",\n\n        \"transformedNormal = normalize( transformedNormal );\",\n\n        \"#if MAX_DIR_LIGHTS > 0\",\n\n        \"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\",\n\n        \"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\n        \"vec3 dirVector = normalize( lDirection.xyz );\",\n\n        \"float dotProduct = dot( transformedNormal, dirVector );\",\n        \"vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\n        \"directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"vLightFront += directionalLightColor[ i ] * directionalLightWeighting;\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#if MAX_POINT_LIGHTS > 0\",\n\n        \"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\n\n        \"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\n        \"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\n\n        \"float lDistance = 1.0;\",\n        \"if ( pointLightDistance[ i ] > 0.0 )\",\n        \"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\n\n        \"lVector = normalize( lVector );\",\n        \"float dotProduct = dot( transformedNormal, lVector );\",\n\n        \"vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\n        \"pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0\",\n\n        \"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\n\n        \"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\n        \"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\n\n        \"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\",\n\n        \"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\n\n        \"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\n\n        \"float lDistance = 1.0;\",\n        \"if ( spotLightDistance[ i ] > 0.0 )\",\n        \"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\n\n        \"lVector = normalize( lVector );\",\n\n        \"float dotProduct = dot( transformedNormal, lVector );\",\n        \"vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\n        \"spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#if MAX_HEMI_LIGHTS > 0\",\n\n        \"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\n\n        \"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\n        \"vec3 lVector = normalize( lDirection.xyz );\",\n\n        \"float dotProduct = dot( transformedNormal, lVector );\",\n\n        \"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\n        \"float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\",\n\n        \"vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // LIGHTS PHONG\n\n    lights_phong_pars_vertex: [\n\n        \"#ifndef PHONG_PER_PIXEL\",\n\n        \"#if MAX_POINT_LIGHTS > 0\",\n\n        \"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\n        \"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\n\n        \"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0\",\n\n        \"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\n        \"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\n\n        \"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\n\n        \"varying vec3 vWorldPosition;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n\n    lights_phong_vertex: [\n\n        \"#ifndef PHONG_PER_PIXEL\",\n\n        \"#if MAX_POINT_LIGHTS > 0\",\n\n        \"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\n\n        \"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\n        \"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\n\n        \"float lDistance = 1.0;\",\n        \"if ( pointLightDistance[ i ] > 0.0 )\",\n        \"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\n\n        \"vPointLight[ i ] = vec4( lVector, lDistance );\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0\",\n\n        \"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\n\n        \"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\n        \"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\n\n        \"float lDistance = 1.0;\",\n        \"if ( spotLightDistance[ i ] > 0.0 )\",\n        \"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\n\n        \"vSpotLight[ i ] = vec4( lVector, lDistance );\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\n\n        \"vWorldPosition = worldPosition.xyz;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    lights_phong_pars_fragment: [\n\n        \"uniform vec3 ambientLightColor;\",\n\n        \"#if MAX_DIR_LIGHTS > 0\",\n\n        \"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\n        \"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#if MAX_HEMI_LIGHTS > 0\",\n\n        \"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\n        \"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\n        \"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#if MAX_POINT_LIGHTS > 0\",\n\n        \"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\n\n        \"#ifdef PHONG_PER_PIXEL\",\n\n        \"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\n        \"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\n\n        \"#else\",\n\n        \"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0\",\n\n        \"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\n        \"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\n        \"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\n        \"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\n        \"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\n\n        \"#ifdef PHONG_PER_PIXEL\",\n\n        \"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\n\n        \"#else\",\n\n        \"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\n\n        \"varying vec3 vWorldPosition;\",\n\n        \"#endif\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"uniform vec3 wrapRGB;\",\n\n        \"#endif\",\n\n        \"varying vec3 vViewPosition;\",\n        \"varying vec3 vNormal;\"\n\n    ].join(\"\\n\"),\n\n    lights_phong_fragment: [\n\n        \"vec3 normal = normalize( vNormal );\",\n        \"vec3 viewPosition = normalize( vViewPosition );\",\n\n        \"#ifdef DOUBLE_SIDED\",\n\n        \"normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\",\n\n        \"#endif\",\n\n        \"#ifdef USE_NORMALMAP\",\n\n        \"normal = perturbNormal2Arb( -vViewPosition, normal );\",\n\n        \"#elif defined( USE_BUMPMAP )\",\n\n        \"normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\",\n\n        \"#endif\",\n\n        \"#if MAX_POINT_LIGHTS > 0\",\n\n        \"vec3 pointDiffuse  = vec3( 0.0 );\",\n        \"vec3 pointSpecular = vec3( 0.0 );\",\n\n        \"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\n\n        \"#ifdef PHONG_PER_PIXEL\",\n\n        \"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\n        \"vec3 lVector = lPosition.xyz + vViewPosition.xyz;\",\n\n        \"float lDistance = 1.0;\",\n        \"if ( pointLightDistance[ i ] > 0.0 )\",\n        \"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\n\n        \"lVector = normalize( lVector );\",\n\n        \"#else\",\n\n        \"vec3 lVector = normalize( vPointLight[ i ].xyz );\",\n        \"float lDistance = vPointLight[ i ].w;\",\n\n        \"#endif\",\n\n        // diffuse\n\n        \"float dotProduct = dot( normal, lVector );\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"float pointDiffuseWeightFull = max( dotProduct, 0.0 );\",\n        \"float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\n\n        \"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\n\n        \"#else\",\n\n        \"float pointDiffuseWeight = max( dotProduct, 0.0 );\",\n\n        \"#endif\",\n\n        \"pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\",\n\n        // specular\n\n        \"vec3 pointHalfVector = normalize( lVector + viewPosition );\",\n        \"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\n        \"float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\",\n\n        \"#ifdef PHYSICALLY_BASED_SHADING\",\n\n        // 2.0 => 2.0001 is hack to work around ANGLE bug\n\n        \"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\n\n        \"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\",\n        \"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\",\n\n        \"#else\",\n\n        \"pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0\",\n\n        \"vec3 spotDiffuse  = vec3( 0.0 );\",\n        \"vec3 spotSpecular = vec3( 0.0 );\",\n\n        \"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\n\n        \"#ifdef PHONG_PER_PIXEL\",\n\n        \"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\n        \"vec3 lVector = lPosition.xyz + vViewPosition.xyz;\",\n\n        \"float lDistance = 1.0;\",\n        \"if ( spotLightDistance[ i ] > 0.0 )\",\n        \"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\n\n        \"lVector = normalize( lVector );\",\n\n        \"#else\",\n\n        \"vec3 lVector = normalize( vSpotLight[ i ].xyz );\",\n        \"float lDistance = vSpotLight[ i ].w;\",\n\n        \"#endif\",\n\n        \"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\n\n        \"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\n\n        \"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\n\n        // diffuse\n\n        \"float dotProduct = dot( normal, lVector );\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"float spotDiffuseWeightFull = max( dotProduct, 0.0 );\",\n        \"float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\n\n        \"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\n\n        \"#else\",\n\n        \"float spotDiffuseWeight = max( dotProduct, 0.0 );\",\n\n        \"#endif\",\n\n        \"spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\",\n\n        // specular\n\n        \"vec3 spotHalfVector = normalize( lVector + viewPosition );\",\n        \"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\n        \"float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\",\n\n        \"#ifdef PHYSICALLY_BASED_SHADING\",\n\n        // 2.0 => 2.0001 is hack to work around ANGLE bug\n\n        \"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\n\n        \"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\",\n        \"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\",\n\n        \"#else\",\n\n        \"spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#if MAX_DIR_LIGHTS > 0\",\n\n        \"vec3 dirDiffuse  = vec3( 0.0 );\",\n        \"vec3 dirSpecular = vec3( 0.0 );\" ,\n\n        \"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\",\n\n        \"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\n        \"vec3 dirVector = normalize( lDirection.xyz );\",\n\n        // diffuse\n\n        \"float dotProduct = dot( normal, dirVector );\",\n\n        \"#ifdef WRAP_AROUND\",\n\n        \"float dirDiffuseWeightFull = max( dotProduct, 0.0 );\",\n        \"float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\n\n        \"vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\",\n\n        \"#else\",\n\n        \"float dirDiffuseWeight = max( dotProduct, 0.0 );\",\n\n        \"#endif\",\n\n        \"dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\",\n\n        // specular\n\n        \"vec3 dirHalfVector = normalize( dirVector + viewPosition );\",\n        \"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\n        \"float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\",\n\n        \"#ifdef PHYSICALLY_BASED_SHADING\",\n\n        /*\n         // fresnel term from skin shader\n         \"const float F0 = 0.128;\",\n\n         \"float base = 1.0 - dot( viewPosition, dirHalfVector );\",\n         \"float exponential = pow( base, 5.0 );\",\n\n         \"float fresnel = exponential + F0 * ( 1.0 - exponential );\",\n         */\n\n        /*\n         // fresnel term from fresnel shader\n         \"const float mFresnelBias = 0.08;\",\n         \"const float mFresnelScale = 0.3;\",\n         \"const float mFresnelPower = 5.0;\",\n\n         \"float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\",\n         */\n\n        // 2.0 => 2.0001 is hack to work around ANGLE bug\n\n        \"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\n\n        //\"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\",\n\n        \"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\",\n        \"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\n\n        \"#else\",\n\n        \"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#if MAX_HEMI_LIGHTS > 0\",\n\n        \"vec3 hemiDiffuse  = vec3( 0.0 );\",\n        \"vec3 hemiSpecular = vec3( 0.0 );\" ,\n\n        \"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\n\n        \"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\n        \"vec3 lVector = normalize( lDirection.xyz );\",\n\n        // diffuse\n\n        \"float dotProduct = dot( normal, lVector );\",\n        \"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\n\n        \"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\n\n        \"hemiDiffuse += diffuse * hemiColor;\",\n\n        // specular (sky light)\n\n        \"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\n        \"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\n        \"float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\",\n\n        // specular (ground light)\n\n        \"vec3 lVectorGround = -lVector;\",\n\n        \"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\n        \"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\n        \"float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\",\n\n        \"#ifdef PHYSICALLY_BASED_SHADING\",\n\n        \"float dotProductGround = dot( normal, lVectorGround );\",\n\n        // 2.0 => 2.0001 is hack to work around ANGLE bug\n\n        \"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\n\n        \"vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\",\n        \"vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\",\n        \"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\n\n        \"#else\",\n\n        \"hemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"vec3 totalDiffuse = vec3( 0.0 );\",\n        \"vec3 totalSpecular = vec3( 0.0 );\",\n\n        \"#if MAX_DIR_LIGHTS > 0\",\n\n        \"totalDiffuse += dirDiffuse;\",\n        \"totalSpecular += dirSpecular;\",\n\n        \"#endif\",\n\n        \"#if MAX_HEMI_LIGHTS > 0\",\n\n        \"totalDiffuse += hemiDiffuse;\",\n        \"totalSpecular += hemiSpecular;\",\n\n        \"#endif\",\n\n        \"#if MAX_POINT_LIGHTS > 0\",\n\n        \"totalDiffuse += pointDiffuse;\",\n        \"totalSpecular += pointSpecular;\",\n\n        \"#endif\",\n\n        \"#if MAX_SPOT_LIGHTS > 0\",\n\n        \"totalDiffuse += spotDiffuse;\",\n        \"totalSpecular += spotSpecular;\",\n\n        \"#endif\",\n\n        \"#ifdef METAL\",\n\n        \"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\",\n\n        \"#else\",\n\n        \"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // VERTEX COLORS\n\n    color_pars_fragment: [\n\n        \"#ifdef USE_COLOR\",\n\n        \"varying vec3 vColor;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n\n    color_fragment: [\n\n        \"#ifdef USE_COLOR\",\n\n        \"gl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    color_pars_vertex: [\n\n        \"#ifdef USE_COLOR\",\n\n        \"varying vec3 vColor;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n\n    color_vertex: [\n\n        \"#ifdef USE_COLOR\",\n\n        \"#ifdef GAMMA_INPUT\",\n\n        \"vColor = color * color;\",\n\n        \"#else\",\n\n        \"vColor = color;\",\n\n        \"#endif\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // SKINNING\n\n    skinning_pars_vertex: [\n\n        \"#ifdef USE_SKINNING\",\n\n        \"#ifdef BONE_TEXTURE\",\n\n        \"uniform sampler2D boneTexture;\",\n        \"uniform int boneTextureWidth;\",\n        \"uniform int boneTextureHeight;\",\n\n        \"mat4 getBoneMatrix( const in float i ) {\",\n\n        \"float j = i * 4.0;\",\n        \"float x = mod( j, float( boneTextureWidth ) );\",\n        \"float y = floor( j / float( boneTextureWidth ) );\",\n\n        \"float dx = 1.0 / float( boneTextureWidth );\",\n        \"float dy = 1.0 / float( boneTextureHeight );\",\n\n        \"y = dy * ( y + 0.5 );\",\n\n        \"vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\",\n        \"vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\",\n        \"vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\",\n        \"vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\",\n\n        \"mat4 bone = mat4( v1, v2, v3, v4 );\",\n\n        \"return bone;\",\n\n        \"}\",\n\n        \"#else\",\n\n        \"uniform mat4 boneGlobalMatrices[ MAX_BONES ];\",\n\n        \"mat4 getBoneMatrix( const in float i ) {\",\n\n        \"mat4 bone = boneGlobalMatrices[ int(i) ];\",\n        \"return bone;\",\n\n        \"}\",\n\n        \"#endif\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    skinbase_vertex: [\n\n        \"#ifdef USE_SKINNING\",\n\n        \"mat4 boneMatX = getBoneMatrix( skinIndex.x );\",\n        \"mat4 boneMatY = getBoneMatrix( skinIndex.y );\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    skinning_vertex: [\n\n        \"#ifdef USE_SKINNING\",\n\n        \"#ifdef USE_MORPHTARGETS\",\n\n        \"vec4 skinVertex = vec4( morphed, 1.0 );\",\n\n        \"#else\",\n\n        \"vec4 skinVertex = vec4( position, 1.0 );\",\n\n        \"#endif\",\n\n        \"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\n        \"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // MORPHING\n\n    morphtarget_pars_vertex: [\n\n        \"#ifdef USE_MORPHTARGETS\",\n\n        \"#ifndef USE_MORPHNORMALS\",\n\n        \"uniform float morphTargetInfluences[ 8 ];\",\n\n        \"#else\",\n\n        \"uniform float morphTargetInfluences[ 4 ];\",\n\n        \"#endif\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    morphtarget_vertex: [\n\n        \"#ifdef USE_MORPHTARGETS\",\n\n        \"vec3 morphed = vec3( 0.0 );\",\n        \"morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\",\n        \"morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\",\n        \"morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\",\n        \"morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\",\n\n        \"#ifndef USE_MORPHNORMALS\",\n\n        \"morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\",\n        \"morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\",\n        \"morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\",\n        \"morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\",\n\n        \"#endif\",\n\n        \"morphed += position;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    default_vertex : [\n\n        \"vec4 mvPosition;\",\n\n        \"#ifdef USE_SKINNING\",\n\n        \"mvPosition = modelViewMatrix * skinned;\",\n\n        \"#endif\",\n\n        \"#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\",\n\n        \"mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\",\n\n        \"#endif\",\n\n        \"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\",\n\n        \"mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\n        \"#endif\",\n\n        \"gl_Position = projectionMatrix * mvPosition;\"\n\n    ].join(\"\\n\"),\n\n    morphnormal_vertex: [\n\n        \"#ifdef USE_MORPHNORMALS\",\n\n        \"vec3 morphedNormal = vec3( 0.0 );\",\n\n        \"morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\",\n        \"morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\",\n        \"morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\",\n        \"morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\",\n\n        \"morphedNormal += normal;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    skinnormal_vertex: [\n\n        \"#ifdef USE_SKINNING\",\n\n        \"mat4 skinMatrix = skinWeight.x * boneMatX;\",\n        \"skinMatrix \t+= skinWeight.y * boneMatY;\",\n\n        \"#ifdef USE_MORPHNORMALS\",\n\n        \"vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\",\n\n        \"#else\",\n\n        \"vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\",\n\n        \"#endif\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    defaultnormal_vertex: [\n\n        \"vec3 objectNormal;\",\n\n        \"#ifdef USE_SKINNING\",\n\n        \"objectNormal = skinnedNormal.xyz;\",\n\n        \"#endif\",\n\n        \"#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\",\n\n        \"objectNormal = morphedNormal;\",\n\n        \"#endif\",\n\n        \"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\",\n\n        \"objectNormal = normal;\",\n\n        \"#endif\",\n\n        \"#ifdef FLIP_SIDED\",\n\n        \"objectNormal = -objectNormal;\",\n\n        \"#endif\",\n\n        \"vec3 transformedNormal = normalMatrix * objectNormal;\"\n\n    ].join(\"\\n\"),\n\n    // SHADOW MAP\n\n    // based on SpiderGL shadow map and Fabien Sanglard's GLSL shadow mapping examples\n    //  http://spidergl.org/example.php?id=6\n    // \thttp://fabiensanglard.net/shadowmapping\n\n    shadowmap_pars_fragment: [\n\n        \"#ifdef USE_SHADOWMAP\",\n\n        \"uniform sampler2D shadowMap[ MAX_SHADOWS ];\",\n        \"uniform vec2 shadowMapSize[ MAX_SHADOWS ];\",\n\n        \"uniform float shadowDarkness[ MAX_SHADOWS ];\",\n        \"uniform float shadowBias[ MAX_SHADOWS ];\",\n\n        \"varying vec4 vShadowCoord[ MAX_SHADOWS ];\",\n\n        \"float unpackDepth( const in vec4 rgba_depth ) {\",\n\n        \"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\n        \"float depth = dot( rgba_depth, bit_shift );\",\n        \"return depth;\",\n\n        \"}\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    shadowmap_fragment: [\n\n        \"#ifdef USE_SHADOWMAP\",\n\n        \"#ifdef SHADOWMAP_DEBUG\",\n\n        \"vec3 frustumColors[3];\",\n        \"frustumColors[0] = vec3( 1.0, 0.5, 0.0 );\",\n        \"frustumColors[1] = vec3( 0.0, 1.0, 0.8 );\",\n        \"frustumColors[2] = vec3( 0.0, 0.5, 1.0 );\",\n\n        \"#endif\",\n\n        \"#ifdef SHADOWMAP_CASCADE\",\n\n        \"int inFrustumCount = 0;\",\n\n        \"#endif\",\n\n        \"float fDepth;\",\n        \"vec3 shadowColor = vec3( 1.0 );\",\n\n        \"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\n\n        \"vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\",\n\n        // \"if ( something && something )\" \t\t breaks ATI OpenGL shader compiler\n        // \"if ( all( something, something ) )\"  using this instead\n\n        \"bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\",\n        \"bool inFrustum = all( inFrustumVec );\",\n\n        // don't shadow pixels outside of light frustum\n        // use just first frustum (for cascades)\n        // don't shadow pixels behind far plane of light frustum\n\n        \"#ifdef SHADOWMAP_CASCADE\",\n\n        \"inFrustumCount += int( inFrustum );\",\n        \"bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\",\n\n        \"#else\",\n\n        \"bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\",\n\n        \"#endif\",\n\n        \"bool frustumTest = all( frustumTestVec );\",\n\n        \"if ( frustumTest ) {\",\n\n        \"shadowCoord.z += shadowBias[ i ];\",\n\n        \"#if defined( SHADOWMAP_TYPE_PCF )\",\n\n        // Percentage-close filtering\n        // (9 pixel kernel)\n        // http://fabiensanglard.net/shadowmappingPCF/\n\n        \"float shadow = 0.0;\",\n\n        /*\n         // nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n         // must enroll loop manually\n\n         \"for ( float y = -1.25; y <= 1.25; y += 1.25 )\",\n         \"for ( float x = -1.25; x <= 1.25; x += 1.25 ) {\",\n\n         \"vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\",\n\n         // doesn't seem to produce any noticeable visual difference compared to simple \"texture2D\" lookup\n         //\"vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\",\n\n         \"float fDepth = unpackDepth( rgbaDepth );\",\n\n         \"if ( fDepth < shadowCoord.z )\",\n         \"shadow += 1.0;\",\n\n         \"}\",\n\n         \"shadow /= 9.0;\",\n\n         */\n\n        \"const float shadowDelta = 1.0 / 9.0;\",\n\n        \"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\",\n        \"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\",\n\n        \"float dx0 = -1.25 * xPixelOffset;\",\n        \"float dy0 = -1.25 * yPixelOffset;\",\n        \"float dx1 = 1.25 * xPixelOffset;\",\n        \"float dy1 = 1.25 * yPixelOffset;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\",\n        \"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\n\n        \"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\",\n\n        \"#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\",\n\n        // Percentage-close filtering\n        // (9 pixel kernel)\n        // http://fabiensanglard.net/shadowmappingPCF/\n\n        \"float shadow = 0.0;\",\n\n        \"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\",\n        \"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\",\n\n        \"float dx0 = -1.0 * xPixelOffset;\",\n        \"float dy0 = -1.0 * yPixelOffset;\",\n        \"float dx1 = 1.0 * xPixelOffset;\",\n        \"float dy1 = 1.0 * yPixelOffset;\",\n\n        \"mat3 shadowKernel;\",\n        \"mat3 depthKernel;\",\n\n        \"depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\",\n        \"depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\",\n        \"depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\",\n        \"depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\",\n        \"depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\",\n        \"depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\",\n        \"depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\",\n        \"depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\",\n        \"depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\",\n\n        \"vec3 shadowZ = vec3( shadowCoord.z );\",\n        \"shadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\",\n        \"shadowKernel[0] *= vec3(0.25);\",\n\n        \"shadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\",\n        \"shadowKernel[1] *= vec3(0.25);\",\n\n        \"shadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\",\n        \"shadowKernel[2] *= vec3(0.25);\",\n\n        \"vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\",\n\n        \"shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\",\n        \"shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\",\n\n        \"vec4 shadowValues;\",\n        \"shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\",\n        \"shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\",\n        \"shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\",\n        \"shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\",\n\n        \"shadow = dot( shadowValues, vec4( 1.0 ) );\",\n\n        \"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\",\n\n        \"#else\",\n\n        \"vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\",\n        \"float fDepth = unpackDepth( rgbaDepth );\",\n\n        \"if ( fDepth < shadowCoord.z )\",\n\n        // spot with multiple shadows is darker\n\n        \"shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\",\n\n        // spot with multiple shadows has the same color as single shadow spot\n\n        //\"shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\",\n\n        \"#endif\",\n\n        \"}\",\n\n\n        \"#ifdef SHADOWMAP_DEBUG\",\n\n        \"#ifdef SHADOWMAP_CASCADE\",\n\n        \"if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\",\n\n        \"#else\",\n\n        \"if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\",\n\n        \"#endif\",\n\n        \"#endif\",\n\n        \"}\",\n\n        \"#ifdef GAMMA_OUTPUT\",\n\n        \"shadowColor *= shadowColor;\",\n\n        \"#endif\",\n\n        \"gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    shadowmap_pars_vertex: [\n\n        \"#ifdef USE_SHADOWMAP\",\n\n        \"varying vec4 vShadowCoord[ MAX_SHADOWS ];\",\n        \"uniform mat4 shadowMatrix[ MAX_SHADOWS ];\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    shadowmap_vertex: [\n\n        \"#ifdef USE_SHADOWMAP\",\n\n        \"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\n\n        \"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\n\n        \"}\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // ALPHATEST\n\n    alphatest_fragment: [\n\n        \"#ifdef ALPHATEST\",\n\n        \"if ( gl_FragColor.a < ALPHATEST ) discard;\",\n\n        \"#endif\"\n\n    ].join(\"\\n\"),\n\n    // LINEAR SPACE\n\n    linear_to_gamma_fragment: [\n\n        \"#ifdef GAMMA_OUTPUT\",\n\n        \"gl_FragColor.xyz = sqrt( gl_FragColor.xyz );\",\n\n        \"#endif\"\n\n    ].join(\"\\n\")\n\n\n};\n\nTHREE.UniformsUtils = {\n\n    merge: function ( uniforms ) {\n\n        var u, p, tmp, merged = {};\n\n        for ( u = 0; u < uniforms.length; u ++ ) {\n\n            tmp = this.clone( uniforms[ u ] );\n\n            for ( p in tmp ) {\n\n                merged[ p ] = tmp[ p ];\n\n            }\n\n        }\n\n        return merged;\n\n    },\n\n    clone: function ( uniforms_src ) {\n\n        var u, p, parameter, parameter_src, uniforms_dst = {};\n\n        for ( u in uniforms_src ) {\n\n            uniforms_dst[ u ] = {};\n\n            for ( p in uniforms_src[ u ] ) {\n\n                parameter_src = uniforms_src[ u ][ p ];\n\n                if ( parameter_src instanceof THREE.Color ||\n                    parameter_src instanceof THREE.Vector2 ||\n                    parameter_src instanceof THREE.Vector3 ||\n                    parameter_src instanceof THREE.Vector4 ||\n                    parameter_src instanceof THREE.Matrix4 ||\n                    parameter_src instanceof THREE.Texture ) {\n\n                    uniforms_dst[ u ][ p ] = parameter_src.clone();\n\n                } else if ( parameter_src instanceof Array ) {\n\n                    uniforms_dst[ u ][ p ] = parameter_src.slice();\n\n                } else {\n\n                    uniforms_dst[ u ][ p ] = parameter_src;\n\n                }\n\n            }\n\n        }\n\n        return uniforms_dst;\n\n    }\n\n};\n\nTHREE.UniformsLib = {\n\n    common: {\n\n        \"diffuse\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\n        \"opacity\" : { type: \"f\", value: 1.0 },\n\n        \"map\" : { type: \"t\", value: null },\n        \"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n        \"lightMap\" : { type: \"t\", value: null },\n        \"specularMap\" : { type: \"t\", value: null },\n\n        \"envMap\" : { type: \"t\", value: null },\n        \"flipEnvMap\" : { type: \"f\", value: -1 },\n        \"useRefract\" : { type: \"i\", value: 0 },\n        \"reflectivity\" : { type: \"f\", value: 1.0 },\n        \"refractionRatio\" : { type: \"f\", value: 0.98 },\n        \"combine\" : { type: \"i\", value: 0 },\n\n        \"morphTargetInfluences\" : { type: \"f\", value: 0 }\n\n    },\n\n    bump: {\n\n        \"bumpMap\" : { type: \"t\", value: null },\n        \"bumpScale\" : { type: \"f\", value: 1 }\n\n    },\n\n    normalmap: {\n\n        \"normalMap\" : { type: \"t\", value: null },\n        \"normalScale\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\n    },\n\n    fog : {\n\n        \"fogDensity\" : { type: \"f\", value: 0.00025 },\n        \"fogNear\" : { type: \"f\", value: 1 },\n        \"fogFar\" : { type: \"f\", value: 2000 },\n        \"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\n\n    },\n\n    lights: {\n\n        \"ambientLightColor\" : { type: \"fv\", value: [] },\n\n        \"directionalLightDirection\" : { type: \"fv\", value: [] },\n        \"directionalLightColor\" : { type: \"fv\", value: [] },\n\n        \"hemisphereLightDirection\" : { type: \"fv\", value: [] },\n        \"hemisphereLightSkyColor\" : { type: \"fv\", value: [] },\n        \"hemisphereLightGroundColor\" : { type: \"fv\", value: [] },\n\n        \"pointLightColor\" : { type: \"fv\", value: [] },\n        \"pointLightPosition\" : { type: \"fv\", value: [] },\n        \"pointLightDistance\" : { type: \"fv1\", value: [] },\n\n        \"spotLightColor\" : { type: \"fv\", value: [] },\n        \"spotLightPosition\" : { type: \"fv\", value: [] },\n        \"spotLightDirection\" : { type: \"fv\", value: [] },\n        \"spotLightDistance\" : { type: \"fv1\", value: [] },\n        \"spotLightAngleCos\" : { type: \"fv1\", value: [] },\n        \"spotLightExponent\" : { type: \"fv1\", value: [] }\n\n    },\n\n    particle: {\n\n        \"psColor\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\n        \"opacity\" : { type: \"f\", value: 1.0 },\n        \"size\" : { type: \"f\", value: 1.0 },\n        \"scale\" : { type: \"f\", value: 1.0 },\n        \"map\" : { type: \"t\", value: null },\n\n        \"fogDensity\" : { type: \"f\", value: 0.00025 },\n        \"fogNear\" : { type: \"f\", value: 1 },\n        \"fogFar\" : { type: \"f\", value: 2000 },\n        \"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\n\n    },\n\n    shadowmap: {\n\n        \"shadowMap\": { type: \"tv\", value: [] },\n        \"shadowMapSize\": { type: \"v2v\", value: [] },\n\n        \"shadowBias\" : { type: \"fv1\", value: [] },\n        \"shadowDarkness\": { type: \"fv1\", value: [] },\n\n        \"shadowMatrix\" : { type: \"m4v\", value: [] }\n\n    }\n\n};\n\nTHREE.ShaderLib = {\n\n    'basic': {\n\n        uniforms: THREE.UniformsUtils.merge( [\n\n            THREE.UniformsLib[ \"common\" ],\n            THREE.UniformsLib[ \"fog\" ],\n            THREE.UniformsLib[ \"shadowmap\" ]\n\n        ] ),\n\n        vertexShader: [\n\n            THREE.ShaderChunk[ \"map_pars_vertex\" ],\n            THREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\n            THREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n            THREE.ShaderChunk[ \"color_pars_vertex\" ],\n            THREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n            THREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\n            \"void main() {\",\n\n            THREE.ShaderChunk[ \"map_vertex\" ],\n            THREE.ShaderChunk[ \"lightmap_vertex\" ],\n            THREE.ShaderChunk[ \"color_vertex\" ],\n            THREE.ShaderChunk[ \"skinbase_vertex\" ],\n\n            \"#ifdef USE_ENVMAP\",\n\n            THREE.ShaderChunk[ \"morphnormal_vertex\" ],\n            THREE.ShaderChunk[ \"skinnormal_vertex\" ],\n            THREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n            \"#endif\",\n\n            THREE.ShaderChunk[ \"morphtarget_vertex\" ],\n            THREE.ShaderChunk[ \"skinning_vertex\" ],\n            THREE.ShaderChunk[ \"default_vertex\" ],\n\n            THREE.ShaderChunk[ \"worldpos_vertex\" ],\n            THREE.ShaderChunk[ \"envmap_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"uniform vec3 diffuse;\",\n            \"uniform float opacity;\",\n\n            THREE.ShaderChunk[ \"color_pars_fragment\" ],\n            THREE.ShaderChunk[ \"map_pars_fragment\" ],\n            THREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"fog_pars_fragment\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\n            \"void main() {\",\n\n            \"gl_FragColor = vec4( diffuse, opacity );\",\n\n            THREE.ShaderChunk[ \"map_fragment\" ],\n            THREE.ShaderChunk[ \"alphatest_fragment\" ],\n            THREE.ShaderChunk[ \"specularmap_fragment\" ],\n            THREE.ShaderChunk[ \"lightmap_fragment\" ],\n            THREE.ShaderChunk[ \"color_fragment\" ],\n            THREE.ShaderChunk[ \"envmap_fragment\" ],\n            THREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n            THREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n            THREE.ShaderChunk[ \"fog_fragment\" ],\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    'lambert': {\n\n        uniforms: THREE.UniformsUtils.merge( [\n\n            THREE.UniformsLib[ \"common\" ],\n            THREE.UniformsLib[ \"fog\" ],\n            THREE.UniformsLib[ \"lights\" ],\n            THREE.UniformsLib[ \"shadowmap\" ],\n\n            {\n                \"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\n                \"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\n                \"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\n            }\n\n        ] ),\n\n        vertexShader: [\n\n            \"#define LAMBERT\",\n\n            \"varying vec3 vLightFront;\",\n\n            \"#ifdef DOUBLE_SIDED\",\n\n            \"varying vec3 vLightBack;\",\n\n            \"#endif\",\n\n            THREE.ShaderChunk[ \"map_pars_vertex\" ],\n            THREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\n            THREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n            THREE.ShaderChunk[ \"lights_lambert_pars_vertex\" ],\n            THREE.ShaderChunk[ \"color_pars_vertex\" ],\n            THREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n            THREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\n            \"void main() {\",\n\n            THREE.ShaderChunk[ \"map_vertex\" ],\n            THREE.ShaderChunk[ \"lightmap_vertex\" ],\n            THREE.ShaderChunk[ \"color_vertex\" ],\n\n            THREE.ShaderChunk[ \"morphnormal_vertex\" ],\n            THREE.ShaderChunk[ \"skinbase_vertex\" ],\n            THREE.ShaderChunk[ \"skinnormal_vertex\" ],\n            THREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n            THREE.ShaderChunk[ \"morphtarget_vertex\" ],\n            THREE.ShaderChunk[ \"skinning_vertex\" ],\n            THREE.ShaderChunk[ \"default_vertex\" ],\n\n            THREE.ShaderChunk[ \"worldpos_vertex\" ],\n            THREE.ShaderChunk[ \"envmap_vertex\" ],\n            THREE.ShaderChunk[ \"lights_lambert_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"uniform float opacity;\",\n\n            \"varying vec3 vLightFront;\",\n\n            \"#ifdef DOUBLE_SIDED\",\n\n            \"varying vec3 vLightBack;\",\n\n            \"#endif\",\n\n            THREE.ShaderChunk[ \"color_pars_fragment\" ],\n            THREE.ShaderChunk[ \"map_pars_fragment\" ],\n            THREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"fog_pars_fragment\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\n            \"void main() {\",\n\n            \"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\",\n\n            THREE.ShaderChunk[ \"map_fragment\" ],\n            THREE.ShaderChunk[ \"alphatest_fragment\" ],\n            THREE.ShaderChunk[ \"specularmap_fragment\" ],\n\n            \"#ifdef DOUBLE_SIDED\",\n\n            //\"float isFront = float( gl_FrontFacing );\",\n            //\"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;\",\n\n            \"if ( gl_FrontFacing )\",\n            \"gl_FragColor.xyz *= vLightFront;\",\n            \"else\",\n            \"gl_FragColor.xyz *= vLightBack;\",\n\n            \"#else\",\n\n            \"gl_FragColor.xyz *= vLightFront;\",\n\n            \"#endif\",\n\n            THREE.ShaderChunk[ \"lightmap_fragment\" ],\n            THREE.ShaderChunk[ \"color_fragment\" ],\n            THREE.ShaderChunk[ \"envmap_fragment\" ],\n            THREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n            THREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n            THREE.ShaderChunk[ \"fog_fragment\" ],\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    'phong': {\n\n        uniforms: THREE.UniformsUtils.merge( [\n\n            THREE.UniformsLib[ \"common\" ],\n            THREE.UniformsLib[ \"bump\" ],\n            THREE.UniformsLib[ \"normalmap\" ],\n            THREE.UniformsLib[ \"fog\" ],\n            THREE.UniformsLib[ \"lights\" ],\n            THREE.UniformsLib[ \"shadowmap\" ],\n\n            {\n                \"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\n                \"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\n                \"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\n                \"shininess\": { type: \"f\", value: 30 },\n                \"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\n            }\n\n        ] ),\n\n        vertexShader: [\n\n            \"#define PHONG\",\n\n            \"varying vec3 vViewPosition;\",\n            \"varying vec3 vNormal;\",\n\n            THREE.ShaderChunk[ \"map_pars_vertex\" ],\n            THREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\n            THREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n            THREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\n            THREE.ShaderChunk[ \"color_pars_vertex\" ],\n            THREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n            THREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\n            \"void main() {\",\n\n            THREE.ShaderChunk[ \"map_vertex\" ],\n            THREE.ShaderChunk[ \"lightmap_vertex\" ],\n            THREE.ShaderChunk[ \"color_vertex\" ],\n\n            THREE.ShaderChunk[ \"morphnormal_vertex\" ],\n            THREE.ShaderChunk[ \"skinbase_vertex\" ],\n            THREE.ShaderChunk[ \"skinnormal_vertex\" ],\n            THREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n            \"vNormal = normalize( transformedNormal );\",\n\n            THREE.ShaderChunk[ \"morphtarget_vertex\" ],\n            THREE.ShaderChunk[ \"skinning_vertex\" ],\n            THREE.ShaderChunk[ \"default_vertex\" ],\n\n            \"vViewPosition = -mvPosition.xyz;\",\n\n            THREE.ShaderChunk[ \"worldpos_vertex\" ],\n            THREE.ShaderChunk[ \"envmap_vertex\" ],\n            THREE.ShaderChunk[ \"lights_phong_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"uniform vec3 diffuse;\",\n            \"uniform float opacity;\",\n\n            \"uniform vec3 ambient;\",\n            \"uniform vec3 emissive;\",\n            \"uniform vec3 specular;\",\n            \"uniform float shininess;\",\n\n            THREE.ShaderChunk[ \"color_pars_fragment\" ],\n            THREE.ShaderChunk[ \"map_pars_fragment\" ],\n            THREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"fog_pars_fragment\" ],\n            THREE.ShaderChunk[ \"lights_phong_pars_fragment\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"bumpmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"normalmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\n            \"void main() {\",\n\n            \"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\",\n\n            THREE.ShaderChunk[ \"map_fragment\" ],\n            THREE.ShaderChunk[ \"alphatest_fragment\" ],\n            THREE.ShaderChunk[ \"specularmap_fragment\" ],\n\n            THREE.ShaderChunk[ \"lights_phong_fragment\" ],\n\n            THREE.ShaderChunk[ \"lightmap_fragment\" ],\n            THREE.ShaderChunk[ \"color_fragment\" ],\n            THREE.ShaderChunk[ \"envmap_fragment\" ],\n            THREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n            THREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n            THREE.ShaderChunk[ \"fog_fragment\" ],\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    'particle_basic': {\n\n        uniforms:  THREE.UniformsUtils.merge( [\n\n            THREE.UniformsLib[ \"particle\" ],\n            THREE.UniformsLib[ \"shadowmap\" ]\n\n        ] ),\n\n        vertexShader: [\n\n            \"uniform float size;\",\n            \"uniform float scale;\",\n\n            THREE.ShaderChunk[ \"color_pars_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\n            \"void main() {\",\n\n            THREE.ShaderChunk[ \"color_vertex\" ],\n\n            \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\n            \"#ifdef USE_SIZEATTENUATION\",\n            \"gl_PointSize = size * ( scale / length( mvPosition.xyz ) );\",\n            \"#else\",\n            \"gl_PointSize = size;\",\n            \"#endif\",\n\n            \"gl_Position = projectionMatrix * mvPosition;\",\n\n            THREE.ShaderChunk[ \"worldpos_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"uniform vec3 psColor;\",\n            \"uniform float opacity;\",\n\n            THREE.ShaderChunk[ \"color_pars_fragment\" ],\n            THREE.ShaderChunk[ \"map_particle_pars_fragment\" ],\n            THREE.ShaderChunk[ \"fog_pars_fragment\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\n            \"void main() {\",\n\n            \"gl_FragColor = vec4( psColor, opacity );\",\n\n            THREE.ShaderChunk[ \"map_particle_fragment\" ],\n            THREE.ShaderChunk[ \"alphatest_fragment\" ],\n            THREE.ShaderChunk[ \"color_fragment\" ],\n            THREE.ShaderChunk[ \"shadowmap_fragment\" ],\n            THREE.ShaderChunk[ \"fog_fragment\" ],\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    'dashed': {\n\n        uniforms: THREE.UniformsUtils.merge( [\n\n            THREE.UniformsLib[ \"common\" ],\n            THREE.UniformsLib[ \"fog\" ],\n\n            {\n                \"scale\":     { type: \"f\", value: 1 },\n                \"dashSize\":  { type: \"f\", value: 1 },\n                \"totalSize\": { type: \"f\", value: 2 }\n            }\n\n        ] ),\n\n        vertexShader: [\n\n            \"uniform float scale;\",\n            \"attribute float lineDistance;\",\n\n            \"varying float vLineDistance;\",\n\n            THREE.ShaderChunk[ \"color_pars_vertex\" ],\n\n            \"void main() {\",\n\n            THREE.ShaderChunk[ \"color_vertex\" ],\n\n            \"vLineDistance = scale * lineDistance;\",\n\n            \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n            \"gl_Position = projectionMatrix * mvPosition;\",\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"uniform vec3 diffuse;\",\n            \"uniform float opacity;\",\n\n            \"uniform float dashSize;\",\n            \"uniform float totalSize;\",\n\n            \"varying float vLineDistance;\",\n\n            THREE.ShaderChunk[ \"color_pars_fragment\" ],\n            THREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\n            \"void main() {\",\n\n            \"if ( mod( vLineDistance, totalSize ) > dashSize ) {\",\n\n            \"discard;\",\n\n            \"}\",\n\n            \"gl_FragColor = vec4( diffuse, opacity );\",\n\n            THREE.ShaderChunk[ \"color_fragment\" ],\n            THREE.ShaderChunk[ \"fog_fragment\" ],\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    'depth': {\n\n        uniforms: {\n\n            \"mNear\": { type: \"f\", value: 1.0 },\n            \"mFar\" : { type: \"f\", value: 2000.0 },\n            \"opacity\" : { type: \"f\", value: 1.0 }\n\n        },\n\n        vertexShader: [\n\n            \"void main() {\",\n\n            \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"uniform float mNear;\",\n            \"uniform float mFar;\",\n            \"uniform float opacity;\",\n\n            \"void main() {\",\n\n            \"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\n            \"float color = 1.0 - smoothstep( mNear, mFar, depth );\",\n            \"gl_FragColor = vec4( vec3( color ), opacity );\",\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    'normal': {\n\n        uniforms: {\n\n            \"opacity\" : { type: \"f\", value: 1.0 }\n\n        },\n\n        vertexShader: [\n\n            \"varying vec3 vNormal;\",\n\n            THREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\n            \"void main() {\",\n\n            \"vNormal = normalize( normalMatrix * normal );\",\n\n            THREE.ShaderChunk[ \"morphtarget_vertex\" ],\n            THREE.ShaderChunk[ \"default_vertex\" ],\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"uniform float opacity;\",\n            \"varying vec3 vNormal;\",\n\n            \"void main() {\",\n\n            \"gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\",\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    /* -------------------------------------------------------------------------\n     //\tNormal map shader\n     //\t\t- Blinn-Phong\n     //\t\t- normal + diffuse + specular + AO + displacement + reflection + shadow maps\n     //\t\t- point and directional lights (use with \"lights: true\" material option)\n     ------------------------------------------------------------------------- */\n\n    'normalmap' : {\n\n        uniforms: THREE.UniformsUtils.merge( [\n\n            THREE.UniformsLib[ \"fog\" ],\n            THREE.UniformsLib[ \"lights\" ],\n            THREE.UniformsLib[ \"shadowmap\" ],\n\n            {\n\n                \"enableAO\"\t\t  : { type: \"i\", value: 0 },\n                \"enableDiffuse\"\t  : { type: \"i\", value: 0 },\n                \"enableSpecular\"  : { type: \"i\", value: 0 },\n                \"enableReflection\": { type: \"i\", value: 0 },\n                \"enableDisplacement\": { type: \"i\", value: 0 },\n\n                \"tDisplacement\": { type: \"t\", value: null }, // must go first as this is vertex texture\n                \"tDiffuse\"\t   : { type: \"t\", value: null },\n                \"tCube\"\t\t   : { type: \"t\", value: null },\n                \"tNormal\"\t   : { type: \"t\", value: null },\n                \"tSpecular\"\t   : { type: \"t\", value: null },\n                \"tAO\"\t\t   : { type: \"t\", value: null },\n\n                \"uNormalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\n\n                \"uDisplacementBias\": { type: \"f\", value: 0.0 },\n                \"uDisplacementScale\": { type: \"f\", value: 1.0 },\n\n                \"uDiffuseColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\n                \"uSpecularColor\": { type: \"c\", value: new THREE.Color( 0x111111 ) },\n                \"uAmbientColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\n                \"uShininess\": { type: \"f\", value: 30 },\n                \"uOpacity\": { type: \"f\", value: 1 },\n\n                \"useRefract\": { type: \"i\", value: 0 },\n                \"uRefractionRatio\": { type: \"f\", value: 0.98 },\n                \"uReflectivity\": { type: \"f\", value: 0.5 },\n\n                \"uOffset\" : { type: \"v2\", value: new THREE.Vector2( 0, 0 ) },\n                \"uRepeat\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\n\n                \"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\n\n            }\n\n        ] ),\n\n        fragmentShader: [\n\n            \"uniform vec3 uAmbientColor;\",\n            \"uniform vec3 uDiffuseColor;\",\n            \"uniform vec3 uSpecularColor;\",\n            \"uniform float uShininess;\",\n            \"uniform float uOpacity;\",\n\n            \"uniform bool enableDiffuse;\",\n            \"uniform bool enableSpecular;\",\n            \"uniform bool enableAO;\",\n            \"uniform bool enableReflection;\",\n\n            \"uniform sampler2D tDiffuse;\",\n            \"uniform sampler2D tNormal;\",\n            \"uniform sampler2D tSpecular;\",\n            \"uniform sampler2D tAO;\",\n\n            \"uniform samplerCube tCube;\",\n\n            \"uniform vec2 uNormalScale;\",\n\n            \"uniform bool useRefract;\",\n            \"uniform float uRefractionRatio;\",\n            \"uniform float uReflectivity;\",\n\n            \"varying vec3 vTangent;\",\n            \"varying vec3 vBinormal;\",\n            \"varying vec3 vNormal;\",\n            \"varying vec2 vUv;\",\n\n            \"uniform vec3 ambientLightColor;\",\n\n            \"#if MAX_DIR_LIGHTS > 0\",\n\n            \"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\n            \"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\n\n            \"#endif\",\n\n            \"#if MAX_HEMI_LIGHTS > 0\",\n\n            \"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\n            \"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\n            \"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\n\n            \"#endif\",\n\n            \"#if MAX_POINT_LIGHTS > 0\",\n\n            \"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\n            \"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\n            \"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\n\n            \"#endif\",\n\n            \"#if MAX_SPOT_LIGHTS > 0\",\n\n            \"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\n            \"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\n            \"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\n            \"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\n            \"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\n            \"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\n\n            \"#endif\",\n\n            \"#ifdef WRAP_AROUND\",\n\n            \"uniform vec3 wrapRGB;\",\n\n            \"#endif\",\n\n            \"varying vec3 vWorldPosition;\",\n            \"varying vec3 vViewPosition;\",\n\n            THREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n            THREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\n            \"void main() {\",\n\n            \"gl_FragColor = vec4( vec3( 1.0 ), uOpacity );\",\n\n            \"vec3 specularTex = vec3( 1.0 );\",\n\n            \"vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\",\n            \"normalTex.xy *= uNormalScale;\",\n            \"normalTex = normalize( normalTex );\",\n\n            \"if( enableDiffuse ) {\",\n\n            \"#ifdef GAMMA_INPUT\",\n\n            \"vec4 texelColor = texture2D( tDiffuse, vUv );\",\n            \"texelColor.xyz *= texelColor.xyz;\",\n\n            \"gl_FragColor = gl_FragColor * texelColor;\",\n\n            \"#else\",\n\n            \"gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\",\n\n            \"#endif\",\n\n            \"}\",\n\n            \"if( enableAO ) {\",\n\n            \"#ifdef GAMMA_INPUT\",\n\n            \"vec4 aoColor = texture2D( tAO, vUv );\",\n            \"aoColor.xyz *= aoColor.xyz;\",\n\n            \"gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\",\n\n            \"#else\",\n\n            \"gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\",\n\n            \"#endif\",\n\n            \"}\",\n\n            \"if( enableSpecular )\",\n            \"specularTex = texture2D( tSpecular, vUv ).xyz;\",\n\n            \"mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\",\n            \"vec3 finalNormal = tsb * normalTex;\",\n\n            \"#ifdef FLIP_SIDED\",\n\n            \"finalNormal = -finalNormal;\",\n\n            \"#endif\",\n\n            \"vec3 normal = normalize( finalNormal );\",\n            \"vec3 viewPosition = normalize( vViewPosition );\",\n\n            // point lights\n\n            \"#if MAX_POINT_LIGHTS > 0\",\n\n            \"vec3 pointDiffuse = vec3( 0.0 );\",\n            \"vec3 pointSpecular = vec3( 0.0 );\",\n\n            \"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\n\n            \"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\n            \"vec3 pointVector = lPosition.xyz + vViewPosition.xyz;\",\n\n            \"float pointDistance = 1.0;\",\n            \"if ( pointLightDistance[ i ] > 0.0 )\",\n            \"pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\",\n\n            \"pointVector = normalize( pointVector );\",\n\n            // diffuse\n\n            \"#ifdef WRAP_AROUND\",\n\n            \"float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\",\n            \"float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\",\n\n            \"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\n\n            \"#else\",\n\n            \"float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\",\n\n            \"#endif\",\n\n            \"pointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\",\n\n            // specular\n\n            \"vec3 pointHalfVector = normalize( pointVector + viewPosition );\",\n            \"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\n            \"float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\",\n\n            \"#ifdef PHYSICALLY_BASED_SHADING\",\n\n            // 2.0 => 2.0001 is hack to work around ANGLE bug\n\n            \"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\n\n            \"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\",\n            \"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\",\n\n            \"#else\",\n\n            \"pointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\",\n\n            \"#endif\",\n\n            \"}\",\n\n            \"#endif\",\n\n            // spot lights\n\n            \"#if MAX_SPOT_LIGHTS > 0\",\n\n            \"vec3 spotDiffuse = vec3( 0.0 );\",\n            \"vec3 spotSpecular = vec3( 0.0 );\",\n\n            \"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\n\n            \"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\n            \"vec3 spotVector = lPosition.xyz + vViewPosition.xyz;\",\n\n            \"float spotDistance = 1.0;\",\n            \"if ( spotLightDistance[ i ] > 0.0 )\",\n            \"spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\",\n\n            \"spotVector = normalize( spotVector );\",\n\n            \"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\n\n            \"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\n\n            \"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\n\n            // diffuse\n\n            \"#ifdef WRAP_AROUND\",\n\n            \"float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\",\n            \"float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\",\n\n            \"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\n\n            \"#else\",\n\n            \"float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\",\n\n            \"#endif\",\n\n            \"spotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\",\n\n            // specular\n\n            \"vec3 spotHalfVector = normalize( spotVector + viewPosition );\",\n            \"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\n            \"float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\",\n\n            \"#ifdef PHYSICALLY_BASED_SHADING\",\n\n            // 2.0 => 2.0001 is hack to work around ANGLE bug\n\n            \"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\n\n            \"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\",\n            \"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\",\n\n            \"#else\",\n\n            \"spotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\",\n\n            \"#endif\",\n\n            \"}\",\n\n            \"}\",\n\n            \"#endif\",\n\n            // directional lights\n\n            \"#if MAX_DIR_LIGHTS > 0\",\n\n            \"vec3 dirDiffuse = vec3( 0.0 );\",\n            \"vec3 dirSpecular = vec3( 0.0 );\",\n\n            \"for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\",\n\n            \"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\n            \"vec3 dirVector = normalize( lDirection.xyz );\",\n\n            // diffuse\n\n            \"#ifdef WRAP_AROUND\",\n\n            \"float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\",\n            \"float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\",\n\n            \"vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\",\n\n            \"#else\",\n\n            \"float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\",\n\n            \"#endif\",\n\n            \"dirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\",\n\n            // specular\n\n            \"vec3 dirHalfVector = normalize( dirVector + viewPosition );\",\n            \"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\n            \"float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\",\n\n            \"#ifdef PHYSICALLY_BASED_SHADING\",\n\n            // 2.0 => 2.0001 is hack to work around ANGLE bug\n\n            \"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\n\n            \"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\",\n            \"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\n\n            \"#else\",\n\n            \"dirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\",\n\n            \"#endif\",\n\n            \"}\",\n\n            \"#endif\",\n\n            // hemisphere lights\n\n            \"#if MAX_HEMI_LIGHTS > 0\",\n\n            \"vec3 hemiDiffuse  = vec3( 0.0 );\",\n            \"vec3 hemiSpecular = vec3( 0.0 );\" ,\n\n            \"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\n\n            \"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\n            \"vec3 lVector = normalize( lDirection.xyz );\",\n\n            // diffuse\n\n            \"float dotProduct = dot( normal, lVector );\",\n            \"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\n\n            \"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\n\n            \"hemiDiffuse += uDiffuseColor * hemiColor;\",\n\n            // specular (sky light)\n\n\n            \"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\n            \"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\n            \"float hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\",\n\n            // specular (ground light)\n\n            \"vec3 lVectorGround = -lVector;\",\n\n            \"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\n            \"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\n            \"float hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\",\n\n            \"#ifdef PHYSICALLY_BASED_SHADING\",\n\n            \"float dotProductGround = dot( normal, lVectorGround );\",\n\n            // 2.0 => 2.0001 is hack to work around ANGLE bug\n\n            \"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\n\n            \"vec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\",\n            \"vec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\",\n            \"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\n\n            \"#else\",\n\n            \"hemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\",\n\n            \"#endif\",\n\n            \"}\",\n\n            \"#endif\",\n\n            // all lights contribution summation\n\n            \"vec3 totalDiffuse = vec3( 0.0 );\",\n            \"vec3 totalSpecular = vec3( 0.0 );\",\n\n            \"#if MAX_DIR_LIGHTS > 0\",\n\n            \"totalDiffuse += dirDiffuse;\",\n            \"totalSpecular += dirSpecular;\",\n\n            \"#endif\",\n\n            \"#if MAX_HEMI_LIGHTS > 0\",\n\n            \"totalDiffuse += hemiDiffuse;\",\n            \"totalSpecular += hemiSpecular;\",\n\n            \"#endif\",\n\n            \"#if MAX_POINT_LIGHTS > 0\",\n\n            \"totalDiffuse += pointDiffuse;\",\n            \"totalSpecular += pointSpecular;\",\n\n            \"#endif\",\n\n            \"#if MAX_SPOT_LIGHTS > 0\",\n\n            \"totalDiffuse += spotDiffuse;\",\n            \"totalSpecular += spotSpecular;\",\n\n            \"#endif\",\n\n            \"#ifdef METAL\",\n\n            \"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\",\n\n            \"#else\",\n\n            \"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\",\n\n            \"#endif\",\n\n            \"if ( enableReflection ) {\",\n\n            \"vec3 vReflect;\",\n            \"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\n\n            \"if ( useRefract ) {\",\n\n            \"vReflect = refract( cameraToVertex, normal, uRefractionRatio );\",\n\n            \"} else {\",\n\n            \"vReflect = reflect( cameraToVertex, normal );\",\n\n            \"}\",\n\n            \"vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\n\n            \"#ifdef GAMMA_INPUT\",\n\n            \"cubeColor.xyz *= cubeColor.xyz;\",\n\n            \"#endif\",\n\n            \"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\",\n\n            \"}\",\n\n            THREE.ShaderChunk[ \"shadowmap_fragment\" ],\n            THREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n            THREE.ShaderChunk[ \"fog_fragment\" ],\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        vertexShader: [\n\n            \"attribute vec4 tangent;\",\n\n            \"uniform vec2 uOffset;\",\n            \"uniform vec2 uRepeat;\",\n\n            \"uniform bool enableDisplacement;\",\n\n            \"#ifdef VERTEX_TEXTURES\",\n\n            \"uniform sampler2D tDisplacement;\",\n            \"uniform float uDisplacementScale;\",\n            \"uniform float uDisplacementBias;\",\n\n            \"#endif\",\n\n            \"varying vec3 vTangent;\",\n            \"varying vec3 vBinormal;\",\n            \"varying vec3 vNormal;\",\n            \"varying vec2 vUv;\",\n\n            \"varying vec3 vWorldPosition;\",\n            \"varying vec3 vViewPosition;\",\n\n            THREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n            THREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\n            \"void main() {\",\n\n            THREE.ShaderChunk[ \"skinbase_vertex\" ],\n            THREE.ShaderChunk[ \"skinnormal_vertex\" ],\n\n            // normal, tangent and binormal vectors\n\n            \"#ifdef USE_SKINNING\",\n\n            \"vNormal = normalize( normalMatrix * skinnedNormal.xyz );\",\n\n            \"vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\",\n            \"vTangent = normalize( normalMatrix * skinnedTangent.xyz );\",\n\n            \"#else\",\n\n            \"vNormal = normalize( normalMatrix * normal );\",\n            \"vTangent = normalize( normalMatrix * tangent.xyz );\",\n\n            \"#endif\",\n\n            \"vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\",\n\n            \"vUv = uv * uRepeat + uOffset;\",\n\n            // displacement mapping\n\n            \"vec3 displacedPosition;\",\n\n            \"#ifdef VERTEX_TEXTURES\",\n\n            \"if ( enableDisplacement ) {\",\n\n            \"vec3 dv = texture2D( tDisplacement, uv ).xyz;\",\n            \"float df = uDisplacementScale * dv.x + uDisplacementBias;\",\n            \"displacedPosition = position + normalize( normal ) * df;\",\n\n            \"} else {\",\n\n            \"#ifdef USE_SKINNING\",\n\n            \"vec4 skinVertex = vec4( position, 1.0 );\",\n\n            \"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\n            \"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\n\n            \"displacedPosition  = skinned.xyz;\",\n\n            \"#else\",\n\n            \"displacedPosition = position;\",\n\n            \"#endif\",\n\n            \"}\",\n\n            \"#else\",\n\n            \"#ifdef USE_SKINNING\",\n\n            \"vec4 skinVertex = vec4( position, 1.0 );\",\n\n            \"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\n            \"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\n\n            \"displacedPosition  = skinned.xyz;\",\n\n            \"#else\",\n\n            \"displacedPosition = position;\",\n\n            \"#endif\",\n\n            \"#endif\",\n\n            //\n\n            \"vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\",\n            \"vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\",\n\n            \"gl_Position = projectionMatrix * mvPosition;\",\n\n            //\n\n            \"vWorldPosition = worldPosition.xyz;\",\n            \"vViewPosition = -mvPosition.xyz;\",\n\n            // shadows\n\n            \"#ifdef USE_SHADOWMAP\",\n\n            \"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\n\n            \"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\n\n            \"}\",\n\n            \"#endif\",\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    /* -------------------------------------------------------------------------\n     //\tCube map shader\n     ------------------------------------------------------------------------- */\n\n    'cube': {\n\n        uniforms: { \"tCube\": { type: \"t\", value: null },\n            \"tFlip\": { type: \"f\", value: -1 } },\n\n        vertexShader: [\n\n            \"varying vec3 vWorldPosition;\",\n\n            \"void main() {\",\n\n            \"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n            \"vWorldPosition = worldPosition.xyz;\",\n\n            \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"uniform samplerCube tCube;\",\n            \"uniform float tFlip;\",\n\n            \"varying vec3 vWorldPosition;\",\n\n            \"void main() {\",\n\n            \"gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    },\n\n    // Depth encoding into RGBA texture\n    // \tbased on SpiderGL shadow map example\n    // \t\thttp://spidergl.org/example.php?id=6\n    // \toriginally from\n    //\t\thttp://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\n    // \tsee also here:\n    //\t\thttp://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n\n    'depthRGBA': {\n\n        uniforms: {},\n\n        vertexShader: [\n\n            THREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n            THREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\n            \"void main() {\",\n\n            THREE.ShaderChunk[ \"skinbase_vertex\" ],\n            THREE.ShaderChunk[ \"morphtarget_vertex\" ],\n            THREE.ShaderChunk[ \"skinning_vertex\" ],\n            THREE.ShaderChunk[ \"default_vertex\" ],\n\n            \"}\"\n\n        ].join(\"\\n\"),\n\n        fragmentShader: [\n\n            \"vec4 pack_depth( const in float depth ) {\",\n\n            \"const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\n            \"const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\n            \"vec4 res = fract( depth * bit_shift );\",\n            \"res -= res.xxyz * bit_mask;\",\n            \"return res;\",\n\n            \"}\",\n\n            \"void main() {\",\n\n            \"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\",\n\n            //\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );\",\n            //\"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );\",\n            //\"gl_FragData[ 0 ] = pack_depth( z );\",\n            //\"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );\",\n\n            \"}\"\n\n        ].join(\"\\n\")\n\n    }\n\n};\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.WebGLRenderer = function ( parameters ) {\n\n    console.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\n    parameters = parameters || {};\n\n    var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\n\n        _precision = parameters.precision !== undefined ? parameters.precision : 'highp',\n\n        _alpha = parameters.alpha !== undefined ? parameters.alpha : true,\n        _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n        _antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n        _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n        _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\n        _clearColor = new THREE.Color( 0x000000 ),\n        _clearAlpha = 0;\n\n    // public properties\n\n    this.domElement = _canvas;\n    this.context = null;\n    this.devicePixelRatio = parameters.devicePixelRatio !== undefined\n        ? parameters.devicePixelRatio\n        : self.devicePixelRatio !== undefined\n        ? self.devicePixelRatio\n        : 1;\n\n    // clearing\n\n    this.autoClear = true;\n    this.autoClearColor = true;\n    this.autoClearDepth = true;\n    this.autoClearStencil = true;\n\n    // scene graph\n\n    this.sortObjects = true;\n    this.autoUpdateObjects = true;\n\n    // physically based shading\n\n    this.gammaInput = false;\n    this.gammaOutput = false;\n    this.physicallyBasedShading = false;\n\n    // shadow map\n\n    this.shadowMapEnabled = false;\n    this.shadowMapAutoUpdate = true;\n    this.shadowMapType = THREE.PCFShadowMap;\n    this.shadowMapCullFace = THREE.CullFaceFront;\n    this.shadowMapDebug = false;\n    this.shadowMapCascade = false;\n\n    // morphs\n\n    this.maxMorphTargets = 8;\n    this.maxMorphNormals = 4;\n\n    // flags\n\n    this.autoScaleCubemaps = true;\n\n    // custom render plugins\n\n    this.renderPluginsPre = [];\n    this.renderPluginsPost = [];\n\n    // info\n\n    this.info = {\n\n        memory: {\n\n            programs: 0,\n            geometries: 0,\n            textures: 0\n\n        },\n\n        render: {\n\n            calls: 0,\n            vertices: 0,\n            faces: 0,\n            points: 0\n\n        }\n\n    };\n\n    // internal properties\n\n    var _this = this,\n\n        _programs = [],\n        _programs_counter = 0,\n\n    // internal state cache\n\n        _currentProgram = null,\n        _currentFramebuffer = null,\n        _currentMaterialId = -1,\n        _currentGeometryGroupHash = null,\n        _currentCamera = null,\n        _geometryGroupCounter = 0,\n\n        _usedTextureUnits = 0,\n\n    // GL state cache\n\n        _oldDoubleSided = -1,\n        _oldFlipSided = -1,\n\n        _oldBlending = -1,\n\n        _oldBlendEquation = -1,\n        _oldBlendSrc = -1,\n        _oldBlendDst = -1,\n\n        _oldDepthTest = -1,\n        _oldDepthWrite = -1,\n\n        _oldPolygonOffset = null,\n        _oldPolygonOffsetFactor = null,\n        _oldPolygonOffsetUnits = null,\n\n        _oldLineWidth = null,\n\n        _viewportX = 0,\n        _viewportY = 0,\n        _viewportWidth = _canvas.width,\n        _viewportHeight = _canvas.height,\n        _currentWidth = 0,\n        _currentHeight = 0,\n\n        _enabledAttributes = {},\n\n    // frustum\n\n        _frustum = new THREE.Frustum(),\n\n    // camera matrices cache\n\n        _projScreenMatrix = new THREE.Matrix4(),\n        _projScreenMatrixPS = new THREE.Matrix4(),\n\n        _vector3 = new THREE.Vector3(),\n\n    // light arrays cache\n\n        _direction = new THREE.Vector3(),\n\n        _lightsNeedUpdate = true,\n\n        _lights = {\n\n            ambient: [ 0, 0, 0 ],\n            directional: { length: 0, colors: new Array(), positions: new Array() },\n            point: { length: 0, colors: new Array(), positions: new Array(), distances: new Array() },\n            spot: { length: 0, colors: new Array(), positions: new Array(), distances: new Array(), directions: new Array(), anglesCos: new Array(), exponents: new Array() },\n            hemi: { length: 0, skyColors: new Array(), groundColors: new Array(), positions: new Array() }\n\n        };\n\n    // initialize\n\n    var _gl;\n\n    var _glExtensionTextureFloat;\n    var _glExtensionTextureFloatLinear;\n    var _glExtensionStandardDerivatives;\n    var _glExtensionTextureFilterAnisotropic;\n    var _glExtensionCompressedTextureS3TC;\n\n    initGL();\n\n    setDefaultGLState();\n\n    this.context = _gl;\n\n    // GPU capabilities\n\n    var _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );\n    var _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    var _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );\n    var _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    var _maxAnisotropy = _glExtensionTextureFilterAnisotropic ? _gl.getParameter( _glExtensionTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;\n\n    var _supportsVertexTextures = ( _maxVertexTextures > 0 );\n    var _supportsBoneTextures = _supportsVertexTextures && _glExtensionTextureFloat;\n\n    var _compressedTextureFormats = _glExtensionCompressedTextureS3TC ? _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS ) : [];\n\n    //\n\n    var _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );\n    var _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );\n    var _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );\n\n    var _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );\n    var _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );\n    var _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );\n\n    var _vertexShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_INT );\n    var _vertexShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_INT );\n    var _vertexShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_INT );\n\n    var _fragmentShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_INT );\n    var _fragmentShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_INT );\n    var _fragmentShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_INT );\n\n    // clamp precision to maximum available\n\n    var highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;\n    var mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;\n\n    if ( _precision === \"highp\" && ! highpAvailable ) {\n\n        if ( mediumpAvailable ) {\n\n            _precision = \"mediump\";\n            console.warn( \"WebGLRenderer: highp not supported, using mediump\" );\n\n        } else {\n\n            _precision = \"lowp\";\n            console.warn( \"WebGLRenderer: highp and mediump not supported, using lowp\" );\n\n        }\n\n    }\n\n    if ( _precision === \"mediump\" && ! mediumpAvailable ) {\n\n        _precision = \"lowp\";\n        console.warn( \"WebGLRenderer: mediump not supported, using lowp\" );\n\n    }\n\n    // API\n\n    this.getContext = function () {\n\n        return _gl;\n\n    };\n\n    this.supportsVertexTextures = function () {\n\n        return _supportsVertexTextures;\n\n    };\n\n    this.supportsFloatTextures = function () {\n\n        return _glExtensionTextureFloat;\n\n    };\n\n    this.supportsStandardDerivatives = function () {\n\n        return _glExtensionStandardDerivatives;\n\n    };\n\n    this.supportsCompressedTextureS3TC = function () {\n\n        return _glExtensionCompressedTextureS3TC;\n\n    };\n\n    this.getMaxAnisotropy  = function () {\n\n        return _maxAnisotropy;\n\n    };\n\n    this.getPrecision = function () {\n\n        return _precision;\n\n    };\n\n    this.setSize = function ( width, height, updateStyle ) {\n\n        _canvas.width = width * this.devicePixelRatio;\n        _canvas.height = height * this.devicePixelRatio;\n\n        if ( this.devicePixelRatio !== 1 && updateStyle !== false ) {\n\n            _canvas.style.width = width + 'px';\n            _canvas.style.height = height + 'px';\n\n        }\n\n        this.setViewport( 0, 0, _canvas.width, _canvas.height );\n\n    };\n\n    this.setViewport = function ( x, y, width, height ) {\n\n        _viewportX = x !== undefined ? x : 0;\n        _viewportY = y !== undefined ? y : 0;\n\n        _viewportWidth = width !== undefined ? width : _canvas.width;\n        _viewportHeight = height !== undefined ? height : _canvas.height;\n\n        _gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\n\n    };\n\n    this.setScissor = function ( x, y, width, height ) {\n\n        _gl.scissor( x, y, width, height );\n\n    };\n\n    this.enableScissorTest = function ( enable ) {\n\n        enable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );\n\n    };\n\n    // Clearing\n\n    this.setClearColor = function ( color, alpha ) {\n\n        _clearColor.set( color );\n        _clearAlpha = alpha !== undefined ? alpha : 1;\n\n        _gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    };\n\n    this.setClearColorHex = function ( hex, alpha ) {\n\n        console.warn( 'DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n        this.setClearColor( hex, alpha );\n\n    };\n\n    this.getClearColor = function () {\n\n        return _clearColor;\n\n    };\n\n    this.getClearAlpha = function () {\n\n        return _clearAlpha;\n\n    };\n\n    this.clear = function ( color, depth, stencil ) {\n\n        var bits = 0;\n\n        if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n        if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n        if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n        _gl.clear( bits );\n\n    };\n\n    this.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n        this.setRenderTarget( renderTarget );\n        this.clear( color, depth, stencil );\n\n    };\n\n    // Plugins\n\n    this.addPostPlugin = function ( plugin ) {\n\n        plugin.init( this );\n        this.renderPluginsPost.push( plugin );\n\n    };\n\n    this.addPrePlugin = function ( plugin ) {\n\n        plugin.init( this );\n        this.renderPluginsPre.push( plugin );\n\n    };\n\n    // Rendering\n\n    this.updateShadowMap = function ( scene, camera ) {\n\n        _currentProgram = null;\n        _oldBlending = -1;\n        _oldDepthTest = -1;\n        _oldDepthWrite = -1;\n        _currentGeometryGroupHash = -1;\n        _currentMaterialId = -1;\n        _lightsNeedUpdate = true;\n        _oldDoubleSided = -1;\n        _oldFlipSided = -1;\n\n        this.shadowMapPlugin.update( scene, camera );\n\n    };\n\n    // Internal functions\n\n    // Buffer allocation\n\n    function createParticleBuffers ( geometry ) {\n\n        geometry.__webglVertexBuffer = _gl.createBuffer();\n        geometry.__webglColorBuffer = _gl.createBuffer();\n\n        _this.info.memory.geometries ++;\n\n    };\n\n    function createLineBuffers ( geometry ) {\n\n        geometry.__webglVertexBuffer = _gl.createBuffer();\n        geometry.__webglColorBuffer = _gl.createBuffer();\n        geometry.__webglLineDistanceBuffer = _gl.createBuffer();\n\n        _this.info.memory.geometries ++;\n\n    };\n\n    function createMeshBuffers ( geometryGroup ) {\n\n        geometryGroup.__webglVertexBuffer = _gl.createBuffer();\n        geometryGroup.__webglNormalBuffer = _gl.createBuffer();\n        geometryGroup.__webglTangentBuffer = _gl.createBuffer();\n        geometryGroup.__webglColorBuffer = _gl.createBuffer();\n        geometryGroup.__webglUVBuffer = _gl.createBuffer();\n        geometryGroup.__webglUV2Buffer = _gl.createBuffer();\n\n        geometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();\n        geometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();\n\n        geometryGroup.__webglFaceBuffer = _gl.createBuffer();\n        geometryGroup.__webglLineBuffer = _gl.createBuffer();\n\n        var m, ml;\n\n        if ( geometryGroup.numMorphTargets ) {\n\n            geometryGroup.__webglMorphTargetsBuffers = [];\n\n            for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\n\n                geometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );\n\n            }\n\n        }\n\n        if ( geometryGroup.numMorphNormals ) {\n\n            geometryGroup.__webglMorphNormalsBuffers = [];\n\n            for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\n\n                geometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );\n\n            }\n\n        }\n\n        _this.info.memory.geometries ++;\n\n    };\n\n    // Events\n\n    var onGeometryDispose = function ( event ) {\n\n        var geometry = event.target;\n\n        geometry.removeEventListener( 'dispose', onGeometryDispose );\n\n        deallocateGeometry( geometry );\n\n    };\n\n    var onTextureDispose = function ( event ) {\n\n        var texture = event.target;\n\n        texture.removeEventListener( 'dispose', onTextureDispose );\n\n        deallocateTexture( texture );\n\n        _this.info.memory.textures --;\n\n\n    };\n\n    var onRenderTargetDispose = function ( event ) {\n\n        var renderTarget = event.target;\n\n        renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n        deallocateRenderTarget( renderTarget );\n\n        _this.info.memory.textures --;\n\n    };\n\n    var onMaterialDispose = function ( event ) {\n\n        var material = event.target;\n\n        material.removeEventListener( 'dispose', onMaterialDispose );\n\n        deallocateMaterial( material );\n\n    };\n\n    // Buffer deallocation\n\n    var deleteBuffers = function ( geometry ) {\n\n        if ( geometry.__webglVertexBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglVertexBuffer );\n        if ( geometry.__webglNormalBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglNormalBuffer );\n        if ( geometry.__webglTangentBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglTangentBuffer );\n        if ( geometry.__webglColorBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglColorBuffer );\n        if ( geometry.__webglUVBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglUVBuffer );\n        if ( geometry.__webglUV2Buffer !== undefined ) _gl.deleteBuffer( geometry.__webglUV2Buffer );\n\n        if ( geometry.__webglSkinIndicesBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinIndicesBuffer );\n        if ( geometry.__webglSkinWeightsBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinWeightsBuffer );\n\n        if ( geometry.__webglFaceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglFaceBuffer );\n        if ( geometry.__webglLineBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineBuffer );\n\n        if ( geometry.__webglLineDistanceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineDistanceBuffer );\n        // custom attributes\n\n        if ( geometry.__webglCustomAttributesList !== undefined ) {\n\n            for ( var id in geometry.__webglCustomAttributesList ) {\n\n                _gl.deleteBuffer( geometry.__webglCustomAttributesList[ id ].buffer );\n\n            }\n\n        }\n\n        _this.info.memory.geometries --;\n\n    };\n\n    var deallocateGeometry = function ( geometry ) {\n\n        geometry.__webglInit = undefined;\n\n        if ( geometry instanceof THREE.BufferGeometry ) {\n\n            var attributes = geometry.attributes;\n\n            for ( var key in attributes ) {\n\n                if ( attributes[ key ].buffer !== undefined ) {\n\n                    _gl.deleteBuffer( attributes[ key ].buffer );\n\n                }\n\n            }\n\n            _this.info.memory.geometries --;\n\n        } else {\n\n            if ( geometry.geometryGroups !== undefined ) {\n\n                for ( var g in geometry.geometryGroups ) {\n\n                    var geometryGroup = geometry.geometryGroups[ g ];\n\n                    if ( geometryGroup.numMorphTargets !== undefined ) {\n\n                        for ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\n\n                            _gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );\n\n                        }\n\n                    }\n\n                    if ( geometryGroup.numMorphNormals !== undefined ) {\n\n                        for ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\n\n                            _gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );\n\n                        }\n\n                    }\n\n                    deleteBuffers( geometryGroup );\n\n                }\n\n            } else {\n\n                deleteBuffers( geometry );\n\n            }\n\n        }\n\n    };\n\n    var deallocateTexture = function ( texture ) {\n\n        if ( texture.image && texture.image.__webglTextureCube ) {\n\n            // cube texture\n\n            _gl.deleteTexture( texture.image.__webglTextureCube );\n\n        } else {\n\n            // 2D texture\n\n            if ( ! texture.__webglInit ) return;\n\n            texture.__webglInit = false;\n            _gl.deleteTexture( texture.__webglTexture );\n\n        }\n\n    };\n\n    var deallocateRenderTarget = function ( renderTarget ) {\n\n        if ( !renderTarget || ! renderTarget.__webglTexture ) return;\n\n        _gl.deleteTexture( renderTarget.__webglTexture );\n\n        if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n            for ( var i = 0; i < 6; i ++ ) {\n\n                _gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );\n                _gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );\n\n            }\n\n        } else {\n\n            _gl.deleteFramebuffer( renderTarget.__webglFramebuffer );\n            _gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );\n\n        }\n\n    };\n\n    var deallocateMaterial = function ( material ) {\n\n        var program = material.program;\n\n        if ( program === undefined ) return;\n\n        material.program = undefined;\n\n        // only deallocate GL program if this was the last use of shared program\n        // assumed there is only single copy of any program in the _programs list\n        // (that's how it's constructed)\n\n        var i, il, programInfo;\n        var deleteProgram = false;\n\n        for ( i = 0, il = _programs.length; i < il; i ++ ) {\n\n            programInfo = _programs[ i ];\n\n            if ( programInfo.program === program ) {\n\n                programInfo.usedTimes --;\n\n                if ( programInfo.usedTimes === 0 ) {\n\n                    deleteProgram = true;\n\n                }\n\n                break;\n\n            }\n\n        }\n\n        if ( deleteProgram === true ) {\n\n            // avoid using array.splice, this is costlier than creating new array from scratch\n\n            var newPrograms = [];\n\n            for ( i = 0, il = _programs.length; i < il; i ++ ) {\n\n                programInfo = _programs[ i ];\n\n                if ( programInfo.program !== program ) {\n\n                    newPrograms.push( programInfo );\n\n                }\n\n            }\n\n            _programs = newPrograms;\n\n            _gl.deleteProgram( program );\n\n            _this.info.memory.programs --;\n\n        }\n\n    };\n\n    // Buffer initialization\n\n    function initCustomAttributes ( geometry, object ) {\n\n        var nvertices = geometry.vertices.length;\n\n        var material = object.material;\n\n        if ( material.attributes ) {\n\n            if ( geometry.__webglCustomAttributesList === undefined ) {\n\n                geometry.__webglCustomAttributesList = [];\n\n            }\n\n            for ( var a in material.attributes ) {\n\n                var attribute = material.attributes[ a ];\n\n                if ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {\n\n                    attribute.__webglInitialized = true;\n\n                    var size = 1;\t\t// \"f\" and \"i\"\n\n                    if ( attribute.type === \"v2\" ) size = 2;\n                    else if ( attribute.type === \"v3\" ) size = 3;\n                    else if ( attribute.type === \"v4\" ) size = 4;\n                    else if ( attribute.type === \"c\"  ) size = 3;\n\n                    attribute.size = size;\n\n                    attribute.array = new Float32Array( nvertices * size );\n\n                    attribute.buffer = _gl.createBuffer();\n                    attribute.buffer.belongsToAttribute = a;\n\n                    attribute.needsUpdate = true;\n\n                }\n\n                geometry.__webglCustomAttributesList.push( attribute );\n\n            }\n\n        }\n\n    };\n\n    function initParticleBuffers ( geometry, object ) {\n\n        var nvertices = geometry.vertices.length;\n\n        geometry.__vertexArray = new Float32Array( nvertices * 3 );\n        geometry.__colorArray = new Float32Array( nvertices * 3 );\n\n        geometry.__sortArray = [];\n\n        geometry.__webglParticleCount = nvertices;\n\n        initCustomAttributes ( geometry, object );\n\n    };\n\n    function initLineBuffers ( geometry, object ) {\n\n        var nvertices = geometry.vertices.length;\n\n        geometry.__vertexArray = new Float32Array( nvertices * 3 );\n        geometry.__colorArray = new Float32Array( nvertices * 3 );\n        geometry.__lineDistanceArray = new Float32Array( nvertices * 1 );\n\n        geometry.__webglLineCount = nvertices;\n\n        initCustomAttributes ( geometry, object );\n\n    };\n\n    function initMeshBuffers ( geometryGroup, object ) {\n\n        var geometry = object.geometry,\n            faces3 = geometryGroup.faces3,\n\n            nvertices = faces3.length * 3,\n            ntris     = faces3.length * 1,\n            nlines    = faces3.length * 3,\n\n            material = getBufferMaterial( object, geometryGroup ),\n\n            uvType = bufferGuessUVType( material ),\n            normalType = bufferGuessNormalType( material ),\n            vertexColorType = bufferGuessVertexColorType( material );\n\n        // console.log( \"uvType\", uvType, \"normalType\", normalType, \"vertexColorType\", vertexColorType, object, geometryGroup, material );\n\n        geometryGroup.__vertexArray = new Float32Array( nvertices * 3 );\n\n        if ( normalType ) {\n\n            geometryGroup.__normalArray = new Float32Array( nvertices * 3 );\n\n        }\n\n        if ( geometry.hasTangents ) {\n\n            geometryGroup.__tangentArray = new Float32Array( nvertices * 4 );\n\n        }\n\n        if ( vertexColorType ) {\n\n            geometryGroup.__colorArray = new Float32Array( nvertices * 3 );\n\n        }\n\n        if ( uvType ) {\n\n            if ( geometry.faceVertexUvs.length > 0 ) {\n\n                geometryGroup.__uvArray = new Float32Array( nvertices * 2 );\n\n            }\n\n            if ( geometry.faceVertexUvs.length > 1 ) {\n\n                geometryGroup.__uv2Array = new Float32Array( nvertices * 2 );\n\n            }\n\n        }\n\n        if ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {\n\n            geometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );\n            geometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );\n\n        }\n\n        geometryGroup.__faceArray = new Uint16Array( ntris * 3 );\n        geometryGroup.__lineArray = new Uint16Array( nlines * 2 );\n\n        var m, ml;\n\n        if ( geometryGroup.numMorphTargets ) {\n\n            geometryGroup.__morphTargetsArrays = [];\n\n            for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\n\n                geometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );\n\n            }\n\n        }\n\n        if ( geometryGroup.numMorphNormals ) {\n\n            geometryGroup.__morphNormalsArrays = [];\n\n            for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\n\n                geometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );\n\n            }\n\n        }\n\n        geometryGroup.__webglFaceCount = ntris * 3;\n        geometryGroup.__webglLineCount = nlines * 2;\n\n\n        // custom attributes\n\n        if ( material.attributes ) {\n\n            if ( geometryGroup.__webglCustomAttributesList === undefined ) {\n\n                geometryGroup.__webglCustomAttributesList = [];\n\n            }\n\n            for ( var a in material.attributes ) {\n\n                // Do a shallow copy of the attribute object so different geometryGroup chunks use different\n                // attribute buffers which are correctly indexed in the setMeshBuffers function\n\n                var originalAttribute = material.attributes[ a ];\n\n                var attribute = {};\n\n                for ( var property in originalAttribute ) {\n\n                    attribute[ property ] = originalAttribute[ property ];\n\n                }\n\n                if ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {\n\n                    attribute.__webglInitialized = true;\n\n                    var size = 1;\t\t// \"f\" and \"i\"\n\n                    if( attribute.type === \"v2\" ) size = 2;\n                    else if( attribute.type === \"v3\" ) size = 3;\n                    else if( attribute.type === \"v4\" ) size = 4;\n                    else if( attribute.type === \"c\"  ) size = 3;\n\n                    attribute.size = size;\n\n                    attribute.array = new Float32Array( nvertices * size );\n\n                    attribute.buffer = _gl.createBuffer();\n                    attribute.buffer.belongsToAttribute = a;\n\n                    originalAttribute.needsUpdate = true;\n                    attribute.__original = originalAttribute;\n\n                }\n\n                geometryGroup.__webglCustomAttributesList.push( attribute );\n\n            }\n\n        }\n\n        geometryGroup.__inittedArrays = true;\n\n    };\n\n    function getBufferMaterial( object, geometryGroup ) {\n\n        return object.material instanceof THREE.MeshFaceMaterial\n            ? object.material.materials[ geometryGroup.materialIndex ]\n            : object.material;\n\n    };\n\n    function materialNeedsSmoothNormals ( material ) {\n\n        return material && material.shading !== undefined && material.shading === THREE.SmoothShading;\n\n    };\n\n    function bufferGuessNormalType ( material ) {\n\n        // only MeshBasicMaterial and MeshDepthMaterial don't need normals\n\n        if ( ( material instanceof THREE.MeshBasicMaterial && !material.envMap ) || material instanceof THREE.MeshDepthMaterial ) {\n\n            return false;\n\n        }\n\n        if ( materialNeedsSmoothNormals( material ) ) {\n\n            return THREE.SmoothShading;\n\n        } else {\n\n            return THREE.FlatShading;\n\n        }\n\n    };\n\n    function bufferGuessVertexColorType( material ) {\n\n        if ( material.vertexColors ) {\n\n            return material.vertexColors;\n\n        }\n\n        return false;\n\n    };\n\n    function bufferGuessUVType( material ) {\n\n        // material must use some texture to require uvs\n\n        if ( material.map ||\n            material.lightMap ||\n            material.bumpMap ||\n            material.normalMap ||\n            material.specularMap ||\n            material instanceof THREE.ShaderMaterial ) {\n\n            return true;\n\n        }\n\n        return false;\n\n    };\n\n    //\n\n    function initDirectBuffers( geometry ) {\n\n        var a, attribute, type;\n\n        for ( a in geometry.attributes ) {\n\n            if ( a === \"index\" ) {\n\n                type = _gl.ELEMENT_ARRAY_BUFFER;\n\n            } else {\n\n                type = _gl.ARRAY_BUFFER;\n\n            }\n\n            attribute = geometry.attributes[ a ];\n\n            if ( attribute.numItems === undefined ) {\n\n                attribute.numItems = attribute.array.length;\n\n            }\n\n            attribute.buffer = _gl.createBuffer();\n\n            _gl.bindBuffer( type, attribute.buffer );\n            _gl.bufferData( type, attribute.array, _gl.STATIC_DRAW );\n\n        }\n\n    };\n\n    // Buffer setting\n\n    function setParticleBuffers ( geometry, hint, object ) {\n\n        var v, c, vertex, offset, index, color,\n\n            vertices = geometry.vertices,\n            vl = vertices.length,\n\n            colors = geometry.colors,\n            cl = colors.length,\n\n            vertexArray = geometry.__vertexArray,\n            colorArray = geometry.__colorArray,\n\n            sortArray = geometry.__sortArray,\n\n            dirtyVertices = geometry.verticesNeedUpdate,\n            dirtyElements = geometry.elementsNeedUpdate,\n            dirtyColors = geometry.colorsNeedUpdate,\n\n            customAttributes = geometry.__webglCustomAttributesList,\n            i, il,\n            a, ca, cal, value,\n            customAttribute;\n\n        if ( object.sortParticles ) {\n\n            _projScreenMatrixPS.copy( _projScreenMatrix );\n            _projScreenMatrixPS.multiply( object.matrixWorld );\n\n            for ( v = 0; v < vl; v ++ ) {\n\n                vertex = vertices[ v ];\n\n                _vector3.copy( vertex );\n                _vector3.applyProjection( _projScreenMatrixPS );\n\n                sortArray[ v ] = [ _vector3.z, v ];\n\n            }\n\n            sortArray.sort( numericalSort );\n\n            for ( v = 0; v < vl; v ++ ) {\n\n                vertex = vertices[ sortArray[v][1] ];\n\n                offset = v * 3;\n\n                vertexArray[ offset ]     = vertex.x;\n                vertexArray[ offset + 1 ] = vertex.y;\n                vertexArray[ offset + 2 ] = vertex.z;\n\n            }\n\n            for ( c = 0; c < cl; c ++ ) {\n\n                offset = c * 3;\n\n                color = colors[ sortArray[c][1] ];\n\n                colorArray[ offset ]     = color.r;\n                colorArray[ offset + 1 ] = color.g;\n                colorArray[ offset + 2 ] = color.b;\n\n            }\n\n            if ( customAttributes ) {\n\n                for ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n                    customAttribute = customAttributes[ i ];\n\n                    if ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) ) continue;\n\n                    offset = 0;\n\n                    cal = customAttribute.value.length;\n\n                    if ( customAttribute.size === 1 ) {\n\n                        for ( ca = 0; ca < cal; ca ++ ) {\n\n                            index = sortArray[ ca ][ 1 ];\n\n                            customAttribute.array[ ca ] = customAttribute.value[ index ];\n\n                        }\n\n                    } else if ( customAttribute.size === 2 ) {\n\n                        for ( ca = 0; ca < cal; ca ++ ) {\n\n                            index = sortArray[ ca ][ 1 ];\n\n                            value = customAttribute.value[ index ];\n\n                            customAttribute.array[ offset ] \t= value.x;\n                            customAttribute.array[ offset + 1 ] = value.y;\n\n                            offset += 2;\n\n                        }\n\n                    } else if ( customAttribute.size === 3 ) {\n\n                        if ( customAttribute.type === \"c\" ) {\n\n                            for ( ca = 0; ca < cal; ca ++ ) {\n\n                                index = sortArray[ ca ][ 1 ];\n\n                                value = customAttribute.value[ index ];\n\n                                customAttribute.array[ offset ]     = value.r;\n                                customAttribute.array[ offset + 1 ] = value.g;\n                                customAttribute.array[ offset + 2 ] = value.b;\n\n                                offset += 3;\n\n                            }\n\n                        } else {\n\n                            for ( ca = 0; ca < cal; ca ++ ) {\n\n                                index = sortArray[ ca ][ 1 ];\n\n                                value = customAttribute.value[ index ];\n\n                                customAttribute.array[ offset ] \t= value.x;\n                                customAttribute.array[ offset + 1 ] = value.y;\n                                customAttribute.array[ offset + 2 ] = value.z;\n\n                                offset += 3;\n\n                            }\n\n                        }\n\n                    } else if ( customAttribute.size === 4 ) {\n\n                        for ( ca = 0; ca < cal; ca ++ ) {\n\n                            index = sortArray[ ca ][ 1 ];\n\n                            value = customAttribute.value[ index ];\n\n                            customAttribute.array[ offset ]      = value.x;\n                            customAttribute.array[ offset + 1  ] = value.y;\n                            customAttribute.array[ offset + 2  ] = value.z;\n                            customAttribute.array[ offset + 3  ] = value.w;\n\n                            offset += 4;\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n        } else {\n\n            if ( dirtyVertices ) {\n\n                for ( v = 0; v < vl; v ++ ) {\n\n                    vertex = vertices[ v ];\n\n                    offset = v * 3;\n\n                    vertexArray[ offset ]     = vertex.x;\n                    vertexArray[ offset + 1 ] = vertex.y;\n                    vertexArray[ offset + 2 ] = vertex.z;\n\n                }\n\n            }\n\n            if ( dirtyColors ) {\n\n                for ( c = 0; c < cl; c ++ ) {\n\n                    color = colors[ c ];\n\n                    offset = c * 3;\n\n                    colorArray[ offset ]     = color.r;\n                    colorArray[ offset + 1 ] = color.g;\n                    colorArray[ offset + 2 ] = color.b;\n\n                }\n\n            }\n\n            if ( customAttributes ) {\n\n                for ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n                    customAttribute = customAttributes[ i ];\n\n                    if ( customAttribute.needsUpdate &&\n                        ( customAttribute.boundTo === undefined ||\n                            customAttribute.boundTo === \"vertices\") ) {\n\n                        cal = customAttribute.value.length;\n\n                        offset = 0;\n\n                        if ( customAttribute.size === 1 ) {\n\n                            for ( ca = 0; ca < cal; ca ++ ) {\n\n                                customAttribute.array[ ca ] = customAttribute.value[ ca ];\n\n                            }\n\n                        } else if ( customAttribute.size === 2 ) {\n\n                            for ( ca = 0; ca < cal; ca ++ ) {\n\n                                value = customAttribute.value[ ca ];\n\n                                customAttribute.array[ offset ] \t= value.x;\n                                customAttribute.array[ offset + 1 ] = value.y;\n\n                                offset += 2;\n\n                            }\n\n                        } else if ( customAttribute.size === 3 ) {\n\n                            if ( customAttribute.type === \"c\" ) {\n\n                                for ( ca = 0; ca < cal; ca ++ ) {\n\n                                    value = customAttribute.value[ ca ];\n\n                                    customAttribute.array[ offset ] \t= value.r;\n                                    customAttribute.array[ offset + 1 ] = value.g;\n                                    customAttribute.array[ offset + 2 ] = value.b;\n\n                                    offset += 3;\n\n                                }\n\n                            } else {\n\n                                for ( ca = 0; ca < cal; ca ++ ) {\n\n                                    value = customAttribute.value[ ca ];\n\n                                    customAttribute.array[ offset ] \t= value.x;\n                                    customAttribute.array[ offset + 1 ] = value.y;\n                                    customAttribute.array[ offset + 2 ] = value.z;\n\n                                    offset += 3;\n\n                                }\n\n                            }\n\n                        } else if ( customAttribute.size === 4 ) {\n\n                            for ( ca = 0; ca < cal; ca ++ ) {\n\n                                value = customAttribute.value[ ca ];\n\n                                customAttribute.array[ offset ]      = value.x;\n                                customAttribute.array[ offset + 1  ] = value.y;\n                                customAttribute.array[ offset + 2  ] = value.z;\n                                customAttribute.array[ offset + 3  ] = value.w;\n\n                                offset += 4;\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n        }\n\n        if ( dirtyVertices || object.sortParticles ) {\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\n\n        }\n\n        if ( dirtyColors || object.sortParticles ) {\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\n\n        }\n\n        if ( customAttributes ) {\n\n            for ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n                customAttribute = customAttributes[ i ];\n\n                if ( customAttribute.needsUpdate || object.sortParticles ) {\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\n                    _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\n\n                }\n\n            }\n\n        }\n\n\n    };\n\n    function setLineBuffers ( geometry, hint ) {\n\n        var v, c, d, vertex, offset, color,\n\n            vertices = geometry.vertices,\n            colors = geometry.colors,\n            lineDistances = geometry.lineDistances,\n\n            vl = vertices.length,\n            cl = colors.length,\n            dl = lineDistances.length,\n\n            vertexArray = geometry.__vertexArray,\n            colorArray = geometry.__colorArray,\n            lineDistanceArray = geometry.__lineDistanceArray,\n\n            dirtyVertices = geometry.verticesNeedUpdate,\n            dirtyColors = geometry.colorsNeedUpdate,\n            dirtyLineDistances = geometry.lineDistancesNeedUpdate,\n\n            customAttributes = geometry.__webglCustomAttributesList,\n\n            i, il,\n            a, ca, cal, value,\n            customAttribute;\n\n        if ( dirtyVertices ) {\n\n            for ( v = 0; v < vl; v ++ ) {\n\n                vertex = vertices[ v ];\n\n                offset = v * 3;\n\n                vertexArray[ offset ]     = vertex.x;\n                vertexArray[ offset + 1 ] = vertex.y;\n                vertexArray[ offset + 2 ] = vertex.z;\n\n            }\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\n\n        }\n\n        if ( dirtyColors ) {\n\n            for ( c = 0; c < cl; c ++ ) {\n\n                color = colors[ c ];\n\n                offset = c * 3;\n\n                colorArray[ offset ]     = color.r;\n                colorArray[ offset + 1 ] = color.g;\n                colorArray[ offset + 2 ] = color.b;\n\n            }\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\n\n        }\n\n        if ( dirtyLineDistances ) {\n\n            for ( d = 0; d < dl; d ++ ) {\n\n                lineDistanceArray[ d ] = lineDistances[ d ];\n\n            }\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );\n\n        }\n\n        if ( customAttributes ) {\n\n            for ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n                customAttribute = customAttributes[ i ];\n\n                if ( customAttribute.needsUpdate &&\n                    ( customAttribute.boundTo === undefined ||\n                        customAttribute.boundTo === \"vertices\" ) ) {\n\n                    offset = 0;\n\n                    cal = customAttribute.value.length;\n\n                    if ( customAttribute.size === 1 ) {\n\n                        for ( ca = 0; ca < cal; ca ++ ) {\n\n                            customAttribute.array[ ca ] = customAttribute.value[ ca ];\n\n                        }\n\n                    } else if ( customAttribute.size === 2 ) {\n\n                        for ( ca = 0; ca < cal; ca ++ ) {\n\n                            value = customAttribute.value[ ca ];\n\n                            customAttribute.array[ offset ] \t= value.x;\n                            customAttribute.array[ offset + 1 ] = value.y;\n\n                            offset += 2;\n\n                        }\n\n                    } else if ( customAttribute.size === 3 ) {\n\n                        if ( customAttribute.type === \"c\" ) {\n\n                            for ( ca = 0; ca < cal; ca ++ ) {\n\n                                value = customAttribute.value[ ca ];\n\n                                customAttribute.array[ offset ] \t= value.r;\n                                customAttribute.array[ offset + 1 ] = value.g;\n                                customAttribute.array[ offset + 2 ] = value.b;\n\n                                offset += 3;\n\n                            }\n\n                        } else {\n\n                            for ( ca = 0; ca < cal; ca ++ ) {\n\n                                value = customAttribute.value[ ca ];\n\n                                customAttribute.array[ offset ] \t= value.x;\n                                customAttribute.array[ offset + 1 ] = value.y;\n                                customAttribute.array[ offset + 2 ] = value.z;\n\n                                offset += 3;\n\n                            }\n\n                        }\n\n                    } else if ( customAttribute.size === 4 ) {\n\n                        for ( ca = 0; ca < cal; ca ++ ) {\n\n                            value = customAttribute.value[ ca ];\n\n                            customAttribute.array[ offset ] \t = value.x;\n                            customAttribute.array[ offset + 1  ] = value.y;\n                            customAttribute.array[ offset + 2  ] = value.z;\n                            customAttribute.array[ offset + 3  ] = value.w;\n\n                            offset += 4;\n\n                        }\n\n                    }\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\n                    _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\n\n                }\n\n            }\n\n        }\n\n    };\n\n    function setMeshBuffers( geometryGroup, object, hint, dispose, material ) {\n\n        if ( ! geometryGroup.__inittedArrays ) {\n\n            return;\n\n        }\n\n        var normalType = bufferGuessNormalType( material ),\n            vertexColorType = bufferGuessVertexColorType( material ),\n            uvType = bufferGuessUVType( material ),\n\n            needsSmoothNormals = ( normalType === THREE.SmoothShading );\n\n        var f, fl, fi, face,\n            vertexNormals, faceNormal, normal,\n            vertexColors, faceColor,\n            vertexTangents,\n            uv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,\n            c1, c2, c3, c4,\n            sw1, sw2, sw3, sw4,\n            si1, si2, si3, si4,\n            sa1, sa2, sa3, sa4,\n            sb1, sb2, sb3, sb4,\n            m, ml, i, il,\n            vn, uvi, uv2i,\n            vk, vkl, vka,\n            nka, chf, faceVertexNormals,\n            a,\n\n            vertexIndex = 0,\n\n            offset = 0,\n            offset_uv = 0,\n            offset_uv2 = 0,\n            offset_face = 0,\n            offset_normal = 0,\n            offset_tangent = 0,\n            offset_line = 0,\n            offset_color = 0,\n            offset_skin = 0,\n            offset_morphTarget = 0,\n            offset_custom = 0,\n            offset_customSrc = 0,\n\n            value,\n\n            vertexArray = geometryGroup.__vertexArray,\n            uvArray = geometryGroup.__uvArray,\n            uv2Array = geometryGroup.__uv2Array,\n            normalArray = geometryGroup.__normalArray,\n            tangentArray = geometryGroup.__tangentArray,\n            colorArray = geometryGroup.__colorArray,\n\n            skinIndexArray = geometryGroup.__skinIndexArray,\n            skinWeightArray = geometryGroup.__skinWeightArray,\n\n            morphTargetsArrays = geometryGroup.__morphTargetsArrays,\n            morphNormalsArrays = geometryGroup.__morphNormalsArrays,\n\n            customAttributes = geometryGroup.__webglCustomAttributesList,\n            customAttribute,\n\n            faceArray = geometryGroup.__faceArray,\n            lineArray = geometryGroup.__lineArray,\n\n            geometry = object.geometry, // this is shared for all chunks\n\n            dirtyVertices = geometry.verticesNeedUpdate,\n            dirtyElements = geometry.elementsNeedUpdate,\n            dirtyUvs = geometry.uvsNeedUpdate,\n            dirtyNormals = geometry.normalsNeedUpdate,\n            dirtyTangents = geometry.tangentsNeedUpdate,\n            dirtyColors = geometry.colorsNeedUpdate,\n            dirtyMorphTargets = geometry.morphTargetsNeedUpdate,\n\n            vertices = geometry.vertices,\n            chunk_faces3 = geometryGroup.faces3,\n            obj_faces = geometry.faces,\n\n            obj_uvs  = geometry.faceVertexUvs[ 0 ],\n            obj_uvs2 = geometry.faceVertexUvs[ 1 ],\n\n            obj_colors = geometry.colors,\n\n            obj_skinIndices = geometry.skinIndices,\n            obj_skinWeights = geometry.skinWeights,\n\n            morphTargets = geometry.morphTargets,\n            morphNormals = geometry.morphNormals;\n\n        if ( dirtyVertices ) {\n\n            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                face = obj_faces[ chunk_faces3[ f ] ];\n\n                v1 = vertices[ face.a ];\n                v2 = vertices[ face.b ];\n                v3 = vertices[ face.c ];\n\n                vertexArray[ offset ]     = v1.x;\n                vertexArray[ offset + 1 ] = v1.y;\n                vertexArray[ offset + 2 ] = v1.z;\n\n                vertexArray[ offset + 3 ] = v2.x;\n                vertexArray[ offset + 4 ] = v2.y;\n                vertexArray[ offset + 5 ] = v2.z;\n\n                vertexArray[ offset + 6 ] = v3.x;\n                vertexArray[ offset + 7 ] = v3.y;\n                vertexArray[ offset + 8 ] = v3.z;\n\n                offset += 9;\n\n            }\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\n\n        }\n\n        if ( dirtyMorphTargets ) {\n\n            for ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {\n\n                offset_morphTarget = 0;\n\n                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                    chf = chunk_faces3[ f ];\n                    face = obj_faces[ chf ];\n\n                    // morph positions\n\n                    v1 = morphTargets[ vk ].vertices[ face.a ];\n                    v2 = morphTargets[ vk ].vertices[ face.b ];\n                    v3 = morphTargets[ vk ].vertices[ face.c ];\n\n                    vka = morphTargetsArrays[ vk ];\n\n                    vka[ offset_morphTarget ] \t  = v1.x;\n                    vka[ offset_morphTarget + 1 ] = v1.y;\n                    vka[ offset_morphTarget + 2 ] = v1.z;\n\n                    vka[ offset_morphTarget + 3 ] = v2.x;\n                    vka[ offset_morphTarget + 4 ] = v2.y;\n                    vka[ offset_morphTarget + 5 ] = v2.z;\n\n                    vka[ offset_morphTarget + 6 ] = v3.x;\n                    vka[ offset_morphTarget + 7 ] = v3.y;\n                    vka[ offset_morphTarget + 8 ] = v3.z;\n\n                    // morph normals\n\n                    if ( material.morphNormals ) {\n\n                        if ( needsSmoothNormals ) {\n\n                            faceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];\n\n                            n1 = faceVertexNormals.a;\n                            n2 = faceVertexNormals.b;\n                            n3 = faceVertexNormals.c;\n\n                        } else {\n\n                            n1 = morphNormals[ vk ].faceNormals[ chf ];\n                            n2 = n1;\n                            n3 = n1;\n\n                        }\n\n                        nka = morphNormalsArrays[ vk ];\n\n                        nka[ offset_morphTarget ] \t  = n1.x;\n                        nka[ offset_morphTarget + 1 ] = n1.y;\n                        nka[ offset_morphTarget + 2 ] = n1.z;\n\n                        nka[ offset_morphTarget + 3 ] = n2.x;\n                        nka[ offset_morphTarget + 4 ] = n2.y;\n                        nka[ offset_morphTarget + 5 ] = n2.z;\n\n                        nka[ offset_morphTarget + 6 ] = n3.x;\n                        nka[ offset_morphTarget + 7 ] = n3.y;\n                        nka[ offset_morphTarget + 8 ] = n3.z;\n\n                    }\n\n                    //\n\n                    offset_morphTarget += 9;\n\n                }\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );\n                _gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );\n\n                if ( material.morphNormals ) {\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );\n                    _gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );\n\n                }\n\n            }\n\n        }\n\n        if ( obj_skinWeights.length ) {\n\n            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                face = obj_faces[ chunk_faces3[ f ]\t];\n\n                // weights\n\n                sw1 = obj_skinWeights[ face.a ];\n                sw2 = obj_skinWeights[ face.b ];\n                sw3 = obj_skinWeights[ face.c ];\n\n                skinWeightArray[ offset_skin ]     = sw1.x;\n                skinWeightArray[ offset_skin + 1 ] = sw1.y;\n                skinWeightArray[ offset_skin + 2 ] = sw1.z;\n                skinWeightArray[ offset_skin + 3 ] = sw1.w;\n\n                skinWeightArray[ offset_skin + 4 ] = sw2.x;\n                skinWeightArray[ offset_skin + 5 ] = sw2.y;\n                skinWeightArray[ offset_skin + 6 ] = sw2.z;\n                skinWeightArray[ offset_skin + 7 ] = sw2.w;\n\n                skinWeightArray[ offset_skin + 8 ]  = sw3.x;\n                skinWeightArray[ offset_skin + 9 ]  = sw3.y;\n                skinWeightArray[ offset_skin + 10 ] = sw3.z;\n                skinWeightArray[ offset_skin + 11 ] = sw3.w;\n\n                // indices\n\n                si1 = obj_skinIndices[ face.a ];\n                si2 = obj_skinIndices[ face.b ];\n                si3 = obj_skinIndices[ face.c ];\n\n                skinIndexArray[ offset_skin ]     = si1.x;\n                skinIndexArray[ offset_skin + 1 ] = si1.y;\n                skinIndexArray[ offset_skin + 2 ] = si1.z;\n                skinIndexArray[ offset_skin + 3 ] = si1.w;\n\n                skinIndexArray[ offset_skin + 4 ] = si2.x;\n                skinIndexArray[ offset_skin + 5 ] = si2.y;\n                skinIndexArray[ offset_skin + 6 ] = si2.z;\n                skinIndexArray[ offset_skin + 7 ] = si2.w;\n\n                skinIndexArray[ offset_skin + 8 ]  = si3.x;\n                skinIndexArray[ offset_skin + 9 ]  = si3.y;\n                skinIndexArray[ offset_skin + 10 ] = si3.z;\n                skinIndexArray[ offset_skin + 11 ] = si3.w;\n\n                offset_skin += 12;\n\n            }\n\n            if ( offset_skin > 0 ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\n                _gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\n                _gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );\n\n            }\n\n        }\n\n        if ( dirtyColors && vertexColorType ) {\n\n            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                face = obj_faces[ chunk_faces3[ f ]\t];\n\n                vertexColors = face.vertexColors;\n                faceColor = face.color;\n\n                if ( vertexColors.length === 3 && vertexColorType === THREE.VertexColors ) {\n\n                    c1 = vertexColors[ 0 ];\n                    c2 = vertexColors[ 1 ];\n                    c3 = vertexColors[ 2 ];\n\n                } else {\n\n                    c1 = faceColor;\n                    c2 = faceColor;\n                    c3 = faceColor;\n\n                }\n\n                colorArray[ offset_color ]     = c1.r;\n                colorArray[ offset_color + 1 ] = c1.g;\n                colorArray[ offset_color + 2 ] = c1.b;\n\n                colorArray[ offset_color + 3 ] = c2.r;\n                colorArray[ offset_color + 4 ] = c2.g;\n                colorArray[ offset_color + 5 ] = c2.b;\n\n                colorArray[ offset_color + 6 ] = c3.r;\n                colorArray[ offset_color + 7 ] = c3.g;\n                colorArray[ offset_color + 8 ] = c3.b;\n\n                offset_color += 9;\n\n            }\n\n            if ( offset_color > 0 ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\n                _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\n\n            }\n\n        }\n\n        if ( dirtyTangents && geometry.hasTangents ) {\n\n            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                face = obj_faces[ chunk_faces3[ f ]\t];\n\n                vertexTangents = face.vertexTangents;\n\n                t1 = vertexTangents[ 0 ];\n                t2 = vertexTangents[ 1 ];\n                t3 = vertexTangents[ 2 ];\n\n                tangentArray[ offset_tangent ]     = t1.x;\n                tangentArray[ offset_tangent + 1 ] = t1.y;\n                tangentArray[ offset_tangent + 2 ] = t1.z;\n                tangentArray[ offset_tangent + 3 ] = t1.w;\n\n                tangentArray[ offset_tangent + 4 ] = t2.x;\n                tangentArray[ offset_tangent + 5 ] = t2.y;\n                tangentArray[ offset_tangent + 6 ] = t2.z;\n                tangentArray[ offset_tangent + 7 ] = t2.w;\n\n                tangentArray[ offset_tangent + 8 ]  = t3.x;\n                tangentArray[ offset_tangent + 9 ]  = t3.y;\n                tangentArray[ offset_tangent + 10 ] = t3.z;\n                tangentArray[ offset_tangent + 11 ] = t3.w;\n\n                offset_tangent += 12;\n\n            }\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );\n\n        }\n\n        if ( dirtyNormals && normalType ) {\n\n            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                face = obj_faces[ chunk_faces3[ f ]\t];\n\n                vertexNormals = face.vertexNormals;\n                faceNormal = face.normal;\n\n                if ( vertexNormals.length === 3 && needsSmoothNormals ) {\n\n                    for ( i = 0; i < 3; i ++ ) {\n\n                        vn = vertexNormals[ i ];\n\n                        normalArray[ offset_normal ]     = vn.x;\n                        normalArray[ offset_normal + 1 ] = vn.y;\n                        normalArray[ offset_normal + 2 ] = vn.z;\n\n                        offset_normal += 3;\n\n                    }\n\n                } else {\n\n                    for ( i = 0; i < 3; i ++ ) {\n\n                        normalArray[ offset_normal ]     = faceNormal.x;\n                        normalArray[ offset_normal + 1 ] = faceNormal.y;\n                        normalArray[ offset_normal + 2 ] = faceNormal.z;\n\n                        offset_normal += 3;\n\n                    }\n\n                }\n\n            }\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );\n\n        }\n\n        if ( dirtyUvs && obj_uvs && uvType ) {\n\n            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                fi = chunk_faces3[ f ];\n\n                uv = obj_uvs[ fi ];\n\n                if ( uv === undefined ) continue;\n\n                for ( i = 0; i < 3; i ++ ) {\n\n                    uvi = uv[ i ];\n\n                    uvArray[ offset_uv ]     = uvi.x;\n                    uvArray[ offset_uv + 1 ] = uvi.y;\n\n                    offset_uv += 2;\n\n                }\n\n            }\n\n            if ( offset_uv > 0 ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\n                _gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );\n\n            }\n\n        }\n\n        if ( dirtyUvs && obj_uvs2 && uvType ) {\n\n            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                fi = chunk_faces3[ f ];\n\n                uv2 = obj_uvs2[ fi ];\n\n                if ( uv2 === undefined ) continue;\n\n                for ( i = 0; i < 3; i ++ ) {\n\n                    uv2i = uv2[ i ];\n\n                    uv2Array[ offset_uv2 ]     = uv2i.x;\n                    uv2Array[ offset_uv2 + 1 ] = uv2i.y;\n\n                    offset_uv2 += 2;\n\n                }\n\n            }\n\n            if ( offset_uv2 > 0 ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\n                _gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );\n\n            }\n\n        }\n\n        if ( dirtyElements ) {\n\n            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                faceArray[ offset_face ] \t = vertexIndex;\n                faceArray[ offset_face + 1 ] = vertexIndex + 1;\n                faceArray[ offset_face + 2 ] = vertexIndex + 2;\n\n                offset_face += 3;\n\n                lineArray[ offset_line ]     = vertexIndex;\n                lineArray[ offset_line + 1 ] = vertexIndex + 1;\n\n                lineArray[ offset_line + 2 ] = vertexIndex;\n                lineArray[ offset_line + 3 ] = vertexIndex + 2;\n\n                lineArray[ offset_line + 4 ] = vertexIndex + 1;\n                lineArray[ offset_line + 5 ] = vertexIndex + 2;\n\n                offset_line += 6;\n\n                vertexIndex += 3;\n\n            }\n\n            _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\n            _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );\n\n            _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\n            _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );\n\n        }\n\n        if ( customAttributes ) {\n\n            for ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n                customAttribute = customAttributes[ i ];\n\n                if ( ! customAttribute.__original.needsUpdate ) continue;\n\n                offset_custom = 0;\n                offset_customSrc = 0;\n\n                if ( customAttribute.size === 1 ) {\n\n                    if ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            face = obj_faces[ chunk_faces3[ f ]\t];\n\n                            customAttribute.array[ offset_custom ] \t   = customAttribute.value[ face.a ];\n                            customAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];\n                            customAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];\n\n                            offset_custom += 3;\n\n                        }\n\n                    } else if ( customAttribute.boundTo === \"faces\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            value = customAttribute.value[ chunk_faces3[ f ] ];\n\n                            customAttribute.array[ offset_custom ] \t   = value;\n                            customAttribute.array[ offset_custom + 1 ] = value;\n                            customAttribute.array[ offset_custom + 2 ] = value;\n\n                            offset_custom += 3;\n\n                        }\n\n                    }\n\n                } else if ( customAttribute.size === 2 ) {\n\n                    if ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            face = obj_faces[ chunk_faces3[ f ]\t];\n\n                            v1 = customAttribute.value[ face.a ];\n                            v2 = customAttribute.value[ face.b ];\n                            v3 = customAttribute.value[ face.c ];\n\n                            customAttribute.array[ offset_custom ] \t   = v1.x;\n                            customAttribute.array[ offset_custom + 1 ] = v1.y;\n\n                            customAttribute.array[ offset_custom + 2 ] = v2.x;\n                            customAttribute.array[ offset_custom + 3 ] = v2.y;\n\n                            customAttribute.array[ offset_custom + 4 ] = v3.x;\n                            customAttribute.array[ offset_custom + 5 ] = v3.y;\n\n                            offset_custom += 6;\n\n                        }\n\n                    } else if ( customAttribute.boundTo === \"faces\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            value = customAttribute.value[ chunk_faces3[ f ] ];\n\n                            v1 = value;\n                            v2 = value;\n                            v3 = value;\n\n                            customAttribute.array[ offset_custom ] \t   = v1.x;\n                            customAttribute.array[ offset_custom + 1 ] = v1.y;\n\n                            customAttribute.array[ offset_custom + 2 ] = v2.x;\n                            customAttribute.array[ offset_custom + 3 ] = v2.y;\n\n                            customAttribute.array[ offset_custom + 4 ] = v3.x;\n                            customAttribute.array[ offset_custom + 5 ] = v3.y;\n\n                            offset_custom += 6;\n\n                        }\n\n                    }\n\n                } else if ( customAttribute.size === 3 ) {\n\n                    var pp;\n\n                    if ( customAttribute.type === \"c\" ) {\n\n                        pp = [ \"r\", \"g\", \"b\" ];\n\n                    } else {\n\n                        pp = [ \"x\", \"y\", \"z\" ];\n\n                    }\n\n                    if ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            face = obj_faces[ chunk_faces3[ f ]\t];\n\n                            v1 = customAttribute.value[ face.a ];\n                            v2 = customAttribute.value[ face.b ];\n                            v3 = customAttribute.value[ face.c ];\n\n                            customAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\n\n                            customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\n\n                            customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\n\n                            offset_custom += 9;\n\n                        }\n\n                    } else if ( customAttribute.boundTo === \"faces\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            value = customAttribute.value[ chunk_faces3[ f ] ];\n\n                            v1 = value;\n                            v2 = value;\n                            v3 = value;\n\n                            customAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\n\n                            customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\n\n                            customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\n\n                            offset_custom += 9;\n\n                        }\n\n                    } else if ( customAttribute.boundTo === \"faceVertices\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            value = customAttribute.value[ chunk_faces3[ f ] ];\n\n                            v1 = value[ 0 ];\n                            v2 = value[ 1 ];\n                            v3 = value[ 2 ];\n\n                            customAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\n\n                            customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\n\n                            customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\n                            customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\n                            customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\n\n                            offset_custom += 9;\n\n                        }\n\n                    }\n\n                } else if ( customAttribute.size === 4 ) {\n\n                    if ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            face = obj_faces[ chunk_faces3[ f ]\t];\n\n                            v1 = customAttribute.value[ face.a ];\n                            v2 = customAttribute.value[ face.b ];\n                            v3 = customAttribute.value[ face.c ];\n\n                            customAttribute.array[ offset_custom  ] \t= v1.x;\n                            customAttribute.array[ offset_custom + 1  ] = v1.y;\n                            customAttribute.array[ offset_custom + 2  ] = v1.z;\n                            customAttribute.array[ offset_custom + 3  ] = v1.w;\n\n                            customAttribute.array[ offset_custom + 4  ] = v2.x;\n                            customAttribute.array[ offset_custom + 5  ] = v2.y;\n                            customAttribute.array[ offset_custom + 6  ] = v2.z;\n                            customAttribute.array[ offset_custom + 7  ] = v2.w;\n\n                            customAttribute.array[ offset_custom + 8  ] = v3.x;\n                            customAttribute.array[ offset_custom + 9  ] = v3.y;\n                            customAttribute.array[ offset_custom + 10 ] = v3.z;\n                            customAttribute.array[ offset_custom + 11 ] = v3.w;\n\n                            offset_custom += 12;\n\n                        }\n\n                    } else if ( customAttribute.boundTo === \"faces\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            value = customAttribute.value[ chunk_faces3[ f ] ];\n\n                            v1 = value;\n                            v2 = value;\n                            v3 = value;\n\n                            customAttribute.array[ offset_custom  ] \t= v1.x;\n                            customAttribute.array[ offset_custom + 1  ] = v1.y;\n                            customAttribute.array[ offset_custom + 2  ] = v1.z;\n                            customAttribute.array[ offset_custom + 3  ] = v1.w;\n\n                            customAttribute.array[ offset_custom + 4  ] = v2.x;\n                            customAttribute.array[ offset_custom + 5  ] = v2.y;\n                            customAttribute.array[ offset_custom + 6  ] = v2.z;\n                            customAttribute.array[ offset_custom + 7  ] = v2.w;\n\n                            customAttribute.array[ offset_custom + 8  ] = v3.x;\n                            customAttribute.array[ offset_custom + 9  ] = v3.y;\n                            customAttribute.array[ offset_custom + 10 ] = v3.z;\n                            customAttribute.array[ offset_custom + 11 ] = v3.w;\n\n                            offset_custom += 12;\n\n                        }\n\n                    } else if ( customAttribute.boundTo === \"faceVertices\" ) {\n\n                        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n                            value = customAttribute.value[ chunk_faces3[ f ] ];\n\n                            v1 = value[ 0 ];\n                            v2 = value[ 1 ];\n                            v3 = value[ 2 ];\n\n                            customAttribute.array[ offset_custom  ] \t= v1.x;\n                            customAttribute.array[ offset_custom + 1  ] = v1.y;\n                            customAttribute.array[ offset_custom + 2  ] = v1.z;\n                            customAttribute.array[ offset_custom + 3  ] = v1.w;\n\n                            customAttribute.array[ offset_custom + 4  ] = v2.x;\n                            customAttribute.array[ offset_custom + 5  ] = v2.y;\n                            customAttribute.array[ offset_custom + 6  ] = v2.z;\n                            customAttribute.array[ offset_custom + 7  ] = v2.w;\n\n                            customAttribute.array[ offset_custom + 8  ] = v3.x;\n                            customAttribute.array[ offset_custom + 9  ] = v3.y;\n                            customAttribute.array[ offset_custom + 10 ] = v3.z;\n                            customAttribute.array[ offset_custom + 11 ] = v3.w;\n\n                            offset_custom += 12;\n\n                        }\n\n                    }\n\n                }\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\n                _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\n\n            }\n\n        }\n\n        if ( dispose ) {\n\n            delete geometryGroup.__inittedArrays;\n            delete geometryGroup.__colorArray;\n            delete geometryGroup.__normalArray;\n            delete geometryGroup.__tangentArray;\n            delete geometryGroup.__uvArray;\n            delete geometryGroup.__uv2Array;\n            delete geometryGroup.__faceArray;\n            delete geometryGroup.__vertexArray;\n            delete geometryGroup.__lineArray;\n            delete geometryGroup.__skinIndexArray;\n            delete geometryGroup.__skinWeightArray;\n\n        }\n\n    };\n\n    function setDirectBuffers ( geometry, hint, dispose ) {\n\n        var attributes = geometry.attributes;\n\n        var attributeName, attributeItem;\n\n        for ( attributeName in attributes ) {\n\n            attributeItem = attributes[ attributeName ];\n\n            if ( attributeItem.needsUpdate ) {\n\n                if ( attributeName === 'index' ) {\n\n                    _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attributeItem.buffer );\n                    _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, attributeItem.array, hint );\n\n                } else {\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );\n                    _gl.bufferData( _gl.ARRAY_BUFFER, attributeItem.array, hint );\n\n                }\n\n                attributeItem.needsUpdate = false;\n\n            }\n\n            if ( dispose && ! attributeItem.dynamic ) {\n\n                attributeItem.array = null;\n\n            }\n\n        }\n\n    };\n\n    // Buffer rendering\n\n    this.renderBufferImmediate = function ( object, program, material ) {\n\n        if ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();\n        if ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();\n        if ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();\n        if ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();\n\n        if ( object.hasPositions ) {\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n            _gl.enableVertexAttribArray( program.attributes.position );\n            _gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n        }\n\n        if ( object.hasNormals ) {\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );\n\n            if ( material.shading === THREE.FlatShading ) {\n\n                var nx, ny, nz,\n                    nax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,\n                    normalArray,\n                    i, il = object.count * 3;\n\n                for( i = 0; i < il; i += 9 ) {\n\n                    normalArray = object.normalArray;\n\n                    nax  = normalArray[ i ];\n                    nay  = normalArray[ i + 1 ];\n                    naz  = normalArray[ i + 2 ];\n\n                    nbx  = normalArray[ i + 3 ];\n                    nby  = normalArray[ i + 4 ];\n                    nbz  = normalArray[ i + 5 ];\n\n                    ncx  = normalArray[ i + 6 ];\n                    ncy  = normalArray[ i + 7 ];\n                    ncz  = normalArray[ i + 8 ];\n\n                    nx = ( nax + nbx + ncx ) / 3;\n                    ny = ( nay + nby + ncy ) / 3;\n                    nz = ( naz + nbz + ncz ) / 3;\n\n                    normalArray[ i ] \t = nx;\n                    normalArray[ i + 1 ] = ny;\n                    normalArray[ i + 2 ] = nz;\n\n                    normalArray[ i + 3 ] = nx;\n                    normalArray[ i + 4 ] = ny;\n                    normalArray[ i + 5 ] = nz;\n\n                    normalArray[ i + 6 ] = nx;\n                    normalArray[ i + 7 ] = ny;\n                    normalArray[ i + 8 ] = nz;\n\n                }\n\n            }\n\n            _gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n            _gl.enableVertexAttribArray( program.attributes.normal );\n            _gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n        }\n\n        if ( object.hasUvs && material.map ) {\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n            _gl.enableVertexAttribArray( program.attributes.uv );\n            _gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n        }\n\n        if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );\n            _gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n            _gl.enableVertexAttribArray( program.attributes.color );\n            _gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n        }\n\n        _gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n        object.count = 0;\n\n    };\n\n    this.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {\n\n        if ( material.visible === false ) return;\n\n        var linewidth, a, attribute;\n        var attributeItem, attributeName, attributePointer, attributeSize;\n\n        var program = setProgram( camera, lights, fog, material, object );\n\n        var programAttributes = program.attributes;\n        var geometryAttributes = geometry.attributes;\n\n        var updateBuffers = false,\n            wireframeBit = material.wireframe ? 1 : 0,\n            geometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\n\n        if ( geometryHash !== _currentGeometryGroupHash ) {\n\n            _currentGeometryGroupHash = geometryHash;\n            updateBuffers = true;\n\n        }\n\n        if ( updateBuffers ) {\n\n            disableAttributes();\n\n        }\n\n        // render mesh\n\n        if ( object instanceof THREE.Mesh ) {\n\n            var index = geometryAttributes[ \"index\" ];\n\n            // indexed triangles\n\n            if ( index ) {\n\n                var offsets = geometry.offsets;\n\n                // if there is more than 1 chunk\n                // must set attribute pointers to use new offsets for each chunk\n                // even if geometry and materials didn't change\n\n                if ( offsets.length > 1 ) updateBuffers = true;\n\n                for ( var i = 0, il = offsets.length; i < il; i ++ ) {\n\n                    var startIndex = offsets[ i ].index;\n\n                    if ( updateBuffers ) {\n\n                        for ( attributeName in programAttributes ) {\n\n                            attributePointer = programAttributes[ attributeName ];\n                            attributeItem = geometryAttributes[ attributeName ];\n\n                            if ( attributePointer >= 0 ) {\n\n                                if ( attributeItem ) {\n\n                                    attributeSize = attributeItem.itemSize;\n                                    _gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );\n                                    enableAttribute( attributePointer );\n                                    _gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, startIndex * attributeSize * 4 ); // 4 bytes per Float32\n\n                                } else if ( material.defaultAttributeValues ) {\n\n                                    if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {\n\n                                        _gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );\n\n                                    } else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {\n\n                                        _gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );\n\n                                    }\n\n                                }\n\n                            }\n\n                        }\n\n                        // indices\n\n                        _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\n\n                    }\n\n                    // render indexed triangles\n\n                    _gl.drawElements( _gl.TRIANGLES, offsets[ i ].count, _gl.UNSIGNED_SHORT, offsets[ i ].start * 2 ); // 2 bytes per Uint16\n\n                    _this.info.render.calls ++;\n                    _this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared\n                    _this.info.render.faces += offsets[ i ].count / 3;\n\n                }\n\n                // non-indexed triangles\n\n            } else {\n\n                if ( updateBuffers ) {\n\n                    for ( attributeName in programAttributes ) {\n\n                        if ( attributeName === 'index') continue;\n\n                        attributePointer = programAttributes[ attributeName ];\n                        attributeItem = geometryAttributes[ attributeName ];\n\n                        if ( attributePointer >= 0 ) {\n\n                            if ( attributeItem ) {\n\n                                attributeSize = attributeItem.itemSize;\n                                _gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );\n                                enableAttribute( attributePointer );\n                                _gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, 0 );\n\n                            } else if ( material.defaultAttributeValues && material.defaultAttributeValues[ attributeName ] ) {\n\n                                if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {\n\n                                    _gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );\n\n                                } else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {\n\n                                    _gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );\n\n                                }\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n                var position = geometry.attributes[ \"position\" ];\n\n                // render non-indexed triangles\n\n                _gl.drawArrays( _gl.TRIANGLES, 0, position.numItems / 3 );\n\n                _this.info.render.calls ++;\n                _this.info.render.vertices += position.numItems / 3;\n                _this.info.render.faces += position.numItems / 3 / 3;\n\n            }\n\n            // render particles\n\n        } else if ( object instanceof THREE.ParticleSystem ) {\n\n            if ( updateBuffers ) {\n\n                for ( attributeName in programAttributes ) {\n\n                    attributePointer = programAttributes[ attributeName ];\n                    attributeItem = geometryAttributes[ attributeName ];\n\n                    if ( attributePointer >= 0 ) {\n\n                        if ( attributeItem ) {\n\n                            attributeSize = attributeItem.itemSize;\n                            _gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );\n                            enableAttribute( attributePointer );\n                            _gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, 0 );\n\n                        } else if ( material.defaultAttributeValues && material.defaultAttributeValues[ attributeName ] ) {\n\n                            if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {\n\n                                _gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );\n\n                            } else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {\n\n                                _gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n                var position = geometryAttributes[ \"position\" ];\n\n                // render particles\n\n                _gl.drawArrays( _gl.POINTS, 0, position.numItems / 3 );\n\n                _this.info.render.calls ++;\n                _this.info.render.points += position.numItems / 3;\n\n            }\n\n        } else if ( object instanceof THREE.Line ) {\n\n            if ( updateBuffers ) {\n\n                for ( attributeName in programAttributes ) {\n\n                    attributePointer = programAttributes[ attributeName ];\n                    attributeItem = geometryAttributes[ attributeName ];\n\n                    if ( attributePointer >= 0 ) {\n\n                        if ( attributeItem ) {\n\n                            attributeSize = attributeItem.itemSize;\n                            _gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );\n                            enableAttribute( attributePointer );\n                            _gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, 0 );\n\n                        } else if ( material.defaultAttributeValues && material.defaultAttributeValues[ attributeName ] ) {\n\n                            if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {\n\n                                _gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );\n\n                            } else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {\n\n                                _gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n                // render lines\n\n                var primitives = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;\n\n                setLineWidth( material.linewidth );\n\n                var position = geometryAttributes[ \"position\" ];\n\n                _gl.drawArrays( primitives, 0, position.numItems / 3 );\n\n                _this.info.render.calls ++;\n                _this.info.render.points += position.numItems;\n\n            }\n\n        }\n\n    };\n\n    this.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {\n\n        if ( material.visible === false ) return;\n\n        var linewidth, a, attribute, i, il;\n\n        var program = setProgram( camera, lights, fog, material, object );\n\n        var attributes = program.attributes;\n\n        var updateBuffers = false,\n            wireframeBit = material.wireframe ? 1 : 0,\n            geometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\n\n        if ( geometryGroupHash !== _currentGeometryGroupHash ) {\n\n            _currentGeometryGroupHash = geometryGroupHash;\n            updateBuffers = true;\n\n        }\n\n        if ( updateBuffers ) {\n\n            disableAttributes();\n\n        }\n\n        // vertices\n\n        if ( !material.morphTargets && attributes.position >= 0 ) {\n\n            if ( updateBuffers ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\n                enableAttribute( attributes.position );\n                _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n            }\n\n        } else {\n\n            if ( object.morphTargetBase ) {\n\n                setupMorphTargets( material, geometryGroup, object );\n\n            }\n\n        }\n\n\n        if ( updateBuffers ) {\n\n            // custom attributes\n\n            // Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers\n\n            if ( geometryGroup.__webglCustomAttributesList ) {\n\n                for ( i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {\n\n                    attribute = geometryGroup.__webglCustomAttributesList[ i ];\n\n                    if ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {\n\n                        _gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );\n                        enableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );\n                        _gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );\n\n                    }\n\n                }\n\n            }\n\n\n            // colors\n\n            if ( attributes.color >= 0 ) {\n\n                if ( object.geometry.colors.length > 0 || object.geometry.faces.length > 0 ) {\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\n                    enableAttribute( attributes.color );\n                    _gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n                } else if ( material.defaultAttributeValues ) {\n\n\n                    _gl.vertexAttrib3fv( attributes.color, material.defaultAttributeValues.color );\n\n                }\n\n            }\n\n            // normals\n\n            if ( attributes.normal >= 0 ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\n                enableAttribute( attributes.normal );\n                _gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n            }\n\n            // tangents\n\n            if ( attributes.tangent >= 0 ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\n                enableAttribute( attributes.tangent );\n                _gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );\n\n            }\n\n            // uvs\n\n            if ( attributes.uv >= 0 ) {\n\n                if ( object.geometry.faceVertexUvs[0] ) {\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\n                    enableAttribute( attributes.uv );\n                    _gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n                } else if ( material.defaultAttributeValues ) {\n\n\n                    _gl.vertexAttrib2fv( attributes.uv, material.defaultAttributeValues.uv );\n\n                }\n\n            }\n\n            if ( attributes.uv2 >= 0 ) {\n\n                if ( object.geometry.faceVertexUvs[1] ) {\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\n                    enableAttribute( attributes.uv2 );\n                    _gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );\n\n                } else if ( material.defaultAttributeValues ) {\n\n\n                    _gl.vertexAttrib2fv( attributes.uv2, material.defaultAttributeValues.uv2 );\n\n                }\n\n            }\n\n            if ( material.skinning &&\n                attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\n                enableAttribute( attributes.skinIndex );\n                _gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\n                enableAttribute( attributes.skinWeight );\n                _gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );\n\n            }\n\n            // line distances\n\n            if ( attributes.lineDistance >= 0 ) {\n\n                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );\n                enableAttribute( attributes.lineDistance );\n                _gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );\n\n            }\n\n        }\n\n        // render mesh\n\n        if ( object instanceof THREE.Mesh ) {\n\n            // wireframe\n\n            if ( material.wireframe ) {\n\n                setLineWidth( material.wireframeLinewidth );\n\n                if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\n                _gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, _gl.UNSIGNED_SHORT, 0 );\n\n                // triangles\n\n            } else {\n\n                if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\n                _gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, _gl.UNSIGNED_SHORT, 0 );\n\n            }\n\n            _this.info.render.calls ++;\n            _this.info.render.vertices += geometryGroup.__webglFaceCount;\n            _this.info.render.faces += geometryGroup.__webglFaceCount / 3;\n\n            // render lines\n\n        } else if ( object instanceof THREE.Line ) {\n\n            var primitives = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;\n\n            setLineWidth( material.linewidth );\n\n            _gl.drawArrays( primitives, 0, geometryGroup.__webglLineCount );\n\n            _this.info.render.calls ++;\n\n            // render particles\n\n        } else if ( object instanceof THREE.ParticleSystem ) {\n\n            _gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );\n\n            _this.info.render.calls ++;\n            _this.info.render.points += geometryGroup.__webglParticleCount;\n\n        }\n\n    };\n\n    function enableAttribute( attribute ) {\n\n        if ( ! _enabledAttributes[ attribute ] ) {\n\n            _gl.enableVertexAttribArray( attribute );\n            _enabledAttributes[ attribute ] = true;\n\n        }\n\n    };\n\n    function disableAttributes() {\n\n        for ( var attribute in _enabledAttributes ) {\n\n            if ( _enabledAttributes[ attribute ] ) {\n\n                _gl.disableVertexAttribArray( attribute );\n                _enabledAttributes[ attribute ] = false;\n\n            }\n\n        }\n\n    };\n\n    function setupMorphTargets ( material, geometryGroup, object ) {\n\n        // set base\n\n        var attributes = material.program.attributes;\n\n        if ( object.morphTargetBase !== -1 && attributes.position >= 0 ) {\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );\n            enableAttribute( attributes.position );\n            _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n        } else if ( attributes.position >= 0 ) {\n\n            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\n            enableAttribute( attributes.position );\n            _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n        }\n\n        if ( object.morphTargetForcedOrder.length ) {\n\n            // set forced order\n\n            var m = 0;\n            var order = object.morphTargetForcedOrder;\n            var influences = object.morphTargetInfluences;\n\n            while ( m < material.numSupportedMorphTargets && m < order.length ) {\n\n                if ( attributes[ \"morphTarget\" + m ] >= 0 ) {\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );\n                    enableAttribute( attributes[ \"morphTarget\" + m ] );\n                    _gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n                }\n\n                if ( attributes[ \"morphNormal\" + m ] >= 0 && material.morphNormals ) {\n\n                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );\n                    enableAttribute( attributes[ \"morphNormal\" + m ] );\n                    _gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n                }\n\n                object.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];\n\n                m ++;\n            }\n\n        } else {\n\n            // find the most influencing\n\n            var influence, activeInfluenceIndices = [];\n            var influences = object.morphTargetInfluences;\n            var i, il = influences.length;\n\n            for ( i = 0; i < il; i ++ ) {\n\n                influence = influences[ i ];\n\n                if ( influence > 0 ) {\n\n                    activeInfluenceIndices.push( [ influence, i ] );\n\n                }\n\n            }\n\n            if ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {\n\n                activeInfluenceIndices.sort( numericalSort );\n                activeInfluenceIndices.length = material.numSupportedMorphTargets;\n\n            } else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {\n\n                activeInfluenceIndices.sort( numericalSort );\n\n            } else if ( activeInfluenceIndices.length === 0 ) {\n\n                activeInfluenceIndices.push( [ 0, 0 ] );\n\n            };\n\n            var influenceIndex, m = 0;\n\n            while ( m < material.numSupportedMorphTargets ) {\n\n                if ( activeInfluenceIndices[ m ] ) {\n\n                    influenceIndex = activeInfluenceIndices[ m ][ 1 ];\n\n                    if ( attributes[ \"morphTarget\" + m ] >= 0 ) {\n\n                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );\n                        enableAttribute( attributes[ \"morphTarget\" + m ] );\n                        _gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n                    }\n\n                    if ( attributes[ \"morphNormal\" + m ] >= 0 && material.morphNormals ) {\n\n                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );\n                        enableAttribute( attributes[ \"morphNormal\" + m ] );\n                        _gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n\n                    }\n\n                    object.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];\n\n                } else {\n\n                    /*\n                     _gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n                     if ( material.morphNormals ) {\n\n                     _gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n                     }\n                     */\n\n                    object.__webglMorphTargetInfluences[ m ] = 0;\n\n                }\n\n                m ++;\n\n            }\n\n        }\n\n        // load updated influences uniform\n\n        if ( material.program.uniforms.morphTargetInfluences !== null ) {\n\n            _gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );\n\n        }\n\n    };\n\n    // Sorting\n\n    function painterSortStable ( a, b ) {\n\n        if ( a.z !== b.z ) {\n\n            return b.z - a.z;\n\n        } else {\n\n            return a.id - b.id;\n\n        }\n\n    };\n\n    function numericalSort ( a, b ) {\n\n        return b[ 0 ] - a[ 0 ];\n\n    };\n\n\n    // Rendering\n\n    this.render = function ( scene, camera, renderTarget, forceClear ) {\n\n        if ( camera instanceof THREE.Camera === false ) {\n\n            console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n            return;\n\n        }\n\n        var i, il,\n\n            webglObject, object,\n            renderList,\n\n            lights = scene.__lights,\n            fog = scene.fog;\n\n        // reset caching for this frame\n\n        _currentMaterialId = -1;\n        _lightsNeedUpdate = true;\n\n        // update scene graph\n\n        if ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n        // update camera matrices and frustum\n\n        if ( camera.parent === undefined ) camera.updateMatrixWorld();\n\n        camera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n        _projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n        _frustum.setFromMatrix( _projScreenMatrix );\n\n        // update WebGL objects\n\n        if ( this.autoUpdateObjects ) this.initWebGLObjects( scene );\n\n        // custom render plugins (pre pass)\n\n        renderPlugins( this.renderPluginsPre, scene, camera );\n\n        //\n\n        _this.info.render.calls = 0;\n        _this.info.render.vertices = 0;\n        _this.info.render.faces = 0;\n        _this.info.render.points = 0;\n\n        this.setRenderTarget( renderTarget );\n\n        if ( this.autoClear || forceClear ) {\n\n            this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n        }\n\n        // set matrices for regular objects (frustum culled)\n\n        renderList = scene.__webglObjects;\n\n        for ( i = 0, il = renderList.length; i < il; i ++ ) {\n\n            webglObject = renderList[ i ];\n            object = webglObject.object;\n\n            webglObject.id = i;\n            webglObject.render = false;\n\n            if ( object.visible ) {\n\n                if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\n\n                    setupMatrices( object, camera );\n\n                    unrollBufferMaterial( webglObject );\n\n                    webglObject.render = true;\n\n                    if ( this.sortObjects === true ) {\n\n                        if ( object.renderDepth !== null ) {\n\n                            webglObject.z = object.renderDepth;\n\n                        } else {\n\n                            _vector3.getPositionFromMatrix( object.matrixWorld );\n                            _vector3.applyProjection( _projScreenMatrix );\n\n                            webglObject.z = _vector3.z;\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n        }\n\n        if ( this.sortObjects ) {\n\n            renderList.sort( painterSortStable );\n\n        }\n\n        // set matrices for immediate objects\n\n        renderList = scene.__webglObjectsImmediate;\n\n        for ( i = 0, il = renderList.length; i < il; i ++ ) {\n\n            webglObject = renderList[ i ];\n            object = webglObject.object;\n\n            if ( object.visible ) {\n\n                setupMatrices( object, camera );\n\n                unrollImmediateBufferMaterial( webglObject );\n\n            }\n\n        }\n\n        if ( scene.overrideMaterial ) {\n\n            var material = scene.overrideMaterial;\n\n            this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n            this.setDepthTest( material.depthTest );\n            this.setDepthWrite( material.depthWrite );\n            setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n            renderObjects( scene.__webglObjects, false, \"\", camera, lights, fog, true, material );\n            renderObjectsImmediate( scene.__webglObjectsImmediate, \"\", camera, lights, fog, false, material );\n\n        } else {\n\n            var material = null;\n\n            // opaque pass (front-to-back order)\n\n            this.setBlending( THREE.NoBlending );\n\n            renderObjects( scene.__webglObjects, true, \"opaque\", camera, lights, fog, false, material );\n            renderObjectsImmediate( scene.__webglObjectsImmediate, \"opaque\", camera, lights, fog, false, material );\n\n            // transparent pass (back-to-front order)\n\n            renderObjects( scene.__webglObjects, false, \"transparent\", camera, lights, fog, true, material );\n            renderObjectsImmediate( scene.__webglObjectsImmediate, \"transparent\", camera, lights, fog, true, material );\n\n        }\n\n        // custom render plugins (post pass)\n\n        renderPlugins( this.renderPluginsPost, scene, camera );\n\n\n        // Generate mipmap if we're using any kind of mipmap filtering\n\n        if ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {\n\n            updateRenderTargetMipmap( renderTarget );\n\n        }\n\n        // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n        this.setDepthTest( true );\n        this.setDepthWrite( true );\n\n        // _gl.finish();\n\n    };\n\n    function renderPlugins( plugins, scene, camera ) {\n\n        if ( ! plugins.length ) return;\n\n        for ( var i = 0, il = plugins.length; i < il; i ++ ) {\n\n            // reset state for plugin (to start from clean slate)\n\n            _currentProgram = null;\n            _currentCamera = null;\n\n            _oldBlending = -1;\n            _oldDepthTest = -1;\n            _oldDepthWrite = -1;\n            _oldDoubleSided = -1;\n            _oldFlipSided = -1;\n            _currentGeometryGroupHash = -1;\n            _currentMaterialId = -1;\n\n            _lightsNeedUpdate = true;\n\n            plugins[ i ].render( scene, camera, _currentWidth, _currentHeight );\n\n            // reset state after plugin (anything could have changed)\n\n            _currentProgram = null;\n            _currentCamera = null;\n\n            _oldBlending = -1;\n            _oldDepthTest = -1;\n            _oldDepthWrite = -1;\n            _oldDoubleSided = -1;\n            _oldFlipSided = -1;\n            _currentGeometryGroupHash = -1;\n            _currentMaterialId = -1;\n\n            _lightsNeedUpdate = true;\n\n        }\n\n    };\n\n    function renderObjects ( renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\n\n        var webglObject, object, buffer, material, start, end, delta;\n\n        if ( reverse ) {\n\n            start = renderList.length - 1;\n            end = -1;\n            delta = -1;\n\n        } else {\n\n            start = 0;\n            end = renderList.length;\n            delta = 1;\n        }\n\n        for ( var i = start; i !== end; i += delta ) {\n\n            webglObject = renderList[ i ];\n\n            if ( webglObject.render ) {\n\n                object = webglObject.object;\n                buffer = webglObject.buffer;\n\n                if ( overrideMaterial ) {\n\n                    material = overrideMaterial;\n\n                } else {\n\n                    material = webglObject[ materialType ];\n\n                    if ( ! material ) continue;\n\n                    if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\n                    _this.setDepthTest( material.depthTest );\n                    _this.setDepthWrite( material.depthWrite );\n                    setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n                }\n\n                _this.setMaterialFaces( material );\n\n                if ( buffer instanceof THREE.BufferGeometry ) {\n\n                    _this.renderBufferDirect( camera, lights, fog, material, buffer, object );\n\n                } else {\n\n                    _this.renderBuffer( camera, lights, fog, material, buffer, object );\n\n                }\n\n            }\n\n        }\n\n    };\n\n    function renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\n\n        var webglObject, object, material, program;\n\n        for ( var i = 0, il = renderList.length; i < il; i ++ ) {\n\n            webglObject = renderList[ i ];\n            object = webglObject.object;\n\n            if ( object.visible ) {\n\n                if ( overrideMaterial ) {\n\n                    material = overrideMaterial;\n\n                } else {\n\n                    material = webglObject[ materialType ];\n\n                    if ( ! material ) continue;\n\n                    if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\n                    _this.setDepthTest( material.depthTest );\n                    _this.setDepthWrite( material.depthWrite );\n                    setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n                }\n\n                _this.renderImmediateObject( camera, lights, fog, material, object );\n\n            }\n\n        }\n\n    };\n\n    this.renderImmediateObject = function ( camera, lights, fog, material, object ) {\n\n        var program = setProgram( camera, lights, fog, material, object );\n\n        _currentGeometryGroupHash = -1;\n\n        _this.setMaterialFaces( material );\n\n        if ( object.immediateRenderCallback ) {\n\n            object.immediateRenderCallback( program, _gl, _frustum );\n\n        } else {\n\n            object.render( function( object ) { _this.renderBufferImmediate( object, program, material ); } );\n\n        }\n\n    };\n\n    function unrollImmediateBufferMaterial ( globject ) {\n\n        var object = globject.object,\n            material = object.material;\n\n        if ( material.transparent ) {\n\n            globject.transparent = material;\n            globject.opaque = null;\n\n        } else {\n\n            globject.opaque = material;\n            globject.transparent = null;\n\n        }\n\n    };\n\n    function unrollBufferMaterial ( globject ) {\n\n        var object = globject.object,\n            buffer = globject.buffer,\n            material, materialIndex, meshMaterial;\n\n        meshMaterial = object.material;\n\n        if ( meshMaterial instanceof THREE.MeshFaceMaterial ) {\n\n            materialIndex = buffer.materialIndex;\n\n            material = meshMaterial.materials[ materialIndex ];\n\n            if ( material.transparent ) {\n\n                globject.transparent = material;\n                globject.opaque = null;\n\n            } else {\n\n                globject.opaque = material;\n                globject.transparent = null;\n\n            }\n\n        } else {\n\n            material = meshMaterial;\n\n            if ( material ) {\n\n                if ( material.transparent ) {\n\n                    globject.transparent = material;\n                    globject.opaque = null;\n\n                } else {\n\n                    globject.opaque = material;\n                    globject.transparent = null;\n\n                }\n\n            }\n\n        }\n\n    };\n\n    // Geometry splitting\n\n    function sortFacesByMaterial ( geometry, material ) {\n\n        var f, fl, face, materialIndex, vertices,\n            groupHash, hash_map = {};\n\n        var numMorphTargets = geometry.morphTargets.length;\n        var numMorphNormals = geometry.morphNormals.length;\n\n        var usesFaceMaterial = material instanceof THREE.MeshFaceMaterial;\n\n        geometry.geometryGroups = {};\n\n        for ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\n\n            face = geometry.faces[ f ];\n            materialIndex = usesFaceMaterial ? face.materialIndex : 0;\n\n            if ( hash_map[ materialIndex ] === undefined ) {\n\n                hash_map[ materialIndex ] = { 'hash': materialIndex, 'counter': 0 };\n\n            }\n\n            groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\n\n            if ( geometry.geometryGroups[ groupHash ] === undefined ) {\n\n                geometry.geometryGroups[ groupHash ] = { 'faces3': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };\n\n            }\n\n            vertices = 3;\n\n            if ( geometry.geometryGroups[ groupHash ].vertices + vertices > 65535 ) {\n\n                hash_map[ materialIndex ].counter += 1;\n                groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\n\n                if ( geometry.geometryGroups[ groupHash ] === undefined ) {\n\n                    geometry.geometryGroups[ groupHash ] = { 'faces3': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };\n\n                }\n\n            }\n\n            geometry.geometryGroups[ groupHash ].faces3.push( f );\n            geometry.geometryGroups[ groupHash ].vertices += vertices;\n\n        }\n\n        geometry.geometryGroupsList = [];\n\n        for ( var g in geometry.geometryGroups ) {\n\n            geometry.geometryGroups[ g ].id = _geometryGroupCounter ++;\n\n            geometry.geometryGroupsList.push( geometry.geometryGroups[ g ] );\n\n        }\n\n    };\n\n    // Objects refresh\n\n    this.initWebGLObjects = function ( scene ) {\n\n        if ( !scene.__webglObjects ) {\n\n            scene.__webglObjects = [];\n            scene.__webglObjectsImmediate = [];\n            scene.__webglSprites = [];\n            scene.__webglFlares = [];\n\n        }\n\n        while ( scene.__objectsAdded.length ) {\n\n            addObject( scene.__objectsAdded[ 0 ], scene );\n            scene.__objectsAdded.splice( 0, 1 );\n\n        }\n\n        while ( scene.__objectsRemoved.length ) {\n\n            removeObject( scene.__objectsRemoved[ 0 ], scene );\n            scene.__objectsRemoved.splice( 0, 1 );\n\n        }\n\n        // update must be called after objects adding / removal\n\n        for ( var o = 0, ol = scene.__webglObjects.length; o < ol; o ++ ) {\n\n            var object = scene.__webglObjects[ o ].object;\n\n            // TODO: Remove this hack (WebGLRenderer refactoring)\n\n            if ( object.__webglInit === undefined ) {\n\n                if ( object.__webglActive !== undefined ) {\n\n                    removeObject( object, scene );\n\n                }\n\n                addObject( object, scene );\n\n            }\n\n            updateObject( object );\n\n        }\n\n    };\n\n    // Objects adding\n\n    function addObject( object, scene ) {\n\n        var g, geometry, material, geometryGroup;\n\n        if ( object.__webglInit === undefined ) {\n\n            object.__webglInit = true;\n\n            object._modelViewMatrix = new THREE.Matrix4();\n            object._normalMatrix = new THREE.Matrix3();\n\n            if ( object.geometry !== undefined && object.geometry.__webglInit === undefined ) {\n\n                object.geometry.__webglInit = true;\n                object.geometry.addEventListener( 'dispose', onGeometryDispose );\n\n            }\n\n            geometry = object.geometry;\n\n            if ( geometry === undefined ) {\n\n                // fail silently for now\n\n            } else if ( geometry instanceof THREE.BufferGeometry ) {\n\n                initDirectBuffers( geometry );\n\n            } else if ( object instanceof THREE.Mesh ) {\n\n                material = object.material;\n\n                if ( geometry.geometryGroups === undefined ) {\n\n                    sortFacesByMaterial( geometry, material );\n\n                }\n\n                // create separate VBOs per geometry chunk\n\n                for ( g in geometry.geometryGroups ) {\n\n                    geometryGroup = geometry.geometryGroups[ g ];\n\n                    // initialise VBO on the first access\n\n                    if ( ! geometryGroup.__webglVertexBuffer ) {\n\n                        createMeshBuffers( geometryGroup );\n                        initMeshBuffers( geometryGroup, object );\n\n                        geometry.verticesNeedUpdate = true;\n                        geometry.morphTargetsNeedUpdate = true;\n                        geometry.elementsNeedUpdate = true;\n                        geometry.uvsNeedUpdate = true;\n                        geometry.normalsNeedUpdate = true;\n                        geometry.tangentsNeedUpdate = true;\n                        geometry.colorsNeedUpdate = true;\n\n                    }\n\n                }\n\n            } else if ( object instanceof THREE.Line ) {\n\n                if ( ! geometry.__webglVertexBuffer ) {\n\n                    createLineBuffers( geometry );\n                    initLineBuffers( geometry, object );\n\n                    geometry.verticesNeedUpdate = true;\n                    geometry.colorsNeedUpdate = true;\n                    geometry.lineDistancesNeedUpdate = true;\n\n                }\n\n            } else if ( object instanceof THREE.ParticleSystem ) {\n\n                if ( ! geometry.__webglVertexBuffer ) {\n\n                    createParticleBuffers( geometry );\n                    initParticleBuffers( geometry, object );\n\n                    geometry.verticesNeedUpdate = true;\n                    geometry.colorsNeedUpdate = true;\n\n                }\n\n            }\n\n        }\n\n        if ( object.__webglActive === undefined ) {\n\n            if ( object instanceof THREE.Mesh ) {\n\n                geometry = object.geometry;\n\n                if ( geometry instanceof THREE.BufferGeometry ) {\n\n                    addBuffer( scene.__webglObjects, geometry, object );\n\n                } else if ( geometry instanceof THREE.Geometry ) {\n\n                    for ( g in geometry.geometryGroups ) {\n\n                        geometryGroup = geometry.geometryGroups[ g ];\n\n                        addBuffer( scene.__webglObjects, geometryGroup, object );\n\n                    }\n\n                }\n\n            } else if ( object instanceof THREE.Line ||\n                object instanceof THREE.ParticleSystem ) {\n\n                geometry = object.geometry;\n                addBuffer( scene.__webglObjects, geometry, object );\n\n            } else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\n\n                addBufferImmediate( scene.__webglObjectsImmediate, object );\n\n            } else if ( object instanceof THREE.Sprite ) {\n\n                scene.__webglSprites.push( object );\n\n            } else if ( object instanceof THREE.LensFlare ) {\n\n                scene.__webglFlares.push( object );\n\n            }\n\n            object.__webglActive = true;\n\n        }\n\n    };\n\n    function addBuffer( objlist, buffer, object ) {\n\n        objlist.push(\n            {\n                id: null,\n                buffer: buffer,\n                object: object,\n                opaque: null,\n                transparent: null,\n                z: 0\n            }\n        );\n\n    };\n\n    function addBufferImmediate( objlist, object ) {\n\n        objlist.push(\n            {\n                id: null,\n                object: object,\n                opaque: null,\n                transparent: null,\n                z: 0\n            }\n        );\n\n    };\n\n    // Objects updates\n\n    function updateObject( object ) {\n\n        var geometry = object.geometry,\n            geometryGroup, customAttributesDirty, material;\n\n        if ( geometry instanceof THREE.BufferGeometry ) {\n\n            setDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\n\n        } else if ( object instanceof THREE.Mesh ) {\n\n            // check all geometry groups\n\n            for( var i = 0, il = geometry.geometryGroupsList.length; i < il; i ++ ) {\n\n                geometryGroup = geometry.geometryGroupsList[ i ];\n\n                material = getBufferMaterial( object, geometryGroup );\n\n                if ( geometry.buffersNeedUpdate ) {\n\n                    initMeshBuffers( geometryGroup, object );\n\n                }\n\n                customAttributesDirty = material.attributes && areCustomAttributesDirty( material );\n\n                if ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||\n                    geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||\n                    geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {\n\n                    setMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, !geometry.dynamic, material );\n\n                }\n\n            }\n\n            geometry.verticesNeedUpdate = false;\n            geometry.morphTargetsNeedUpdate = false;\n            geometry.elementsNeedUpdate = false;\n            geometry.uvsNeedUpdate = false;\n            geometry.normalsNeedUpdate = false;\n            geometry.colorsNeedUpdate = false;\n            geometry.tangentsNeedUpdate = false;\n\n            geometry.buffersNeedUpdate = false;\n\n            material.attributes && clearCustomAttributes( material );\n\n        } else if ( object instanceof THREE.Line ) {\n\n            material = getBufferMaterial( object, geometry );\n\n            customAttributesDirty = material.attributes && areCustomAttributesDirty( material );\n\n            if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {\n\n                setLineBuffers( geometry, _gl.DYNAMIC_DRAW );\n\n            }\n\n            geometry.verticesNeedUpdate = false;\n            geometry.colorsNeedUpdate = false;\n            geometry.lineDistancesNeedUpdate = false;\n\n            material.attributes && clearCustomAttributes( material );\n\n\n        } else if ( object instanceof THREE.ParticleSystem ) {\n\n            material = getBufferMaterial( object, geometry );\n\n            customAttributesDirty = material.attributes && areCustomAttributesDirty( material );\n\n            if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {\n\n                setParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );\n\n            }\n\n            geometry.verticesNeedUpdate = false;\n            geometry.colorsNeedUpdate = false;\n\n            material.attributes && clearCustomAttributes( material );\n\n        }\n\n    };\n\n    // Objects updates - custom attributes check\n\n    function areCustomAttributesDirty( material ) {\n\n        for ( var a in material.attributes ) {\n\n            if ( material.attributes[ a ].needsUpdate ) return true;\n\n        }\n\n        return false;\n\n    };\n\n    function clearCustomAttributes( material ) {\n\n        for ( var a in material.attributes ) {\n\n            material.attributes[ a ].needsUpdate = false;\n\n        }\n\n    };\n\n    // Objects removal\n\n    function removeObject( object, scene ) {\n\n        if ( object instanceof THREE.Mesh  ||\n            object instanceof THREE.ParticleSystem ||\n            object instanceof THREE.Line ) {\n\n            removeInstances( scene.__webglObjects, object );\n\n        } else if ( object instanceof THREE.Sprite ) {\n\n            removeInstancesDirect( scene.__webglSprites, object );\n\n        } else if ( object instanceof THREE.LensFlare ) {\n\n            removeInstancesDirect( scene.__webglFlares, object );\n\n        } else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\n\n            removeInstances( scene.__webglObjectsImmediate, object );\n\n        }\n\n        delete object.__webglActive;\n\n    };\n\n    function removeInstances( objlist, object ) {\n\n        for ( var o = objlist.length - 1; o >= 0; o -- ) {\n\n            if ( objlist[ o ].object === object ) {\n\n                objlist.splice( o, 1 );\n\n            }\n\n        }\n\n    };\n\n    function removeInstancesDirect( objlist, object ) {\n\n        for ( var o = objlist.length - 1; o >= 0; o -- ) {\n\n            if ( objlist[ o ] === object ) {\n\n                objlist.splice( o, 1 );\n\n            }\n\n        }\n\n    };\n\n    // Materials\n\n    this.initMaterial = function ( material, lights, fog, object ) {\n\n        material.addEventListener( 'dispose', onMaterialDispose );\n\n        var u, a, identifiers, i, parameters, maxLightCount, maxBones, maxShadows, shaderID;\n\n        if ( material instanceof THREE.MeshDepthMaterial ) {\n\n            shaderID = 'depth';\n\n        } else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n            shaderID = 'normal';\n\n        } else if ( material instanceof THREE.MeshBasicMaterial ) {\n\n            shaderID = 'basic';\n\n        } else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n            shaderID = 'lambert';\n\n        } else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n            shaderID = 'phong';\n\n        } else if ( material instanceof THREE.LineBasicMaterial ) {\n\n            shaderID = 'basic';\n\n        } else if ( material instanceof THREE.LineDashedMaterial ) {\n\n            shaderID = 'dashed';\n\n        } else if ( material instanceof THREE.ParticleSystemMaterial ) {\n\n            shaderID = 'particle_basic';\n\n        }\n\n        if ( shaderID ) {\n\n            setMaterialShaders( material, THREE.ShaderLib[ shaderID ] );\n\n        }\n\n        // heuristics to create shader parameters according to lights in the scene\n        // (not to blow over maxLights budget)\n\n        maxLightCount = allocateLights( lights );\n\n        maxShadows = allocateShadows( lights );\n\n        maxBones = allocateBones( object );\n\n        parameters = {\n\n            map: !!material.map,\n            envMap: !!material.envMap,\n            lightMap: !!material.lightMap,\n            bumpMap: !!material.bumpMap,\n            normalMap: !!material.normalMap,\n            specularMap: !!material.specularMap,\n\n            vertexColors: material.vertexColors,\n\n            fog: fog,\n            useFog: material.fog,\n            fogExp: fog instanceof THREE.FogExp2,\n\n            sizeAttenuation: material.sizeAttenuation,\n\n            skinning: material.skinning,\n            maxBones: maxBones,\n            useVertexTexture: _supportsBoneTextures && object && object.useVertexTexture,\n\n            morphTargets: material.morphTargets,\n            morphNormals: material.morphNormals,\n            maxMorphTargets: this.maxMorphTargets,\n            maxMorphNormals: this.maxMorphNormals,\n\n            maxDirLights: maxLightCount.directional,\n            maxPointLights: maxLightCount.point,\n            maxSpotLights: maxLightCount.spot,\n            maxHemiLights: maxLightCount.hemi,\n\n            maxShadows: maxShadows,\n            shadowMapEnabled: this.shadowMapEnabled && object.receiveShadow,\n            shadowMapType: this.shadowMapType,\n            shadowMapDebug: this.shadowMapDebug,\n            shadowMapCascade: this.shadowMapCascade,\n\n            alphaTest: material.alphaTest,\n            metal: material.metal,\n            perPixel: material.perPixel,\n            wrapAround: material.wrapAround,\n            doubleSided: material.side === THREE.DoubleSide,\n            flipSided: material.side === THREE.BackSide\n\n        };\n\n        material.program = buildProgram( shaderID, material.fragmentShader, material.vertexShader, material.uniforms, material.attributes, material.defines, parameters, material.index0AttributeName );\n\n        var attributes = material.program.attributes;\n\n        if ( material.morphTargets ) {\n\n            material.numSupportedMorphTargets = 0;\n\n            var id, base = \"morphTarget\";\n\n            for ( i = 0; i < this.maxMorphTargets; i ++ ) {\n\n                id = base + i;\n\n                if ( attributes[ id ] >= 0 ) {\n\n                    material.numSupportedMorphTargets ++;\n\n                }\n\n            }\n\n        }\n\n        if ( material.morphNormals ) {\n\n            material.numSupportedMorphNormals = 0;\n\n            var id, base = \"morphNormal\";\n\n            for ( i = 0; i < this.maxMorphNormals; i ++ ) {\n\n                id = base + i;\n\n                if ( attributes[ id ] >= 0 ) {\n\n                    material.numSupportedMorphNormals ++;\n\n                }\n\n            }\n\n        }\n\n        material.uniformsList = [];\n\n        for ( u in material.uniforms ) {\n\n            material.uniformsList.push( [ material.uniforms[ u ], u ] );\n\n        }\n\n    };\n\n    function setMaterialShaders( material, shaders ) {\n\n        material.uniforms = THREE.UniformsUtils.clone( shaders.uniforms );\n        material.vertexShader = shaders.vertexShader;\n        material.fragmentShader = shaders.fragmentShader;\n\n    };\n\n    function setProgram( camera, lights, fog, material, object ) {\n\n        _usedTextureUnits = 0;\n\n        if ( material.needsUpdate ) {\n\n            if ( material.program ) deallocateMaterial( material );\n\n            _this.initMaterial( material, lights, fog, object );\n            material.needsUpdate = false;\n\n        }\n\n        if ( material.morphTargets ) {\n\n            if ( ! object.__webglMorphTargetInfluences ) {\n\n                object.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );\n\n            }\n\n        }\n\n        var refreshMaterial = false;\n\n        var program = material.program,\n            p_uniforms = program.uniforms,\n            m_uniforms = material.uniforms;\n\n        if ( program !== _currentProgram ) {\n\n            _gl.useProgram( program );\n            _currentProgram = program;\n\n            refreshMaterial = true;\n\n        }\n\n        if ( material.id !== _currentMaterialId ) {\n\n            _currentMaterialId = material.id;\n            refreshMaterial = true;\n\n        }\n\n        if ( refreshMaterial || camera !== _currentCamera ) {\n\n            _gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n            if ( camera !== _currentCamera ) _currentCamera = camera;\n\n        }\n\n        // skinning uniforms must be set even if material didn't change\n        // auto-setting of texture unit for bone texture must go before other textures\n        // not sure why, but otherwise weird things happen\n\n        if ( material.skinning ) {\n\n            if ( _supportsBoneTextures && object.useVertexTexture ) {\n\n                if ( p_uniforms.boneTexture !== null ) {\n\n                    var textureUnit = getTextureUnit();\n\n                    _gl.uniform1i( p_uniforms.boneTexture, textureUnit );\n                    _this.setTexture( object.boneTexture, textureUnit );\n\n                }\n\n                if ( p_uniforms.boneTextureWidth !== null ) {\n\n                    _gl.uniform1i( p_uniforms.boneTextureWidth, object.boneTextureWidth );\n\n                }\n\n                if ( p_uniforms.boneTextureHeight !== null ) {\n\n                    _gl.uniform1i( p_uniforms.boneTextureHeight, object.boneTextureHeight );\n\n                }\n\n            } else {\n\n                if ( p_uniforms.boneGlobalMatrices !== null ) {\n\n                    _gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.boneMatrices );\n\n                }\n\n            }\n\n        }\n\n        if ( refreshMaterial ) {\n\n            // refresh uniforms common to several materials\n\n            if ( fog && material.fog ) {\n\n                refreshUniformsFog( m_uniforms, fog );\n\n            }\n\n            if ( material instanceof THREE.MeshPhongMaterial ||\n                material instanceof THREE.MeshLambertMaterial ||\n                material.lights ) {\n\n                if ( _lightsNeedUpdate ) {\n\n                    setupLights( program, lights );\n                    _lightsNeedUpdate = false;\n\n                }\n\n                refreshUniformsLights( m_uniforms, _lights );\n\n            }\n\n            if ( material instanceof THREE.MeshBasicMaterial ||\n                material instanceof THREE.MeshLambertMaterial ||\n                material instanceof THREE.MeshPhongMaterial ) {\n\n                refreshUniformsCommon( m_uniforms, material );\n\n            }\n\n            // refresh single material specific uniforms\n\n            if ( material instanceof THREE.LineBasicMaterial ) {\n\n                refreshUniformsLine( m_uniforms, material );\n\n            } else if ( material instanceof THREE.LineDashedMaterial ) {\n\n                refreshUniformsLine( m_uniforms, material );\n                refreshUniformsDash( m_uniforms, material );\n\n            } else if ( material instanceof THREE.ParticleSystemMaterial ) {\n\n                refreshUniformsParticle( m_uniforms, material );\n\n            } else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n                refreshUniformsPhong( m_uniforms, material );\n\n            } else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n                refreshUniformsLambert( m_uniforms, material );\n\n            } else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n                m_uniforms.mNear.value = camera.near;\n                m_uniforms.mFar.value = camera.far;\n                m_uniforms.opacity.value = material.opacity;\n\n            } else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n                m_uniforms.opacity.value = material.opacity;\n\n            }\n\n            if ( object.receiveShadow && ! material._shadowPass ) {\n\n                refreshUniformsShadow( m_uniforms, lights );\n\n            }\n\n            // load common uniforms\n\n            loadUniformsGeneric( program, material.uniformsList );\n\n            // load material specific uniforms\n            // (shader material also gets them for the sake of genericity)\n\n            if ( material instanceof THREE.ShaderMaterial ||\n                material instanceof THREE.MeshPhongMaterial ||\n                material.envMap ) {\n\n                if ( p_uniforms.cameraPosition !== null ) {\n\n                    _vector3.getPositionFromMatrix( camera.matrixWorld );\n                    _gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );\n\n                }\n\n            }\n\n            if ( material instanceof THREE.MeshPhongMaterial ||\n                material instanceof THREE.MeshLambertMaterial ||\n                material instanceof THREE.ShaderMaterial ||\n                material.skinning ) {\n\n                if ( p_uniforms.viewMatrix !== null ) {\n\n                    _gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\n\n                }\n\n            }\n\n        }\n\n        loadUniformsMatrices( p_uniforms, object );\n\n        if ( p_uniforms.modelMatrix !== null ) {\n\n            _gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\n\n        }\n\n        return program;\n\n    };\n\n    // Uniforms (refresh uniforms objects)\n\n    function refreshUniformsCommon ( uniforms, material ) {\n\n        uniforms.opacity.value = material.opacity;\n\n        if ( _this.gammaInput ) {\n\n            uniforms.diffuse.value.copyGammaToLinear( material.color );\n\n        } else {\n\n            uniforms.diffuse.value = material.color;\n\n        }\n\n        uniforms.map.value = material.map;\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.specularMap.value = material.specularMap;\n\n        if ( material.bumpMap ) {\n\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n\n        }\n\n        if ( material.normalMap ) {\n\n            uniforms.normalMap.value = material.normalMap;\n            uniforms.normalScale.value.copy( material.normalScale );\n\n        }\n\n        // uv repeat and offset setting priorities\n        //\t1. color map\n        //\t2. specular map\n        //\t3. normal map\n        //\t4. bump map\n\n        var uvScaleMap;\n\n        if ( material.map ) {\n\n            uvScaleMap = material.map;\n\n        } else if ( material.specularMap ) {\n\n            uvScaleMap = material.specularMap;\n\n        } else if ( material.normalMap ) {\n\n            uvScaleMap = material.normalMap;\n\n        } else if ( material.bumpMap ) {\n\n            uvScaleMap = material.bumpMap;\n\n        }\n\n        if ( uvScaleMap !== undefined ) {\n\n            var offset = uvScaleMap.offset;\n            var repeat = uvScaleMap.repeat;\n\n            uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n        }\n\n        uniforms.envMap.value = material.envMap;\n        uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : -1;\n\n        if ( _this.gammaInput ) {\n\n            //uniforms.reflectivity.value = material.reflectivity * material.reflectivity;\n            uniforms.reflectivity.value = material.reflectivity;\n\n        } else {\n\n            uniforms.reflectivity.value = material.reflectivity;\n\n        }\n\n        uniforms.refractionRatio.value = material.refractionRatio;\n        uniforms.combine.value = material.combine;\n        uniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;\n\n    };\n\n    function refreshUniformsLine ( uniforms, material ) {\n\n        uniforms.diffuse.value = material.color;\n        uniforms.opacity.value = material.opacity;\n\n    };\n\n    function refreshUniformsDash ( uniforms, material ) {\n\n        uniforms.dashSize.value = material.dashSize;\n        uniforms.totalSize.value = material.dashSize + material.gapSize;\n        uniforms.scale.value = material.scale;\n\n    };\n\n    function refreshUniformsParticle ( uniforms, material ) {\n\n        uniforms.psColor.value = material.color;\n        uniforms.opacity.value = material.opacity;\n        uniforms.size.value = material.size;\n        uniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.\n\n        uniforms.map.value = material.map;\n\n    };\n\n    function refreshUniformsFog ( uniforms, fog ) {\n\n        uniforms.fogColor.value = fog.color;\n\n        if ( fog instanceof THREE.Fog ) {\n\n            uniforms.fogNear.value = fog.near;\n            uniforms.fogFar.value = fog.far;\n\n        } else if ( fog instanceof THREE.FogExp2 ) {\n\n            uniforms.fogDensity.value = fog.density;\n\n        }\n\n    };\n\n    function refreshUniformsPhong ( uniforms, material ) {\n\n        uniforms.shininess.value = material.shininess;\n\n        if ( _this.gammaInput ) {\n\n            uniforms.ambient.value.copyGammaToLinear( material.ambient );\n            uniforms.emissive.value.copyGammaToLinear( material.emissive );\n            uniforms.specular.value.copyGammaToLinear( material.specular );\n\n        } else {\n\n            uniforms.ambient.value = material.ambient;\n            uniforms.emissive.value = material.emissive;\n            uniforms.specular.value = material.specular;\n\n        }\n\n        if ( material.wrapAround ) {\n\n            uniforms.wrapRGB.value.copy( material.wrapRGB );\n\n        }\n\n    };\n\n    function refreshUniformsLambert ( uniforms, material ) {\n\n        if ( _this.gammaInput ) {\n\n            uniforms.ambient.value.copyGammaToLinear( material.ambient );\n            uniforms.emissive.value.copyGammaToLinear( material.emissive );\n\n        } else {\n\n            uniforms.ambient.value = material.ambient;\n            uniforms.emissive.value = material.emissive;\n\n        }\n\n        if ( material.wrapAround ) {\n\n            uniforms.wrapRGB.value.copy( material.wrapRGB );\n\n        }\n\n    };\n\n    function refreshUniformsLights ( uniforms, lights ) {\n\n        uniforms.ambientLightColor.value = lights.ambient;\n\n        uniforms.directionalLightColor.value = lights.directional.colors;\n        uniforms.directionalLightDirection.value = lights.directional.positions;\n\n        uniforms.pointLightColor.value = lights.point.colors;\n        uniforms.pointLightPosition.value = lights.point.positions;\n        uniforms.pointLightDistance.value = lights.point.distances;\n\n        uniforms.spotLightColor.value = lights.spot.colors;\n        uniforms.spotLightPosition.value = lights.spot.positions;\n        uniforms.spotLightDistance.value = lights.spot.distances;\n        uniforms.spotLightDirection.value = lights.spot.directions;\n        uniforms.spotLightAngleCos.value = lights.spot.anglesCos;\n        uniforms.spotLightExponent.value = lights.spot.exponents;\n\n        uniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;\n        uniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;\n        uniforms.hemisphereLightDirection.value = lights.hemi.positions;\n\n    };\n\n    function refreshUniformsShadow ( uniforms, lights ) {\n\n        if ( uniforms.shadowMatrix ) {\n\n            var j = 0;\n\n            for ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n                var light = lights[ i ];\n\n                if ( ! light.castShadow ) continue;\n\n                if ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {\n\n                    uniforms.shadowMap.value[ j ] = light.shadowMap;\n                    uniforms.shadowMapSize.value[ j ] = light.shadowMapSize;\n\n                    uniforms.shadowMatrix.value[ j ] = light.shadowMatrix;\n\n                    uniforms.shadowDarkness.value[ j ] = light.shadowDarkness;\n                    uniforms.shadowBias.value[ j ] = light.shadowBias;\n\n                    j ++;\n\n                }\n\n            }\n\n        }\n\n    };\n\n    // Uniforms (load to GPU)\n\n    function loadUniformsMatrices ( uniforms, object ) {\n\n        _gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );\n\n        if ( uniforms.normalMatrix ) {\n\n            _gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );\n\n        }\n\n    };\n\n    function getTextureUnit() {\n\n        var textureUnit = _usedTextureUnits;\n\n        if ( textureUnit >= _maxTextures ) {\n\n            console.warn( \"WebGLRenderer: trying to use \" + textureUnit + \" texture units while this GPU supports only \" + _maxTextures );\n\n        }\n\n        _usedTextureUnits += 1;\n\n        return textureUnit;\n\n    };\n\n    function loadUniformsGeneric ( program, uniforms ) {\n\n        var uniform, value, type, location, texture, textureUnit, i, il, j, jl, offset;\n\n        for ( j = 0, jl = uniforms.length; j < jl; j ++ ) {\n\n            location = program.uniforms[ uniforms[ j ][ 1 ] ];\n            if ( !location ) continue;\n\n            uniform = uniforms[ j ][ 0 ];\n\n            type = uniform.type;\n            value = uniform.value;\n\n            if ( type === \"i\" ) { // single integer\n\n                _gl.uniform1i( location, value );\n\n            } else if ( type === \"f\" ) { // single float\n\n                _gl.uniform1f( location, value );\n\n            } else if ( type === \"v2\" ) { // single THREE.Vector2\n\n                _gl.uniform2f( location, value.x, value.y );\n\n            } else if ( type === \"v3\" ) { // single THREE.Vector3\n\n                _gl.uniform3f( location, value.x, value.y, value.z );\n\n            } else if ( type === \"v4\" ) { // single THREE.Vector4\n\n                _gl.uniform4f( location, value.x, value.y, value.z, value.w );\n\n            } else if ( type === \"c\" ) { // single THREE.Color\n\n                _gl.uniform3f( location, value.r, value.g, value.b );\n\n            } else if ( type === \"iv1\" ) { // flat array of integers (JS or typed array)\n\n                _gl.uniform1iv( location, value );\n\n            } else if ( type === \"iv\" ) { // flat array of integers with 3 x N size (JS or typed array)\n\n                _gl.uniform3iv( location, value );\n\n            } else if ( type === \"fv1\" ) { // flat array of floats (JS or typed array)\n\n                _gl.uniform1fv( location, value );\n\n            } else if ( type === \"fv\" ) { // flat array of floats with 3 x N size (JS or typed array)\n\n                _gl.uniform3fv( location, value );\n\n            } else if ( type === \"v2v\" ) { // array of THREE.Vector2\n\n                if ( uniform._array === undefined ) {\n\n                    uniform._array = new Float32Array( 2 * value.length );\n\n                }\n\n                for ( i = 0, il = value.length; i < il; i ++ ) {\n\n                    offset = i * 2;\n\n                    uniform._array[ offset ] \t = value[ i ].x;\n                    uniform._array[ offset + 1 ] = value[ i ].y;\n\n                }\n\n                _gl.uniform2fv( location, uniform._array );\n\n            } else if ( type === \"v3v\" ) { // array of THREE.Vector3\n\n                if ( uniform._array === undefined ) {\n\n                    uniform._array = new Float32Array( 3 * value.length );\n\n                }\n\n                for ( i = 0, il = value.length; i < il; i ++ ) {\n\n                    offset = i * 3;\n\n                    uniform._array[ offset ] \t = value[ i ].x;\n                    uniform._array[ offset + 1 ] = value[ i ].y;\n                    uniform._array[ offset + 2 ] = value[ i ].z;\n\n                }\n\n                _gl.uniform3fv( location, uniform._array );\n\n            } else if ( type === \"v4v\" ) { // array of THREE.Vector4\n\n                if ( uniform._array === undefined ) {\n\n                    uniform._array = new Float32Array( 4 * value.length );\n\n                }\n\n                for ( i = 0, il = value.length; i < il; i ++ ) {\n\n                    offset = i * 4;\n\n                    uniform._array[ offset ] \t = value[ i ].x;\n                    uniform._array[ offset + 1 ] = value[ i ].y;\n                    uniform._array[ offset + 2 ] = value[ i ].z;\n                    uniform._array[ offset + 3 ] = value[ i ].w;\n\n                }\n\n                _gl.uniform4fv( location, uniform._array );\n\n            } else if ( type === \"m4\") { // single THREE.Matrix4\n\n                if ( uniform._array === undefined ) {\n\n                    uniform._array = new Float32Array( 16 );\n\n                }\n\n                value.flattenToArray( uniform._array );\n                _gl.uniformMatrix4fv( location, false, uniform._array );\n\n            } else if ( type === \"m4v\" ) { // array of THREE.Matrix4\n\n                if ( uniform._array === undefined ) {\n\n                    uniform._array = new Float32Array( 16 * value.length );\n\n                }\n\n                for ( i = 0, il = value.length; i < il; i ++ ) {\n\n                    value[ i ].flattenToArrayOffset( uniform._array, i * 16 );\n\n                }\n\n                _gl.uniformMatrix4fv( location, false, uniform._array );\n\n            } else if ( type === \"t\" ) { // single THREE.Texture (2d or cube)\n\n                texture = value;\n                textureUnit = getTextureUnit();\n\n                _gl.uniform1i( location, textureUnit );\n\n                if ( !texture ) continue;\n\n                if ( texture.image instanceof Array && texture.image.length === 6 ) {\n\n                    setCubeTexture( texture, textureUnit );\n\n                } else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n                    setCubeTextureDynamic( texture, textureUnit );\n\n                } else {\n\n                    _this.setTexture( texture, textureUnit );\n\n                }\n\n            } else if ( type === \"tv\" ) { // array of THREE.Texture (2d)\n\n                if ( uniform._array === undefined ) {\n\n                    uniform._array = [];\n\n                }\n\n                for( i = 0, il = uniform.value.length; i < il; i ++ ) {\n\n                    uniform._array[ i ] = getTextureUnit();\n\n                }\n\n                _gl.uniform1iv( location, uniform._array );\n\n                for( i = 0, il = uniform.value.length; i < il; i ++ ) {\n\n                    texture = uniform.value[ i ];\n                    textureUnit = uniform._array[ i ];\n\n                    if ( !texture ) continue;\n\n                    _this.setTexture( texture, textureUnit );\n\n                }\n\n            } else {\n\n                console.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );\n\n            }\n\n        }\n\n    };\n\n    function setupMatrices ( object, camera ) {\n\n        object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n        object._normalMatrix.getNormalMatrix( object._modelViewMatrix );\n\n    };\n\n    //\n\n    function setColorGamma( array, offset, color, intensitySq ) {\n\n        array[ offset ]     = color.r * color.r * intensitySq;\n        array[ offset + 1 ] = color.g * color.g * intensitySq;\n        array[ offset + 2 ] = color.b * color.b * intensitySq;\n\n    };\n\n    function setColorLinear( array, offset, color, intensity ) {\n\n        array[ offset ]     = color.r * intensity;\n        array[ offset + 1 ] = color.g * intensity;\n        array[ offset + 2 ] = color.b * intensity;\n\n    };\n\n    function setupLights ( program, lights ) {\n\n        var l, ll, light, n,\n            r = 0, g = 0, b = 0,\n            color, skyColor, groundColor,\n            intensity,  intensitySq,\n            position,\n            distance,\n\n            zlights = _lights,\n\n            dirColors = zlights.directional.colors,\n            dirPositions = zlights.directional.positions,\n\n            pointColors = zlights.point.colors,\n            pointPositions = zlights.point.positions,\n            pointDistances = zlights.point.distances,\n\n            spotColors = zlights.spot.colors,\n            spotPositions = zlights.spot.positions,\n            spotDistances = zlights.spot.distances,\n            spotDirections = zlights.spot.directions,\n            spotAnglesCos = zlights.spot.anglesCos,\n            spotExponents = zlights.spot.exponents,\n\n            hemiSkyColors = zlights.hemi.skyColors,\n            hemiGroundColors = zlights.hemi.groundColors,\n            hemiPositions = zlights.hemi.positions,\n\n            dirLength = 0,\n            pointLength = 0,\n            spotLength = 0,\n            hemiLength = 0,\n\n            dirCount = 0,\n            pointCount = 0,\n            spotCount = 0,\n            hemiCount = 0,\n\n            dirOffset = 0,\n            pointOffset = 0,\n            spotOffset = 0,\n            hemiOffset = 0;\n\n        for ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n            light = lights[ l ];\n\n            if ( light.onlyShadow ) continue;\n\n            color = light.color;\n            intensity = light.intensity;\n            distance = light.distance;\n\n            if ( light instanceof THREE.AmbientLight ) {\n\n                if ( ! light.visible ) continue;\n\n                if ( _this.gammaInput ) {\n\n                    r += color.r * color.r;\n                    g += color.g * color.g;\n                    b += color.b * color.b;\n\n                } else {\n\n                    r += color.r;\n                    g += color.g;\n                    b += color.b;\n\n                }\n\n            } else if ( light instanceof THREE.DirectionalLight ) {\n\n                dirCount += 1;\n\n                if ( ! light.visible ) continue;\n\n                _direction.getPositionFromMatrix( light.matrixWorld );\n                _vector3.getPositionFromMatrix( light.target.matrixWorld );\n                _direction.sub( _vector3 );\n                _direction.normalize();\n\n                // skip lights with undefined direction\n                // these create troubles in OpenGL (making pixel black)\n\n                if ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;\n\n                dirOffset = dirLength * 3;\n\n                dirPositions[ dirOffset ]     = _direction.x;\n                dirPositions[ dirOffset + 1 ] = _direction.y;\n                dirPositions[ dirOffset + 2 ] = _direction.z;\n\n                if ( _this.gammaInput ) {\n\n                    setColorGamma( dirColors, dirOffset, color, intensity * intensity );\n\n                } else {\n\n                    setColorLinear( dirColors, dirOffset, color, intensity );\n\n                }\n\n                dirLength += 1;\n\n            } else if ( light instanceof THREE.PointLight ) {\n\n                pointCount += 1;\n\n                if ( ! light.visible ) continue;\n\n                pointOffset = pointLength * 3;\n\n                if ( _this.gammaInput ) {\n\n                    setColorGamma( pointColors, pointOffset, color, intensity * intensity );\n\n                } else {\n\n                    setColorLinear( pointColors, pointOffset, color, intensity );\n\n                }\n\n                _vector3.getPositionFromMatrix( light.matrixWorld );\n\n                pointPositions[ pointOffset ]     = _vector3.x;\n                pointPositions[ pointOffset + 1 ] = _vector3.y;\n                pointPositions[ pointOffset + 2 ] = _vector3.z;\n\n                pointDistances[ pointLength ] = distance;\n\n                pointLength += 1;\n\n            } else if ( light instanceof THREE.SpotLight ) {\n\n                spotCount += 1;\n\n                if ( ! light.visible ) continue;\n\n                spotOffset = spotLength * 3;\n\n                if ( _this.gammaInput ) {\n\n                    setColorGamma( spotColors, spotOffset, color, intensity * intensity );\n\n                } else {\n\n                    setColorLinear( spotColors, spotOffset, color, intensity );\n\n                }\n\n                _vector3.getPositionFromMatrix( light.matrixWorld );\n\n                spotPositions[ spotOffset ]     = _vector3.x;\n                spotPositions[ spotOffset + 1 ] = _vector3.y;\n                spotPositions[ spotOffset + 2 ] = _vector3.z;\n\n                spotDistances[ spotLength ] = distance;\n\n                _direction.copy( _vector3 );\n                _vector3.getPositionFromMatrix( light.target.matrixWorld );\n                _direction.sub( _vector3 );\n                _direction.normalize();\n\n                spotDirections[ spotOffset ]     = _direction.x;\n                spotDirections[ spotOffset + 1 ] = _direction.y;\n                spotDirections[ spotOffset + 2 ] = _direction.z;\n\n                spotAnglesCos[ spotLength ] = Math.cos( light.angle );\n                spotExponents[ spotLength ] = light.exponent;\n\n                spotLength += 1;\n\n            } else if ( light instanceof THREE.HemisphereLight ) {\n\n                hemiCount += 1;\n\n                if ( ! light.visible ) continue;\n\n                _direction.getPositionFromMatrix( light.matrixWorld );\n                _direction.normalize();\n\n                // skip lights with undefined direction\n                // these create troubles in OpenGL (making pixel black)\n\n                if ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;\n\n                hemiOffset = hemiLength * 3;\n\n                hemiPositions[ hemiOffset ]     = _direction.x;\n                hemiPositions[ hemiOffset + 1 ] = _direction.y;\n                hemiPositions[ hemiOffset + 2 ] = _direction.z;\n\n                skyColor = light.color;\n                groundColor = light.groundColor;\n\n                if ( _this.gammaInput ) {\n\n                    intensitySq = intensity * intensity;\n\n                    setColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );\n                    setColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );\n\n                } else {\n\n                    setColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );\n                    setColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );\n\n                }\n\n                hemiLength += 1;\n\n            }\n\n        }\n\n        // null eventual remains from removed lights\n        // (this is to avoid if in shader)\n\n        for ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;\n        for ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;\n        for ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;\n        for ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;\n        for ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;\n\n        zlights.directional.length = dirLength;\n        zlights.point.length = pointLength;\n        zlights.spot.length = spotLength;\n        zlights.hemi.length = hemiLength;\n\n        zlights.ambient[ 0 ] = r;\n        zlights.ambient[ 1 ] = g;\n        zlights.ambient[ 2 ] = b;\n\n    };\n\n    // GL state setting\n\n    this.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n        if ( cullFace === THREE.CullFaceNone ) {\n\n            _gl.disable( _gl.CULL_FACE );\n\n        } else {\n\n            if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\n\n                _gl.frontFace( _gl.CW );\n\n            } else {\n\n                _gl.frontFace( _gl.CCW );\n\n            }\n\n            if ( cullFace === THREE.CullFaceBack ) {\n\n                _gl.cullFace( _gl.BACK );\n\n            } else if ( cullFace === THREE.CullFaceFront ) {\n\n                _gl.cullFace( _gl.FRONT );\n\n            } else {\n\n                _gl.cullFace( _gl.FRONT_AND_BACK );\n\n            }\n\n            _gl.enable( _gl.CULL_FACE );\n\n        }\n\n    };\n\n    this.setMaterialFaces = function ( material ) {\n\n        var doubleSided = material.side === THREE.DoubleSide;\n        var flipSided = material.side === THREE.BackSide;\n\n        if ( _oldDoubleSided !== doubleSided ) {\n\n            if ( doubleSided ) {\n\n                _gl.disable( _gl.CULL_FACE );\n\n            } else {\n\n                _gl.enable( _gl.CULL_FACE );\n\n            }\n\n            _oldDoubleSided = doubleSided;\n\n        }\n\n        if ( _oldFlipSided !== flipSided ) {\n\n            if ( flipSided ) {\n\n                _gl.frontFace( _gl.CW );\n\n            } else {\n\n                _gl.frontFace( _gl.CCW );\n\n            }\n\n            _oldFlipSided = flipSided;\n\n        }\n\n    };\n\n    this.setDepthTest = function ( depthTest ) {\n\n        if ( _oldDepthTest !== depthTest ) {\n\n            if ( depthTest ) {\n\n                _gl.enable( _gl.DEPTH_TEST );\n\n            } else {\n\n                _gl.disable( _gl.DEPTH_TEST );\n\n            }\n\n            _oldDepthTest = depthTest;\n\n        }\n\n    };\n\n    this.setDepthWrite = function ( depthWrite ) {\n\n        if ( _oldDepthWrite !== depthWrite ) {\n\n            _gl.depthMask( depthWrite );\n            _oldDepthWrite = depthWrite;\n\n        }\n\n    };\n\n    function setLineWidth ( width ) {\n\n        if ( width !== _oldLineWidth ) {\n\n            _gl.lineWidth( width );\n\n            _oldLineWidth = width;\n\n        }\n\n    };\n\n    function setPolygonOffset ( polygonoffset, factor, units ) {\n\n        if ( _oldPolygonOffset !== polygonoffset ) {\n\n            if ( polygonoffset ) {\n\n                _gl.enable( _gl.POLYGON_OFFSET_FILL );\n\n            } else {\n\n                _gl.disable( _gl.POLYGON_OFFSET_FILL );\n\n            }\n\n            _oldPolygonOffset = polygonoffset;\n\n        }\n\n        if ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {\n\n            _gl.polygonOffset( factor, units );\n\n            _oldPolygonOffsetFactor = factor;\n            _oldPolygonOffsetUnits = units;\n\n        }\n\n    };\n\n    this.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {\n\n        if ( blending !== _oldBlending ) {\n\n            if ( blending === THREE.NoBlending ) {\n\n                _gl.disable( _gl.BLEND );\n\n            } else if ( blending === THREE.AdditiveBlending ) {\n\n                _gl.enable( _gl.BLEND );\n                _gl.blendEquation( _gl.FUNC_ADD );\n                _gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );\n\n            } else if ( blending === THREE.SubtractiveBlending ) {\n\n                // TODO: Find blendFuncSeparate() combination\n                _gl.enable( _gl.BLEND );\n                _gl.blendEquation( _gl.FUNC_ADD );\n                _gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );\n\n            } else if ( blending === THREE.MultiplyBlending ) {\n\n                // TODO: Find blendFuncSeparate() combination\n                _gl.enable( _gl.BLEND );\n                _gl.blendEquation( _gl.FUNC_ADD );\n                _gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );\n\n            } else if ( blending === THREE.CustomBlending ) {\n\n                _gl.enable( _gl.BLEND );\n\n            } else {\n\n                _gl.enable( _gl.BLEND );\n                _gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );\n                _gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );\n\n            }\n\n            _oldBlending = blending;\n\n        }\n\n        if ( blending === THREE.CustomBlending ) {\n\n            if ( blendEquation !== _oldBlendEquation ) {\n\n                _gl.blendEquation( paramThreeToGL( blendEquation ) );\n\n                _oldBlendEquation = blendEquation;\n\n            }\n\n            if ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {\n\n                _gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );\n\n                _oldBlendSrc = blendSrc;\n                _oldBlendDst = blendDst;\n\n            }\n\n        } else {\n\n            _oldBlendEquation = null;\n            _oldBlendSrc = null;\n            _oldBlendDst = null;\n\n        }\n\n    };\n\n    // Defines\n\n    function generateDefines ( defines ) {\n\n        var value, chunk, chunks = [];\n\n        for ( var d in defines ) {\n\n            value = defines[ d ];\n            if ( value === false ) continue;\n\n            chunk = \"#define \" + d + \" \" + value;\n            chunks.push( chunk );\n\n        }\n\n        return chunks.join( \"\\n\" );\n\n    };\n\n    // Shaders\n\n    function buildProgram ( shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, parameters, index0AttributeName ) {\n\n        var p, pl, d, program, code;\n        var chunks = [];\n\n        // Generate code\n\n        if ( shaderID ) {\n\n            chunks.push( shaderID );\n\n        } else {\n\n            chunks.push( fragmentShader );\n            chunks.push( vertexShader );\n\n        }\n\n        for ( d in defines ) {\n\n            chunks.push( d );\n            chunks.push( defines[ d ] );\n\n        }\n\n        for ( p in parameters ) {\n\n            chunks.push( p );\n            chunks.push( parameters[ p ] );\n\n        }\n\n        code = chunks.join();\n\n        // Check if code has been already compiled\n\n        for ( p = 0, pl = _programs.length; p < pl; p ++ ) {\n\n            var programInfo = _programs[ p ];\n\n            if ( programInfo.code === code ) {\n\n                // console.log( \"Code already compiled.\" /*: \\n\\n\" + code*/ );\n\n                programInfo.usedTimes ++;\n\n                return programInfo.program;\n\n            }\n\n        }\n\n        var shadowMapTypeDefine = \"SHADOWMAP_TYPE_BASIC\";\n\n        if ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\n            shadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF\";\n\n        } else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n            shadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF_SOFT\";\n\n        }\n\n        // console.log( \"building new program \" );\n\n        //\n\n        var customDefines = generateDefines( defines );\n\n        //\n\n        program = _gl.createProgram();\n\n        var prefix_vertex = [\n\n            \"precision \" + _precision + \" float;\",\n            \"precision \" + _precision + \" int;\",\n\n            customDefines,\n\n            _supportsVertexTextures ? \"#define VERTEX_TEXTURES\" : \"\",\n\n            _this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\n            _this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\n            _this.physicallyBasedShading ? \"#define PHYSICALLY_BASED_SHADING\" : \"\",\n\n            \"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\n            \"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\n            \"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\n            \"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\n\n            \"#define MAX_SHADOWS \" + parameters.maxShadows,\n\n            \"#define MAX_BONES \" + parameters.maxBones,\n\n            parameters.map ? \"#define USE_MAP\" : \"\",\n            parameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n            parameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n            parameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n            parameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n            parameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n            parameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n\n            parameters.skinning ? \"#define USE_SKINNING\" : \"\",\n            parameters.useVertexTexture ? \"#define BONE_TEXTURE\" : \"\",\n\n            parameters.morphTargets ? \"#define USE_MORPHTARGETS\" : \"\",\n            parameters.morphNormals ? \"#define USE_MORPHNORMALS\" : \"\",\n            parameters.perPixel ? \"#define PHONG_PER_PIXEL\" : \"\",\n            parameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\n            parameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n            parameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n\n            parameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n            parameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n            parameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\n            parameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\n\n            parameters.sizeAttenuation ? \"#define USE_SIZEATTENUATION\" : \"\",\n\n            \"uniform mat4 modelMatrix;\",\n            \"uniform mat4 modelViewMatrix;\",\n            \"uniform mat4 projectionMatrix;\",\n            \"uniform mat4 viewMatrix;\",\n            \"uniform mat3 normalMatrix;\",\n            \"uniform vec3 cameraPosition;\",\n\n            \"attribute vec3 position;\",\n            \"attribute vec3 normal;\",\n            \"attribute vec2 uv;\",\n            \"attribute vec2 uv2;\",\n\n            \"#ifdef USE_COLOR\",\n\n            \"attribute vec3 color;\",\n\n            \"#endif\",\n\n            \"#ifdef USE_MORPHTARGETS\",\n\n            \"attribute vec3 morphTarget0;\",\n            \"attribute vec3 morphTarget1;\",\n            \"attribute vec3 morphTarget2;\",\n            \"attribute vec3 morphTarget3;\",\n\n            \"#ifdef USE_MORPHNORMALS\",\n\n            \"attribute vec3 morphNormal0;\",\n            \"attribute vec3 morphNormal1;\",\n            \"attribute vec3 morphNormal2;\",\n            \"attribute vec3 morphNormal3;\",\n\n            \"#else\",\n\n            \"attribute vec3 morphTarget4;\",\n            \"attribute vec3 morphTarget5;\",\n            \"attribute vec3 morphTarget6;\",\n            \"attribute vec3 morphTarget7;\",\n\n            \"#endif\",\n\n            \"#endif\",\n\n            \"#ifdef USE_SKINNING\",\n\n            \"attribute vec4 skinIndex;\",\n            \"attribute vec4 skinWeight;\",\n\n            \"#endif\",\n\n            \"\"\n\n        ].join(\"\\n\");\n\n        var prefix_fragment = [\n\n            \"precision \" + _precision + \" float;\",\n            \"precision \" + _precision + \" int;\",\n\n            ( parameters.bumpMap || parameters.normalMap ) ? \"#extension GL_OES_standard_derivatives : enable\" : \"\",\n\n            customDefines,\n\n            \"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\n            \"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\n            \"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\n            \"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\n\n            \"#define MAX_SHADOWS \" + parameters.maxShadows,\n\n            parameters.alphaTest ? \"#define ALPHATEST \" + parameters.alphaTest: \"\",\n\n            _this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\n            _this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\n            _this.physicallyBasedShading ? \"#define PHYSICALLY_BASED_SHADING\" : \"\",\n\n            ( parameters.useFog && parameters.fog ) ? \"#define USE_FOG\" : \"\",\n            ( parameters.useFog && parameters.fogExp ) ? \"#define FOG_EXP2\" : \"\",\n\n            parameters.map ? \"#define USE_MAP\" : \"\",\n            parameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n            parameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n            parameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n            parameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n            parameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n            parameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n\n            parameters.metal ? \"#define METAL\" : \"\",\n            parameters.perPixel ? \"#define PHONG_PER_PIXEL\" : \"\",\n            parameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\n            parameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n            parameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n\n            parameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n            parameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n            parameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\n            parameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\n\n            \"uniform mat4 viewMatrix;\",\n            \"uniform vec3 cameraPosition;\",\n            \"\"\n\n        ].join(\"\\n\");\n\n        var glVertexShader = getShader( \"vertex\", prefix_vertex + vertexShader );\n        var glFragmentShader = getShader( \"fragment\", prefix_fragment + fragmentShader );\n\n        _gl.attachShader( program, glVertexShader );\n        _gl.attachShader( program, glFragmentShader );\n\n        //Force a particular attribute to index 0.\n        // because potentially expensive emulation is done by browser if attribute 0 is disabled.\n        //And, color, for example is often automatically bound to index 0 so disabling it\n        if ( index0AttributeName ) {\n            _gl.bindAttribLocation( program, 0, index0AttributeName );\n        }\n\n        _gl.linkProgram( program );\n\n        if ( !_gl.getProgramParameter( program, _gl.LINK_STATUS ) ) {\n\n            console.error( \"Could not initialise shader\\n\" + \"VALIDATE_STATUS: \" + _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) + \", gl error [\" + _gl.getError() + \"]\" );\n            console.error( \"Program Info Log: \" + _gl.getProgramInfoLog( program ) );\n        }\n\n        // clean up\n\n        _gl.deleteShader( glFragmentShader );\n        _gl.deleteShader( glVertexShader );\n\n        // console.log( prefix_fragment + fragmentShader );\n        // console.log( prefix_vertex + vertexShader );\n\n        program.uniforms = {};\n        program.attributes = {};\n\n        var identifiers, u, a, i;\n\n        // cache uniform locations\n\n        identifiers = [\n\n            'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition',\n            'morphTargetInfluences'\n\n        ];\n\n        if ( parameters.useVertexTexture ) {\n\n            identifiers.push( 'boneTexture' );\n            identifiers.push( 'boneTextureWidth' );\n            identifiers.push( 'boneTextureHeight' );\n\n        } else {\n\n            identifiers.push( 'boneGlobalMatrices' );\n\n        }\n\n        for ( u in uniforms ) {\n\n            identifiers.push( u );\n\n        }\n\n        cacheUniformLocations( program, identifiers );\n\n        // cache attributes locations\n\n        identifiers = [\n\n            \"position\", \"normal\", \"uv\", \"uv2\", \"tangent\", \"color\",\n            \"skinIndex\", \"skinWeight\", \"lineDistance\"\n\n        ];\n\n        for ( i = 0; i < parameters.maxMorphTargets; i ++ ) {\n\n            identifiers.push( \"morphTarget\" + i );\n\n        }\n\n        for ( i = 0; i < parameters.maxMorphNormals; i ++ ) {\n\n            identifiers.push( \"morphNormal\" + i );\n\n        }\n\n        for ( a in attributes ) {\n\n            identifiers.push( a );\n\n        }\n\n        cacheAttributeLocations( program, identifiers );\n\n        program.id = _programs_counter ++;\n\n        _programs.push( { program: program, code: code, usedTimes: 1 } );\n\n        _this.info.memory.programs = _programs.length;\n\n        return program;\n\n    };\n\n    // Shader parameters cache\n\n    function cacheUniformLocations ( program, identifiers ) {\n\n        var i, l, id;\n\n        for( i = 0, l = identifiers.length; i < l; i ++ ) {\n\n            id = identifiers[ i ];\n            program.uniforms[ id ] = _gl.getUniformLocation( program, id );\n\n        }\n\n    };\n\n    function cacheAttributeLocations ( program, identifiers ) {\n\n        var i, l, id;\n\n        for( i = 0, l = identifiers.length; i < l; i ++ ) {\n\n            id = identifiers[ i ];\n            program.attributes[ id ] = _gl.getAttribLocation( program, id );\n\n        }\n\n    };\n\n    function addLineNumbers ( string ) {\n\n        var chunks = string.split( \"\\n\" );\n\n        for ( var i = 0, il = chunks.length; i < il; i ++ ) {\n\n            // Chrome reports shader errors on lines\n            // starting counting from 1\n\n            chunks[ i ] = ( i + 1 ) + \": \" + chunks[ i ];\n\n        }\n\n        return chunks.join( \"\\n\" );\n\n    };\n\n    function getShader ( type, string ) {\n\n        var shader;\n\n        if ( type === \"fragment\" ) {\n\n            shader = _gl.createShader( _gl.FRAGMENT_SHADER );\n\n        } else if ( type === \"vertex\" ) {\n\n            shader = _gl.createShader( _gl.VERTEX_SHADER );\n\n        }\n\n        _gl.shaderSource( shader, string );\n        _gl.compileShader( shader );\n\n        if ( !_gl.getShaderParameter( shader, _gl.COMPILE_STATUS ) ) {\n\n            console.error( _gl.getShaderInfoLog( shader ) );\n            console.error( addLineNumbers( string ) );\n            return null;\n\n        }\n\n        return shader;\n\n    };\n\n    // Textures\n\n\n    function isPowerOfTwo ( value ) {\n\n        return ( value & ( value - 1 ) ) === 0;\n\n    };\n\n    function setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {\n\n        if ( isImagePowerOfTwo ) {\n\n            _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n            _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n            _gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n            _gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n        } else {\n\n            _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n            _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n            _gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n            _gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n        }\n\n        if ( _glExtensionTextureFilterAnisotropic && texture.type !== THREE.FloatType ) {\n\n            if ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {\n\n                _gl.texParameterf( textureType, _glExtensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _maxAnisotropy ) );\n                texture.__oldAnisotropy = texture.anisotropy;\n\n            }\n\n        }\n\n    };\n\n    this.setTexture = function ( texture, slot ) {\n\n        if ( texture.needsUpdate ) {\n\n            if ( ! texture.__webglInit ) {\n\n                texture.__webglInit = true;\n\n                texture.addEventListener( 'dispose', onTextureDispose );\n\n                texture.__webglTexture = _gl.createTexture();\n\n                _this.info.memory.textures ++;\n\n            }\n\n            _gl.activeTexture( _gl.TEXTURE0 + slot );\n            _gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\n\n            _gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n            _gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n            _gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n            var image = texture.image,\n                isImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),\n                glFormat = paramThreeToGL( texture.format ),\n                glType = paramThreeToGL( texture.type );\n\n            setTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );\n\n            var mipmap, mipmaps = texture.mipmaps;\n\n            if ( texture instanceof THREE.DataTexture ) {\n\n                // use manually created mipmaps if available\n                // if there are no manual mipmaps\n                // set 0 level mipmap and then use GL to generate other mipmap levels\n\n                if ( mipmaps.length > 0 && isImagePowerOfTwo ) {\n\n                    for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n                        mipmap = mipmaps[ i ];\n                        _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n                    }\n\n                    texture.generateMipmaps = false;\n\n                } else {\n\n                    _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n                }\n\n            } else if ( texture instanceof THREE.CompressedTexture ) {\n\n                for( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n                    mipmap = mipmaps[ i ];\n                    if ( texture.format!==THREE.RGBAFormat ) {\n                        _gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n                    } else {\n                        _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n                    }\n\n                }\n\n            } else { // regular Texture (image, video, canvas)\n\n                // use manually created mipmaps if available\n                // if there are no manual mipmaps\n                // set 0 level mipmap and then use GL to generate other mipmap levels\n\n                if ( mipmaps.length > 0 && isImagePowerOfTwo ) {\n\n                    for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n                        mipmap = mipmaps[ i ];\n                        _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n                    }\n\n                    texture.generateMipmaps = false;\n\n                } else {\n\n                    _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );\n\n                }\n\n            }\n\n            if ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n            texture.needsUpdate = false;\n\n            if ( texture.onUpdate ) texture.onUpdate();\n\n        } else {\n\n            _gl.activeTexture( _gl.TEXTURE0 + slot );\n            _gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\n\n        }\n\n    };\n\n    function clampToMaxSize ( image, maxSize ) {\n\n        if ( image.width <= maxSize && image.height <= maxSize ) {\n\n            return image;\n\n        }\n\n        // Warning: Scaling through the canvas will only work with images that use\n        // premultiplied alpha.\n\n        var maxDimension = Math.max( image.width, image.height );\n        var newWidth = Math.floor( image.width * maxSize / maxDimension );\n        var newHeight = Math.floor( image.height * maxSize / maxDimension );\n\n        var canvas = document.createElement( 'canvas' );\n        canvas.width = newWidth;\n        canvas.height = newHeight;\n\n        var ctx = canvas.getContext( \"2d\" );\n        ctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight );\n\n        return canvas;\n\n    }\n\n    function setCubeTexture ( texture, slot ) {\n\n        if ( texture.image.length === 6 ) {\n\n            if ( texture.needsUpdate ) {\n\n                if ( ! texture.image.__webglTextureCube ) {\n\n                    texture.addEventListener( 'dispose', onTextureDispose );\n\n                    texture.image.__webglTextureCube = _gl.createTexture();\n\n                    _this.info.memory.textures ++;\n\n                }\n\n                _gl.activeTexture( _gl.TEXTURE0 + slot );\n                _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\n\n                _gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n                var isCompressed = texture instanceof THREE.CompressedTexture;\n\n                var cubeImage = [];\n\n                for ( var i = 0; i < 6; i ++ ) {\n\n                    if ( _this.autoScaleCubemaps && ! isCompressed ) {\n\n                        cubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );\n\n                    } else {\n\n                        cubeImage[ i ] = texture.image[ i ];\n\n                    }\n\n                }\n\n                var image = cubeImage[ 0 ],\n                    isImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),\n                    glFormat = paramThreeToGL( texture.format ),\n                    glType = paramThreeToGL( texture.type );\n\n                setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );\n\n                for ( var i = 0; i < 6; i ++ ) {\n\n                    if( !isCompressed ) {\n\n                        _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n                    } else {\n\n                        var mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n                        for( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n                            mipmap = mipmaps[ j ];\n                            if ( texture.format!==THREE.RGBAFormat ) {\n\n                                _gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n                            } else {\n                                _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n                            }\n\n                        }\n                    }\n                }\n\n                if ( texture.generateMipmaps && isImagePowerOfTwo ) {\n\n                    _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n                }\n\n                texture.needsUpdate = false;\n\n                if ( texture.onUpdate ) texture.onUpdate();\n\n            } else {\n\n                _gl.activeTexture( _gl.TEXTURE0 + slot );\n                _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\n\n            }\n\n        }\n\n    };\n\n    function setCubeTextureDynamic ( texture, slot ) {\n\n        _gl.activeTexture( _gl.TEXTURE0 + slot );\n        _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );\n\n    };\n\n    // Render targets\n\n    function setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {\n\n        _gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n        _gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );\n\n    };\n\n    function setupRenderBuffer ( renderbuffer, renderTarget  ) {\n\n        _gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n        if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n            _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n            _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n            /* For some reason this is not working. Defaulting to RGBA4.\n             } else if( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n             _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );\n             _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n             */\n        } else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n            _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n            _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n        } else {\n\n            _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n        }\n\n    };\n\n    this.setRenderTarget = function ( renderTarget ) {\n\n        var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\n        if ( renderTarget && ! renderTarget.__webglFramebuffer ) {\n\n            if ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;\n            if ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;\n\n            renderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n            renderTarget.__webglTexture = _gl.createTexture();\n\n            _this.info.memory.textures ++;\n\n            // Setup texture, create render and frame buffers\n\n            var isTargetPowerOfTwo = isPowerOfTwo( renderTarget.width ) && isPowerOfTwo( renderTarget.height ),\n                glFormat = paramThreeToGL( renderTarget.format ),\n                glType = paramThreeToGL( renderTarget.type );\n\n            if ( isCube ) {\n\n                renderTarget.__webglFramebuffer = [];\n                renderTarget.__webglRenderbuffer = [];\n\n                _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\n                setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );\n\n                for ( var i = 0; i < 6; i ++ ) {\n\n                    renderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n                    renderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n                    _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n                    setupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n                    setupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );\n\n                }\n\n                if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n            } else {\n\n                renderTarget.__webglFramebuffer = _gl.createFramebuffer();\n\n                if ( renderTarget.shareDepthFrom ) {\n\n                    renderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;\n\n                } else {\n\n                    renderTarget.__webglRenderbuffer = _gl.createRenderbuffer();\n\n                }\n\n                _gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\n                setTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );\n\n                _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n                setupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );\n\n                if ( renderTarget.shareDepthFrom ) {\n\n                    if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n                        _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\n\n                    } else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n                        _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\n\n                    }\n\n                } else {\n\n                    setupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );\n\n                }\n\n                if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n            }\n\n            // Release everything\n\n            if ( isCube ) {\n\n                _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n            } else {\n\n                _gl.bindTexture( _gl.TEXTURE_2D, null );\n\n            }\n\n            _gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n            _gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n        }\n\n        var framebuffer, width, height, vx, vy;\n\n        if ( renderTarget ) {\n\n            if ( isCube ) {\n\n                framebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n            } else {\n\n                framebuffer = renderTarget.__webglFramebuffer;\n\n            }\n\n            width = renderTarget.width;\n            height = renderTarget.height;\n\n            vx = 0;\n            vy = 0;\n\n        } else {\n\n            framebuffer = null;\n\n            width = _viewportWidth;\n            height = _viewportHeight;\n\n            vx = _viewportX;\n            vy = _viewportY;\n\n        }\n\n        if ( framebuffer !== _currentFramebuffer ) {\n\n            _gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n            _gl.viewport( vx, vy, width, height );\n\n            _currentFramebuffer = framebuffer;\n\n        }\n\n        _currentWidth = width;\n        _currentHeight = height;\n\n    };\n\n    function updateRenderTargetMipmap ( renderTarget ) {\n\n        if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n            _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\n            _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n            _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n        } else {\n\n            _gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\n            _gl.generateMipmap( _gl.TEXTURE_2D );\n            _gl.bindTexture( _gl.TEXTURE_2D, null );\n\n        }\n\n    };\n\n    // Fallback filters for non-power-of-2 textures\n\n    function filterFallback ( f ) {\n\n        if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\n            return _gl.NEAREST;\n\n        }\n\n        return _gl.LINEAR;\n\n    };\n\n    // Map three.js constants to WebGL constants\n\n    function paramThreeToGL ( p ) {\n\n        if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n        if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n        if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n        if ( p === THREE.NearestFilter ) return _gl.NEAREST;\n        if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n        if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n        if ( p === THREE.LinearFilter ) return _gl.LINEAR;\n        if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n        if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n        if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n        if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n        if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n        if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n        if ( p === THREE.ByteType ) return _gl.BYTE;\n        if ( p === THREE.ShortType ) return _gl.SHORT;\n        if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n        if ( p === THREE.IntType ) return _gl.INT;\n        if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n        if ( p === THREE.FloatType ) return _gl.FLOAT;\n\n        if ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n        if ( p === THREE.RGBFormat ) return _gl.RGB;\n        if ( p === THREE.RGBAFormat ) return _gl.RGBA;\n        if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n        if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\n        if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n        if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n        if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n        if ( p === THREE.ZeroFactor ) return _gl.ZERO;\n        if ( p === THREE.OneFactor ) return _gl.ONE;\n        if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n        if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n        if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n        if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n        if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n        if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n        if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n        if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n        if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n        if ( _glExtensionCompressedTextureS3TC !== undefined ) {\n\n            if ( p === THREE.RGB_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;\n            if ( p === THREE.RGBA_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n            if ( p === THREE.RGBA_S3TC_DXT3_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n            if ( p === THREE.RGBA_S3TC_DXT5_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n        }\n\n        return 0;\n\n    };\n\n    // Allocations\n\n    function allocateBones ( object ) {\n\n        if ( _supportsBoneTextures && object && object.useVertexTexture ) {\n\n            return 1024;\n\n        } else {\n\n            // default for when object is not specified\n            // ( for example when prebuilding shader\n            //   to be used with multiple objects )\n            //\n            // \t- leave some extra space for other uniforms\n            //  - limit here is ANGLE's 254 max uniform vectors\n            //    (up to 54 should be safe)\n\n            var nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );\n            var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n            var maxBones = nVertexMatrices;\n\n            if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\n                maxBones = Math.min( object.bones.length, maxBones );\n\n                if ( maxBones < object.bones.length ) {\n\n                    console.warn( \"WebGLRenderer: too many bones - \" + object.bones.length + \", this GPU supports just \" + maxBones + \" (try OpenGL instead of ANGLE)\" );\n\n                }\n\n            }\n\n            return maxBones;\n\n        }\n\n    };\n\n    function allocateLights( lights ) {\n\n        var dirLights = 0;\n        var pointLights = 0;\n        var spotLights = 0;\n        var hemiLights = 0;\n\n        for ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n            var light = lights[ l ];\n\n            if ( light.onlyShadow ) continue;\n\n            if ( light instanceof THREE.DirectionalLight ) dirLights ++;\n            if ( light instanceof THREE.PointLight ) pointLights ++;\n            if ( light instanceof THREE.SpotLight ) spotLights ++;\n            if ( light instanceof THREE.HemisphereLight ) hemiLights ++;\n\n        }\n\n        return { 'directional' : dirLights, 'point' : pointLights, 'spot': spotLights, 'hemi': hemiLights };\n\n    };\n\n    function allocateShadows( lights ) {\n\n        var maxShadows = 0;\n\n        for ( var l = 0, ll = lights.length; l < ll; l++ ) {\n\n            var light = lights[ l ];\n\n            if ( ! light.castShadow ) continue;\n\n            if ( light instanceof THREE.SpotLight ) maxShadows ++;\n            if ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;\n\n        }\n\n        return maxShadows;\n\n    };\n\n    // Initialization\n\n    function initGL() {\n\n        try {\n\n            var attributes = {\n                alpha: _alpha,\n                premultipliedAlpha: _premultipliedAlpha,\n                antialias: _antialias,\n                stencil: _stencil,\n                preserveDrawingBuffer: _preserveDrawingBuffer\n            };\n\n            _gl = _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n            if ( _gl === null ) {\n\n                throw 'Error creating WebGL context.';\n\n            }\n\n        } catch ( error ) {\n\n            console.error( error );\n\n        }\n\n        _glExtensionTextureFloat = _gl.getExtension( 'OES_texture_float' );\n        _glExtensionTextureFloatLinear = _gl.getExtension( 'OES_texture_float_linear' );\n        _glExtensionStandardDerivatives = _gl.getExtension( 'OES_standard_derivatives' );\n\n        _glExtensionTextureFilterAnisotropic = _gl.getExtension( 'EXT_texture_filter_anisotropic' ) || _gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || _gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\n        _glExtensionCompressedTextureS3TC = _gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || _gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || _gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\n        if ( ! _glExtensionTextureFloat ) {\n\n            console.log( 'THREE.WebGLRenderer: Float textures not supported.' );\n\n        }\n\n        if ( ! _glExtensionStandardDerivatives ) {\n\n            console.log( 'THREE.WebGLRenderer: Standard derivatives not supported.' );\n\n        }\n\n        if ( ! _glExtensionTextureFilterAnisotropic ) {\n\n            console.log( 'THREE.WebGLRenderer: Anisotropic texture filtering not supported.' );\n\n        }\n\n        if ( ! _glExtensionCompressedTextureS3TC ) {\n\n            console.log( 'THREE.WebGLRenderer: S3TC compressed textures not supported.' );\n\n        }\n\n        if ( _gl.getShaderPrecisionFormat === undefined ) {\n\n            _gl.getShaderPrecisionFormat = function() {\n\n                return {\n                    \"rangeMin\"  : 1,\n                    \"rangeMax\"  : 1,\n                    \"precision\" : 1\n                };\n\n            }\n        }\n\n    };\n\n    function setDefaultGLState () {\n\n        _gl.clearColor( 0, 0, 0, 1 );\n        _gl.clearDepth( 1 );\n        _gl.clearStencil( 0 );\n\n        _gl.enable( _gl.DEPTH_TEST );\n        _gl.depthFunc( _gl.LEQUAL );\n\n        _gl.frontFace( _gl.CCW );\n        _gl.cullFace( _gl.BACK );\n        _gl.enable( _gl.CULL_FACE );\n\n        _gl.enable( _gl.BLEND );\n        _gl.blendEquation( _gl.FUNC_ADD );\n        _gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );\n\n        _gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\n\n        _gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n    };\n\n    // default plugins (order is important)\n\n    this.shadowMapPlugin = new THREE.ShadowMapPlugin();\n    this.addPrePlugin( this.shadowMapPlugin );\n\n    this.addPostPlugin( new THREE.SpritePlugin() );\n    this.addPostPlugin( new THREE.LensFlarePlugin() );\n\n};\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\n    this.width = width;\n    this.height = height;\n\n    options = options || {};\n\n    this.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;\n    this.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;\n\n    this.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;\n    this.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;\n\n    this.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;\n\n    this.offset = new THREE.Vector2( 0, 0 );\n    this.repeat = new THREE.Vector2( 1, 1 );\n\n    this.format = options.format !== undefined ? options.format : THREE.RGBAFormat;\n    this.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;\n\n    this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n    this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\n    this.generateMipmaps = true;\n\n    this.shareDepthFrom = null;\n\n};\n\nTHREE.WebGLRenderTarget.prototype = {\n\n    constructor: THREE.WebGLRenderTarget,\n\n    clone: function () {\n\n        var tmp = new THREE.WebGLRenderTarget( this.width, this.height );\n\n        tmp.wrapS = this.wrapS;\n        tmp.wrapT = this.wrapT;\n\n        tmp.magFilter = this.magFilter;\n        tmp.minFilter = this.minFilter;\n\n        tmp.anisotropy = this.anisotropy;\n\n        tmp.offset.copy( this.offset );\n        tmp.repeat.copy( this.repeat );\n\n        tmp.format = this.format;\n        tmp.type = this.type;\n\n        tmp.depthBuffer = this.depthBuffer;\n        tmp.stencilBuffer = this.stencilBuffer;\n\n        tmp.generateMipmaps = this.generateMipmaps;\n\n        tmp.shareDepthFrom = this.shareDepthFrom;\n\n        return tmp;\n\n    },\n\n    dispose: function () {\n\n        this.dispatchEvent( { type: 'dispose' } );\n\n    }\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\n    THREE.WebGLRenderTarget.call( this, width, height, options );\n\n    this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\n};\n\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RenderableVertex = function () {\n\n    this.positionWorld = new THREE.Vector3();\n    this.positionScreen = new THREE.Vector4();\n\n    this.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n    this.positionWorld.copy( vertex.positionWorld );\n    this.positionScreen.copy( vertex.positionScreen );\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RenderableFace3 = function () {\n\n    this.id = 0;\n\n    this.v1 = new THREE.RenderableVertex();\n    this.v2 = new THREE.RenderableVertex();\n    this.v3 = new THREE.RenderableVertex();\n\n    this.centroidModel = new THREE.Vector3();\n\n    this.normalModel = new THREE.Vector3();\n    this.normalModelView = new THREE.Vector3();\n\n    this.vertexNormalsLength = 0;\n    this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n    this.vertexNormalsModelView = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\n    this.color = null;\n    this.material = null;\n    this.uvs = [[]];\n\n    this.z = 0;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RenderableObject = function () {\n\n    this.id = 0;\n\n    this.object = null;\n    this.z = 0;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RenderableSprite = function () {\n\n    this.id = 0;\n\n    this.object = null;\n\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n\n    this.rotation = 0;\n    this.scale = new THREE.Vector2();\n\n    this.material = null;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RenderableLine = function () {\n\n    this.id = 0;\n\n    this.v1 = new THREE.RenderableVertex();\n    this.v2 = new THREE.RenderableVertex();\n\n    this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n    this.material = null;\n\n    this.z = 0;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.GeometryUtils = {\n\n    // Merge two geometries or geometry and geometry from object (using object's transform)\n\n    merge: function ( geometry1, object2 /* mesh | geometry */, materialIndexOffset ) {\n\n        var matrix, normalMatrix,\n            vertexOffset = geometry1.vertices.length,\n            uvPosition = geometry1.faceVertexUvs[ 0 ].length,\n            geometry2 = object2 instanceof THREE.Mesh ? object2.geometry : object2,\n            vertices1 = geometry1.vertices,\n            vertices2 = geometry2.vertices,\n            faces1 = geometry1.faces,\n            faces2 = geometry2.faces,\n            uvs1 = geometry1.faceVertexUvs[ 0 ],\n            uvs2 = geometry2.faceVertexUvs[ 0 ];\n\n        if ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n        if ( object2 instanceof THREE.Mesh ) {\n\n            object2.matrixAutoUpdate && object2.updateMatrix();\n\n            matrix = object2.matrix;\n\n            normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n        }\n\n        // vertices\n\n        for ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n            var vertex = vertices2[ i ];\n\n            var vertexCopy = vertex.clone();\n\n            if ( matrix ) vertexCopy.applyMatrix4( matrix );\n\n            vertices1.push( vertexCopy );\n\n        }\n\n        // faces\n\n        for ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n            var face = faces2[ i ], faceCopy, normal, color,\n                faceVertexNormals = face.vertexNormals,\n                faceVertexColors = face.vertexColors;\n\n            faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n            faceCopy.normal.copy( face.normal );\n\n            if ( normalMatrix ) {\n\n                faceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n            }\n\n            for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n                normal = faceVertexNormals[ j ].clone();\n\n                if ( normalMatrix ) {\n\n                    normal.applyMatrix3( normalMatrix ).normalize();\n\n                }\n\n                faceCopy.vertexNormals.push( normal );\n\n            }\n\n            faceCopy.color.copy( face.color );\n\n            for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n                color = faceVertexColors[ j ];\n                faceCopy.vertexColors.push( color.clone() );\n\n            }\n\n            faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n            faceCopy.centroid.copy( face.centroid );\n\n            if ( matrix ) {\n\n                faceCopy.centroid.applyMatrix4( matrix );\n\n            }\n\n            faces1.push( faceCopy );\n\n        }\n\n        // uvs\n\n        for ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n            var uv = uvs2[ i ], uvCopy = [];\n\n            for ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n                uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\n\n            }\n\n            uvs1.push( uvCopy );\n\n        }\n\n    },\n\n    // Get random point in triangle (via barycentric coordinates)\n    // \t(uniform distribution)\n    // \thttp://www.cgafaq.info/wiki/Random_Point_In_Triangle\n\n    randomPointInTriangle: function () {\n\n        var vector = new THREE.Vector3();\n\n        return function ( vectorA, vectorB, vectorC ) {\n\n            var point = new THREE.Vector3();\n\n            var a = THREE.Math.random16();\n            var b = THREE.Math.random16();\n\n            if ( ( a + b ) > 1 ) {\n\n                a = 1 - a;\n                b = 1 - b;\n\n            }\n\n            var c = 1 - a - b;\n\n            point.copy( vectorA );\n            point.multiplyScalar( a );\n\n            vector.copy( vectorB );\n            vector.multiplyScalar( b );\n\n            point.add( vector );\n\n            vector.copy( vectorC );\n            vector.multiplyScalar( c );\n\n            point.add( vector );\n\n            return point;\n\n        };\n\n    }(),\n\n    // Get random point in face (triangle / quad)\n    // (uniform distribution)\n\n    randomPointInFace: function ( face, geometry, useCachedAreas ) {\n\n        var vA, vB, vC, vD;\n\n        vA = geometry.vertices[ face.a ];\n        vB = geometry.vertices[ face.b ];\n        vC = geometry.vertices[ face.c ];\n\n        return THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );\n\n    },\n\n    // Get uniformly distributed random points in mesh\n    // \t- create array with cumulative sums of face areas\n    //  - pick random number from 0 to total area\n    //  - find corresponding place in area array by binary search\n    //\t- get random point in face\n\n    randomPointsInGeometry: function ( geometry, n ) {\n\n        var face, i,\n            faces = geometry.faces,\n            vertices = geometry.vertices,\n            il = faces.length,\n            totalArea = 0,\n            cumulativeAreas = [],\n            vA, vB, vC, vD;\n\n        // precompute face areas\n\n        for ( i = 0; i < il; i ++ ) {\n\n            face = faces[ i ];\n\n            vA = vertices[ face.a ];\n            vB = vertices[ face.b ];\n            vC = vertices[ face.c ];\n\n            face._area = THREE.GeometryUtils.triangleArea( vA, vB, vC );\n\n            totalArea += face._area;\n\n            cumulativeAreas[ i ] = totalArea;\n\n        }\n\n        // binary search cumulative areas array\n\n        function binarySearchIndices( value ) {\n\n            function binarySearch( start, end ) {\n\n                // return closest larger index\n                // if exact number is not found\n\n                if ( end < start )\n                    return start;\n\n                var mid = start + Math.floor( ( end - start ) / 2 );\n\n                if ( cumulativeAreas[ mid ] > value ) {\n\n                    return binarySearch( start, mid - 1 );\n\n                } else if ( cumulativeAreas[ mid ] < value ) {\n\n                    return binarySearch( mid + 1, end );\n\n                } else {\n\n                    return mid;\n\n                }\n\n            }\n\n            var result = binarySearch( 0, cumulativeAreas.length - 1 )\n            return result;\n\n        }\n\n        // pick random face weighted by face area\n\n        var r, index,\n            result = [];\n\n        var stats = {};\n\n        for ( i = 0; i < n; i ++ ) {\n\n            r = THREE.Math.random16() * totalArea;\n\n            index = binarySearchIndices( r );\n\n            result[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );\n\n            if ( ! stats[ index ] ) {\n\n                stats[ index ] = 1;\n\n            } else {\n\n                stats[ index ] += 1;\n\n            }\n\n        }\n\n        return result;\n\n    },\n\n    // Get triangle area (half of parallelogram)\n    //\thttp://mathworld.wolfram.com/TriangleArea.html\n\n    triangleArea: function () {\n\n        var vector1 = new THREE.Vector3();\n        var vector2 = new THREE.Vector3();\n\n        return function ( vectorA, vectorB, vectorC ) {\n\n            vector1.subVectors( vectorB, vectorA );\n            vector2.subVectors( vectorC, vectorA );\n            vector1.cross( vector2 );\n\n            return 0.5 * vector1.length();\n\n        };\n\n    }(),\n\n    // Center geometry so that 0,0,0 is in center of bounding box\n\n    center: function ( geometry ) {\n\n        geometry.computeBoundingBox();\n\n        var bb = geometry.boundingBox;\n\n        var offset = new THREE.Vector3();\n\n        offset.addVectors( bb.min, bb.max );\n        offset.multiplyScalar( -0.5 );\n\n        geometry.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );\n        geometry.computeBoundingBox();\n\n        return offset;\n\n    },\n\n    triangulateQuads: function ( geometry ) {\n\n        var i, il, j, jl;\n\n        var faces = [];\n        var faceVertexUvs = [];\n\n        for ( i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n            faceVertexUvs[ i ] = [];\n\n        }\n\n        for ( i = 0, il = geometry.faces.length; i < il; i ++ ) {\n\n            var face = geometry.faces[ i ];\n\n            faces.push( face );\n\n            for ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n                faceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );\n\n            }\n\n        }\n\n        geometry.faces = faces;\n        geometry.faceVertexUvs = faceVertexUvs;\n\n        geometry.computeCentroids();\n        geometry.computeFaceNormals();\n        geometry.computeVertexNormals();\n\n        if ( geometry.hasTangents ) geometry.computeTangents();\n\n    }\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ImageUtils = {\n\n    crossOrigin: 'anonymous',\n\n    loadTexture: function ( url, mapping, onLoad, onError ) {\n\n        var loader = new THREE.ImageLoader();\n        loader.crossOrigin = this.crossOrigin;\n\n        var texture = new THREE.Texture( undefined, mapping );\n\n        var image = loader.load( url, function () {\n\n            texture.needsUpdate = true;\n\n            if ( onLoad ) onLoad( texture );\n\n        } );\n\n        texture.image = image;\n        texture.sourceFile = url;\n\n        return texture;\n\n    },\n\n    loadCompressedTexture: function ( url, mapping, onLoad, onError ) {\n\n        var texture = new THREE.CompressedTexture();\n        texture.mapping = mapping;\n\n        var request = new XMLHttpRequest();\n\n        request.onload = function () {\n\n            var buffer = request.response;\n            var dds = THREE.ImageUtils.parseDDS( buffer, true );\n\n            texture.format = dds.format;\n\n            texture.mipmaps = dds.mipmaps;\n            texture.image.width = dds.width;\n            texture.image.height = dds.height;\n\n            // gl.generateMipmap fails for compressed textures\n            // mipmaps must be embedded in the DDS file\n            // or texture filters must not use mipmapping\n\n            texture.generateMipmaps = false;\n\n            texture.needsUpdate = true;\n\n            if ( onLoad ) onLoad( texture );\n\n        }\n\n        request.onerror = onError;\n\n        request.open( 'GET', url, true );\n        request.responseType = \"arraybuffer\";\n        request.send( null );\n\n        return texture;\n\n    },\n\n    loadTextureCube: function ( array, mapping, onLoad, onError ) {\n\n        var images = [];\n        images.loadCount = 0;\n\n        var texture = new THREE.Texture();\n        texture.image = images;\n        if ( mapping !== undefined ) texture.mapping = mapping;\n\n        // no flipping needed for cube textures\n\n        texture.flipY = false;\n\n        for ( var i = 0, il = array.length; i < il; ++ i ) {\n\n            var cubeImage = new Image();\n            images[ i ] = cubeImage;\n\n            cubeImage.onload = function () {\n\n                images.loadCount += 1;\n\n                if ( images.loadCount === 6 ) {\n\n                    texture.needsUpdate = true;\n                    if ( onLoad ) onLoad( texture );\n\n                }\n\n            };\n\n            cubeImage.onerror = onError;\n\n            cubeImage.crossOrigin = this.crossOrigin;\n            cubeImage.src = array[ i ];\n\n        }\n\n        return texture;\n\n    },\n\n    loadCompressedTextureCube: function ( array, mapping, onLoad, onError ) {\n\n        var images = [];\n        images.loadCount = 0;\n\n        var texture = new THREE.CompressedTexture();\n        texture.image = images;\n        if ( mapping !== undefined ) texture.mapping = mapping;\n\n        // no flipping for cube textures\n        // (also flipping doesn't work for compressed textures )\n\n        texture.flipY = false;\n\n        // can't generate mipmaps for compressed textures\n        // mips must be embedded in DDS files\n\n        texture.generateMipmaps = false;\n\n        var generateCubeFaceCallback = function ( rq, img ) {\n\n            return function () {\n\n                var buffer = rq.response;\n                var dds = THREE.ImageUtils.parseDDS( buffer, true );\n\n                img.format = dds.format;\n\n                img.mipmaps = dds.mipmaps;\n                img.width = dds.width;\n                img.height = dds.height;\n\n                images.loadCount += 1;\n\n                if ( images.loadCount === 6 ) {\n\n                    texture.format = dds.format;\n                    texture.needsUpdate = true;\n                    if ( onLoad ) onLoad( texture );\n\n                }\n\n            }\n\n        }\n\n        // compressed cubemap textures as 6 separate DDS files\n\n        if ( array instanceof Array ) {\n\n            for ( var i = 0, il = array.length; i < il; ++ i ) {\n\n                var cubeImage = {};\n                images[ i ] = cubeImage;\n\n                var request = new XMLHttpRequest();\n\n                request.onload = generateCubeFaceCallback( request, cubeImage );\n                request.onerror = onError;\n\n                var url = array[ i ];\n\n                request.open( 'GET', url, true );\n                request.responseType = \"arraybuffer\";\n                request.send( null );\n\n            }\n\n            // compressed cubemap texture stored in a single DDS file\n\n        } else {\n\n            var url = array;\n            var request = new XMLHttpRequest();\n\n            request.onload = function( ) {\n\n                var buffer = request.response;\n                var dds = THREE.ImageUtils.parseDDS( buffer, true );\n\n                if ( dds.isCubemap ) {\n\n                    var faces = dds.mipmaps.length / dds.mipmapCount;\n\n                    for ( var f = 0; f < faces; f ++ ) {\n\n                        images[ f ] = { mipmaps : [] };\n\n                        for ( var i = 0; i < dds.mipmapCount; i ++ ) {\n\n                            images[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );\n                            images[ f ].format = dds.format;\n                            images[ f ].width = dds.width;\n                            images[ f ].height = dds.height;\n\n                        }\n\n                    }\n\n                    texture.format = dds.format;\n                    texture.needsUpdate = true;\n                    if ( onLoad ) onLoad( texture );\n\n                }\n\n            }\n\n            request.onerror = onError;\n\n            request.open( 'GET', url, true );\n            request.responseType = \"arraybuffer\";\n            request.send( null );\n\n        }\n\n        return texture;\n\n    },\n\n    loadDDSTexture: function ( url, mapping, onLoad, onError ) {\n\n        var images = [];\n        images.loadCount = 0;\n\n        var texture = new THREE.CompressedTexture();\n        texture.image = images;\n        if ( mapping !== undefined ) texture.mapping = mapping;\n\n        // no flipping for cube textures\n        // (also flipping doesn't work for compressed textures )\n\n        texture.flipY = false;\n\n        // can't generate mipmaps for compressed textures\n        // mips must be embedded in DDS files\n\n        texture.generateMipmaps = false;\n\n        {\n            var request = new XMLHttpRequest();\n\n            request.onload = function( ) {\n\n                var buffer = request.response;\n                var dds = THREE.ImageUtils.parseDDS( buffer, true );\n\n                if ( dds.isCubemap ) {\n\n                    var faces = dds.mipmaps.length / dds.mipmapCount;\n\n                    for ( var f = 0; f < faces; f ++ ) {\n\n                        images[ f ] = { mipmaps : [] };\n\n                        for ( var i = 0; i < dds.mipmapCount; i ++ ) {\n\n                            images[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );\n                            images[ f ].format = dds.format;\n                            images[ f ].width = dds.width;\n                            images[ f ].height = dds.height;\n\n                        }\n\n                    }\n\n\n                } else {\n                    texture.image.width = dds.width;\n                    texture.image.height = dds.height;\n                    texture.mipmaps = dds.mipmaps;\n                }\n\n                texture.format = dds.format;\n                texture.needsUpdate = true;\n                if ( onLoad ) onLoad( texture );\n\n            }\n\n            request.onerror = onError;\n\n            request.open( 'GET', url, true );\n            request.responseType = \"arraybuffer\";\n            request.send( null );\n\n        }\n\n        return texture;\n\n    },\n\n    parseDDS: function ( buffer, loadMipmaps ) {\n\n        var dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\n\n        // Adapted from @toji's DDS utils\n        //\thttps://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n\n        // All values and structures referenced from:\n        // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n        var DDS_MAGIC = 0x20534444;\n\n        var DDSD_CAPS = 0x1,\n            DDSD_HEIGHT = 0x2,\n            DDSD_WIDTH = 0x4,\n            DDSD_PITCH = 0x8,\n            DDSD_PIXELFORMAT = 0x1000,\n            DDSD_MIPMAPCOUNT = 0x20000,\n            DDSD_LINEARSIZE = 0x80000,\n            DDSD_DEPTH = 0x800000;\n\n        var DDSCAPS_COMPLEX = 0x8,\n            DDSCAPS_MIPMAP = 0x400000,\n            DDSCAPS_TEXTURE = 0x1000;\n\n        var DDSCAPS2_CUBEMAP = 0x200,\n            DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\n            DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\n            DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\n            DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\n            DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\n            DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\n            DDSCAPS2_VOLUME = 0x200000;\n\n        var DDPF_ALPHAPIXELS = 0x1,\n            DDPF_ALPHA = 0x2,\n            DDPF_FOURCC = 0x4,\n            DDPF_RGB = 0x40,\n            DDPF_YUV = 0x200,\n            DDPF_LUMINANCE = 0x20000;\n\n        function fourCCToInt32( value ) {\n\n            return value.charCodeAt(0) +\n                (value.charCodeAt(1) << 8) +\n                (value.charCodeAt(2) << 16) +\n                (value.charCodeAt(3) << 24);\n\n        }\n\n        function int32ToFourCC( value ) {\n\n            return String.fromCharCode(\n                value & 0xff,\n                (value >> 8) & 0xff,\n                (value >> 16) & 0xff,\n                (value >> 24) & 0xff\n            );\n        }\n\n        function loadARGBMip( buffer, dataOffset, width, height ) {\n            var dataLength = width*height*4;\n            var srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );\n            var byteArray = new Uint8Array( dataLength );\n            var dst = 0;\n            var src = 0;\n            for ( var y = 0; y < height; y++ ) {\n                for ( var x = 0; x < width; x++ ) {\n                    var b = srcBuffer[src]; src++;\n                    var g = srcBuffer[src]; src++;\n                    var r = srcBuffer[src]; src++;\n                    var a = srcBuffer[src]; src++;\n                    byteArray[dst] = r; dst++;\t//r\n                    byteArray[dst] = g; dst++;\t//g\n                    byteArray[dst] = b; dst++;\t//b\n                    byteArray[dst] = a; dst++;\t//a\n                }\n            }\n            return byteArray;\n        }\n\n        var FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\n        var FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\n        var FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\n\n        var headerLengthInt = 31; // The header length in 32 bit ints\n\n        // Offsets into the header array\n\n        var off_magic = 0;\n\n        var off_size = 1;\n        var off_flags = 2;\n        var off_height = 3;\n        var off_width = 4;\n\n        var off_mipmapCount = 7;\n\n        var off_pfFlags = 20;\n        var off_pfFourCC = 21;\n        var off_RGBBitCount = 22;\n        var off_RBitMask = 23;\n        var off_GBitMask = 24;\n        var off_BBitMask = 25;\n        var off_ABitMask = 26;\n\n        var off_caps = 27;\n        var off_caps2 = 28;\n        var off_caps3 = 29;\n        var off_caps4 = 30;\n\n        // Parse header\n\n        var header = new Int32Array( buffer, 0, headerLengthInt );\n\n        if ( header[ off_magic ] !== DDS_MAGIC ) {\n\n            console.error( \"ImageUtils.parseDDS(): Invalid magic number in DDS header\" );\n            return dds;\n\n        }\n\n        if ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {\n\n            console.error( \"ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code\" );\n            return dds;\n\n        }\n\n        var blockBytes;\n\n        var fourCC = header[ off_pfFourCC ];\n\n        var isRGBAUncompressed = false;\n\n        switch ( fourCC ) {\n\n            case FOURCC_DXT1:\n\n                blockBytes = 8;\n                dds.format = THREE.RGB_S3TC_DXT1_Format;\n                break;\n\n            case FOURCC_DXT3:\n\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT3_Format;\n                break;\n\n            case FOURCC_DXT5:\n\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT5_Format;\n                break;\n\n            default:\n\n                if( header[off_RGBBitCount] ==32\n                    && header[off_RBitMask]&0xff0000\n                    && header[off_GBitMask]&0xff00\n                    && header[off_BBitMask]&0xff\n                    && header[off_ABitMask]&0xff000000  ) {\n                    isRGBAUncompressed = true;\n                    blockBytes = 64;\n                    dds.format = THREE.RGBAFormat;\n                } else {\n                    console.error( \"ImageUtils.parseDDS(): Unsupported FourCC code: \", int32ToFourCC( fourCC ) );\n                    return dds;\n                }\n        }\n\n        dds.mipmapCount = 1;\n\n        if ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\n\n            dds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\n\n        }\n\n        //TODO: Verify that all faces of the cubemap are present with DDSCAPS2_CUBEMAP_POSITIVEX, etc.\n\n        dds.isCubemap = header[ off_caps2 ] & DDSCAPS2_CUBEMAP ? true : false;\n\n        dds.width = header[ off_width ];\n        dds.height = header[ off_height ];\n\n        var dataOffset = header[ off_size ] + 4;\n\n        // Extract mipmaps buffers\n\n        var width = dds.width;\n        var height = dds.height;\n\n        var faces = dds.isCubemap ? 6 : 1;\n\n        for ( var face = 0; face < faces; face ++ ) {\n\n            for ( var i = 0; i < dds.mipmapCount; i ++ ) {\n\n                if( isRGBAUncompressed ) {\n                    var byteArray = loadARGBMip( buffer, dataOffset, width, height );\n                    var dataLength = byteArray.length;\n                } else {\n                    var dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\n                    var byteArray = new Uint8Array( buffer, dataOffset, dataLength );\n                }\n\n                var mipmap = { \"data\": byteArray, \"width\": width, \"height\": height };\n                dds.mipmaps.push( mipmap );\n\n                dataOffset += dataLength;\n\n                width = Math.max( width * 0.5, 1 );\n                height = Math.max( height * 0.5, 1 );\n\n            }\n\n            width = dds.width;\n            height = dds.height;\n\n        }\n\n        return dds;\n\n    },\n\n    getNormalMap: function ( image, depth ) {\n\n        // Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/\n\n        var cross = function ( a, b ) {\n\n            return [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];\n\n        }\n\n        var subtract = function ( a, b ) {\n\n            return [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];\n\n        }\n\n        var normalize = function ( a ) {\n\n            var l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );\n            return [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];\n\n        }\n\n        depth = depth | 1;\n\n        var width = image.width;\n        var height = image.height;\n\n        var canvas = document.createElement( 'canvas' );\n        canvas.width = width;\n        canvas.height = height;\n\n        var context = canvas.getContext( '2d' );\n        context.drawImage( image, 0, 0 );\n\n        var data = context.getImageData( 0, 0, width, height ).data;\n        var imageData = context.createImageData( width, height );\n        var output = imageData.data;\n\n        for ( var x = 0; x < width; x ++ ) {\n\n            for ( var y = 0; y < height; y ++ ) {\n\n                var ly = y - 1 < 0 ? 0 : y - 1;\n                var uy = y + 1 > height - 1 ? height - 1 : y + 1;\n                var lx = x - 1 < 0 ? 0 : x - 1;\n                var ux = x + 1 > width - 1 ? width - 1 : x + 1;\n\n                var points = [];\n                var origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];\n                points.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );\n                points.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );\n                points.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );\n                points.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );\n                points.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );\n                points.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );\n                points.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );\n                points.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );\n\n                var normals = [];\n                var num_points = points.length;\n\n                for ( var i = 0; i < num_points; i ++ ) {\n\n                    var v1 = points[ i ];\n                    var v2 = points[ ( i + 1 ) % num_points ];\n                    v1 = subtract( v1, origin );\n                    v2 = subtract( v2, origin );\n                    normals.push( normalize( cross( v1, v2 ) ) );\n\n                }\n\n                var normal = [ 0, 0, 0 ];\n\n                for ( var i = 0; i < normals.length; i ++ ) {\n\n                    normal[ 0 ] += normals[ i ][ 0 ];\n                    normal[ 1 ] += normals[ i ][ 1 ];\n                    normal[ 2 ] += normals[ i ][ 2 ];\n\n                }\n\n                normal[ 0 ] /= normals.length;\n                normal[ 1 ] /= normals.length;\n                normal[ 2 ] /= normals.length;\n\n                var idx = ( y * width + x ) * 4;\n\n                output[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;\n                output[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;\n                output[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;\n                output[ idx + 3 ] = 255;\n\n            }\n\n        }\n\n        context.putImageData( imageData, 0, 0 );\n\n        return canvas;\n\n    },\n\n    generateDataTexture: function ( width, height, color ) {\n\n        var size = width * height;\n        var data = new Uint8Array( 3 * size );\n\n        var r = Math.floor( color.r * 255 );\n        var g = Math.floor( color.g * 255 );\n        var b = Math.floor( color.b * 255 );\n\n        for ( var i = 0; i < size; i ++ ) {\n\n            data[ i * 3 ] \t  = r;\n            data[ i * 3 + 1 ] = g;\n            data[ i * 3 + 2 ] = b;\n\n        }\n\n        var texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );\n        texture.needsUpdate = true;\n\n        return texture;\n\n    }\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SceneUtils = {\n\n    createMultiMaterialObject: function ( geometry, materials ) {\n\n        var group = new THREE.Object3D();\n\n        for ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n            group.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\n        }\n\n        return group;\n\n    },\n\n    detach : function ( child, parent, scene ) {\n\n        child.applyMatrix( parent.matrixWorld );\n        parent.remove( child );\n        scene.add( child );\n\n    },\n\n    attach: function ( child, scene, parent ) {\n\n        var matrixWorldInverse = new THREE.Matrix4();\n        matrixWorldInverse.getInverse( parent.matrixWorld );\n        child.applyMatrix( matrixWorldInverse );\n\n        scene.remove( child );\n        parent.add( child );\n\n    }\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * For Text operations in three.js (See TextGeometry)\n *\n * It uses techniques used in:\n *\n * \ttypeface.js and canvastext\n * \t\tFor converting fonts and rendering with javascript\n *\t\thttp://typeface.neocracy.org\n *\n *\tTriangulation ported from AS3\n *\t\tSimple Polygon Triangulation\n *\t\thttp://actionsnippet.com/?p=1462\n *\n * \tA Method to triangulate shapes with holes\n *\t\thttp://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/\n *\n */\n\nTHREE.FontUtils = {\n\n    faces : {},\n\n    // Just for now. face[weight][style]\n\n    face : \"helvetiker\",\n    weight: \"normal\",\n    style : \"normal\",\n    size : 150,\n    divisions : 10,\n\n    getFace : function() {\n\n        return this.faces[ this.face ][ this.weight ][ this.style ];\n\n    },\n\n    loadFace : function( data ) {\n\n        var family = data.familyName.toLowerCase();\n\n        var ThreeFont = this;\n\n        ThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};\n\n        ThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};\n        ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\n\n        var face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\n\n        return data;\n\n    },\n\n    drawText : function( text ) {\n\n        var characterPts = [], allPts = [];\n\n        // RenderText\n\n        var i, p,\n            face = this.getFace(),\n            scale = this.size / face.resolution,\n            offset = 0,\n            chars = String( text ).split( '' ),\n            length = chars.length;\n\n        var fontPaths = [];\n\n        for ( i = 0; i < length; i ++ ) {\n\n            var path = new THREE.Path();\n\n            var ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );\n            offset += ret.offset;\n\n            fontPaths.push( ret.path );\n\n        }\n\n        // get the width\n\n        var width = offset / 2;\n        //\n        // for ( p = 0; p < allPts.length; p++ ) {\n        //\n        // \tallPts[ p ].x -= width;\n        //\n        // }\n\n        //var extract = this.extractPoints( allPts, characterPts );\n        //extract.contour = allPts;\n\n        //extract.paths = fontPaths;\n        //extract.offset = width;\n\n        return { paths : fontPaths, offset : width };\n\n    },\n\n\n\n\n    extractGlyphPoints : function( c, face, scale, offset, path ) {\n\n        var pts = [];\n\n        var i, i2, divisions,\n            outline, action, length,\n            scaleX, scaleY,\n            x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,\n            laste,\n            glyph = face.glyphs[ c ] || face.glyphs[ '?' ];\n\n        if ( !glyph ) return;\n\n        if ( glyph.o ) {\n\n            outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n            length = outline.length;\n\n            scaleX = scale;\n            scaleY = scale;\n\n            for ( i = 0; i < length; ) {\n\n                action = outline[ i ++ ];\n\n                //console.log( action );\n\n                switch( action ) {\n\n                    case 'm':\n\n                        // Move To\n\n                        x = outline[ i++ ] * scaleX + offset;\n                        y = outline[ i++ ] * scaleY;\n\n                        path.moveTo( x, y );\n                        break;\n\n                    case 'l':\n\n                        // Line To\n\n                        x = outline[ i++ ] * scaleX + offset;\n                        y = outline[ i++ ] * scaleY;\n                        path.lineTo(x,y);\n                        break;\n\n                    case 'q':\n\n                        // QuadraticCurveTo\n\n                        cpx  = outline[ i++ ] * scaleX + offset;\n                        cpy  = outline[ i++ ] * scaleY;\n                        cpx1 = outline[ i++ ] * scaleX + offset;\n                        cpy1 = outline[ i++ ] * scaleY;\n\n                        path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\n                        laste = pts[ pts.length - 1 ];\n\n                        if ( laste ) {\n\n                            cpx0 = laste.x;\n                            cpy0 = laste.y;\n\n                            for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\n\n                                var t = i2 / divisions;\n                                var tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\n                                var ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\n                            }\n\n                        }\n\n                        break;\n\n                    case 'b':\n\n                        // Cubic Bezier Curve\n\n                        cpx  = outline[ i++ ] *  scaleX + offset;\n                        cpy  = outline[ i++ ] *  scaleY;\n                        cpx1 = outline[ i++ ] *  scaleX + offset;\n                        cpy1 = outline[ i++ ] * -scaleY;\n                        cpx2 = outline[ i++ ] *  scaleX + offset;\n                        cpy2 = outline[ i++ ] * -scaleY;\n\n                        path.bezierCurveTo( cpx, cpy, cpx1, cpy1, cpx2, cpy2 );\n\n                        laste = pts[ pts.length - 1 ];\n\n                        if ( laste ) {\n\n                            cpx0 = laste.x;\n                            cpy0 = laste.y;\n\n                            for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\n\n                                var t = i2 / divisions;\n                                var tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\n                                var ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\n\n                            }\n\n                        }\n\n                        break;\n\n                }\n\n            }\n        }\n\n\n\n        return { offset: glyph.ha*scale, path:path};\n    }\n\n};\n\n\nTHREE.FontUtils.generateShapes = function( text, parameters ) {\n\n    // Parameters \n\n    parameters = parameters || {};\n\n    var size = parameters.size !== undefined ? parameters.size : 100;\n    var curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments: 4;\n\n    var font = parameters.font !== undefined ? parameters.font : \"helvetiker\";\n    var weight = parameters.weight !== undefined ? parameters.weight : \"normal\";\n    var style = parameters.style !== undefined ? parameters.style : \"normal\";\n\n    THREE.FontUtils.size = size;\n    THREE.FontUtils.divisions = curveSegments;\n\n    THREE.FontUtils.face = font;\n    THREE.FontUtils.weight = weight;\n    THREE.FontUtils.style = style;\n\n    // Get a Font data json object\n\n    var data = THREE.FontUtils.drawText( text );\n\n    var paths = data.paths;\n    var shapes = [];\n\n    for ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n        Array.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n    }\n\n    return shapes;\n\n};\n\n\n/**\n * This code is a quick port of code written in C++ which was submitted to\n * flipcode.com by John W. Ratcliff  // July 22, 2000\n * See original code and more information here:\n * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n *\n * ported to actionscript by Zevan Rosser\n * www.actionsnippet.com\n *\n * ported to javascript by Joshua Koo\n * http://www.lab4games.net/zz85/blog\n *\n */\n\n\n( function( namespace ) {\n\n    var EPSILON = 0.0000000001;\n\n    // takes in an contour array and returns\n\n    var process = function( contour, indices ) {\n\n        var n = contour.length;\n\n        if ( n < 3 ) return null;\n\n        var result = [],\n            verts = [],\n            vertIndices = [];\n\n        /* we want a counter-clockwise polygon in verts */\n\n        var u, v, w;\n\n        if ( area( contour ) > 0.0 ) {\n\n            for ( v = 0; v < n; v++ ) verts[ v ] = v;\n\n        } else {\n\n            for ( v = 0; v < n; v++ ) verts[ v ] = ( n - 1 ) - v;\n\n        }\n\n        var nv = n;\n\n        /*  remove nv - 2 vertices, creating 1 triangle every time */\n\n        var count = 2 * nv;   /* error detection */\n\n        for( v = nv - 1; nv > 2; ) {\n\n            /* if we loop, it is probably a non-simple polygon */\n\n            if ( ( count-- ) <= 0 ) {\n\n                //** Triangulate: ERROR - probable bad polygon!\n\n                //throw ( \"Warning, unable to triangulate polygon!\" );\n                //return null;\n                // Sometimes warning is fine, especially polygons are triangulated in reverse.\n                console.log( \"Warning, unable to triangulate polygon!\" );\n\n                if ( indices ) return vertIndices;\n                return result;\n\n            }\n\n            /* three consecutive vertices in current polygon, <u,v,w> */\n\n            u = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n            v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n            w = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n            if ( snip( contour, u, v, w, nv, verts ) ) {\n\n                var a, b, c, s, t;\n\n                /* true names of the vertices */\n\n                a = verts[ u ];\n                b = verts[ v ];\n                c = verts[ w ];\n\n                /* output Triangle */\n\n                result.push( [ contour[ a ],\n                    contour[ b ],\n                    contour[ c ] ] );\n\n\n                vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n                /* remove v from the remaining polygon */\n\n                for( s = v, t = v + 1; t < nv; s++, t++ ) {\n\n                    verts[ s ] = verts[ t ];\n\n                }\n\n                nv--;\n\n                /* reset error detection counter */\n\n                count = 2 * nv;\n\n            }\n\n        }\n\n        if ( indices ) return vertIndices;\n        return result;\n\n    };\n\n    // calculate area of the contour polygon\n\n    var area = function ( contour ) {\n\n        var n = contour.length;\n        var a = 0.0;\n\n        for( var p = n - 1, q = 0; q < n; p = q++ ) {\n\n            a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n        }\n\n        return a * 0.5;\n\n    };\n\n    var snip = function ( contour, u, v, w, n, verts ) {\n\n        var p;\n        var ax, ay, bx, by;\n        var cx, cy, px, py;\n\n        ax = contour[ verts[ u ] ].x;\n        ay = contour[ verts[ u ] ].y;\n\n        bx = contour[ verts[ v ] ].x;\n        by = contour[ verts[ v ] ].y;\n\n        cx = contour[ verts[ w ] ].x;\n        cy = contour[ verts[ w ] ].y;\n\n        if ( EPSILON > (((bx-ax)*(cy-ay)) - ((by-ay)*(cx-ax))) ) return false;\n\n        var aX, aY, bX, bY, cX, cY;\n        var apx, apy, bpx, bpy, cpx, cpy;\n        var cCROSSap, bCROSScp, aCROSSbp;\n\n        aX = cx - bx;  aY = cy - by;\n        bX = ax - cx;  bY = ay - cy;\n        cX = bx - ax;  cY = by - ay;\n\n        for ( p = 0; p < n; p++ ) {\n\n            if( (p === u) || (p === v) || (p === w) ) continue;\n\n            px = contour[ verts[ p ] ].x\n            py = contour[ verts[ p ] ].y\n\n            apx = px - ax;  apy = py - ay;\n            bpx = px - bx;  bpy = py - by;\n            cpx = px - cx;  cpy = py - cy;\n\n            // see if p is inside triangle abc\n\n            aCROSSbp = aX*bpy - aY*bpx;\n            cCROSSap = cX*apy - cY*apx;\n            bCROSScp = bX*cpy - bY*cpx;\n\n            if ( (aCROSSbp >= -EPSILON) && (bCROSScp >= -EPSILON) && (cCROSSap >= -EPSILON) ) return false;\n\n        }\n\n        return true;\n\n    };\n\n\n    namespace.Triangulate = process;\n    namespace.Triangulate.area = area;\n\n    return namespace;\n\n})(THREE.FontUtils);\n\n// To use the typeface.js face files, hook up the API\nself._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };\nTHREE.typeface_js = self._typeface_js;\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of Curve methods\n * .getPoint(t), getTangent(t)\n * .getPointAt(u), getTagentAt(u)\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following classes subclasses THREE.Curve:\n *\n * -- 2d classes --\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.CubicBezierCurve\n * THREE.SplineCurve\n * THREE.ArcCurve\n * THREE.EllipseCurve\n *\n * -- 3d classes --\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n * THREE.CubicBezierCurve3\n * THREE.SplineCurve3\n * THREE.ClosedSplineCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nTHREE.Curve = function () {\n\n};\n\n// Virtual base class method to overwrite and implement in subclasses\n//\t- t [0 .. 1]\n\nTHREE.Curve.prototype.getPoint = function ( t ) {\n\n    console.log( \"Warning, getPoint() not implemented!\" );\n    return null;\n\n};\n\n// Get point at relative position in curve according to arc length\n// - u [0 .. 1]\n\nTHREE.Curve.prototype.getPointAt = function ( u ) {\n\n    var t = this.getUtoTmapping( u );\n    return this.getPoint( t );\n\n};\n\n// Get sequence of points using getPoint( t )\n\nTHREE.Curve.prototype.getPoints = function ( divisions ) {\n\n    if ( !divisions ) divisions = 5;\n\n    var d, pts = [];\n\n    for ( d = 0; d <= divisions; d ++ ) {\n\n        pts.push( this.getPoint( d / divisions ) );\n\n    }\n\n    return pts;\n\n};\n\n// Get sequence of points using getPointAt( u )\n\nTHREE.Curve.prototype.getSpacedPoints = function ( divisions ) {\n\n    if ( !divisions ) divisions = 5;\n\n    var d, pts = [];\n\n    for ( d = 0; d <= divisions; d ++ ) {\n\n        pts.push( this.getPointAt( d / divisions ) );\n\n    }\n\n    return pts;\n\n};\n\n// Get total curve arc length\n\nTHREE.Curve.prototype.getLength = function () {\n\n    var lengths = this.getLengths();\n    return lengths[ lengths.length - 1 ];\n\n};\n\n// Get list of cumulative segment lengths\n\nTHREE.Curve.prototype.getLengths = function ( divisions ) {\n\n    if ( !divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;\n\n    if ( this.cacheArcLengths\n        && ( this.cacheArcLengths.length == divisions + 1 )\n        && !this.needsUpdate) {\n\n        //console.log( \"cached\", this.cacheArcLengths );\n        return this.cacheArcLengths;\n\n    }\n\n    this.needsUpdate = false;\n\n    var cache = [];\n    var current, last = this.getPoint( 0 );\n    var p, sum = 0;\n\n    cache.push( 0 );\n\n    for ( p = 1; p <= divisions; p ++ ) {\n\n        current = this.getPoint ( p / divisions );\n        sum += current.distanceTo( last );\n        cache.push( sum );\n        last = current;\n\n    }\n\n    this.cacheArcLengths = cache;\n\n    return cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n};\n\n\nTHREE.Curve.prototype.updateArcLengths = function() {\n    this.needsUpdate = true;\n    this.getLengths();\n};\n\n// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance\n\nTHREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {\n\n    var arcLengths = this.getLengths();\n\n    var i = 0, il = arcLengths.length;\n\n    var targetArcLength; // The targeted u distance value to get\n\n    if ( distance ) {\n\n        targetArcLength = distance;\n\n    } else {\n\n        targetArcLength = u * arcLengths[ il - 1 ];\n\n    }\n\n    //var time = Date.now();\n\n    // binary search for the index with largest value smaller than target u distance\n\n    var low = 0, high = il - 1, comparison;\n\n    while ( low <= high ) {\n\n        i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n        comparison = arcLengths[ i ] - targetArcLength;\n\n        if ( comparison < 0 ) {\n\n            low = i + 1;\n            continue;\n\n        } else if ( comparison > 0 ) {\n\n            high = i - 1;\n            continue;\n\n        } else {\n\n            high = i;\n            break;\n\n            // DONE\n\n        }\n\n    }\n\n    i = high;\n\n    //console.log('b' , i, low, high, Date.now()- time);\n\n    if ( arcLengths[ i ] == targetArcLength ) {\n\n        var t = i / ( il - 1 );\n        return t;\n\n    }\n\n    // we could get finer grain at lengths, or use simple interpolatation between two points\n\n    var lengthBefore = arcLengths[ i ];\n    var lengthAfter = arcLengths[ i + 1 ];\n\n    var segmentLength = lengthAfter - lengthBefore;\n\n    // determine where we are between the 'before' and 'after' points\n\n    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n    // add that fractional amount to t\n\n    var t = ( i + segmentFraction ) / ( il -1 );\n\n    return t;\n\n};\n\n// Returns a unit vector tangent at t\n// In case any sub curve does not implement its tangent derivation,\n// 2 points a small delta apart will be used to find its gradient\n// which seems to give a reasonable approximation\n\nTHREE.Curve.prototype.getTangent = function( t ) {\n\n    var delta = 0.0001;\n    var t1 = t - delta;\n    var t2 = t + delta;\n\n    // Capping in case of danger\n\n    if ( t1 < 0 ) t1 = 0;\n    if ( t2 > 1 ) t2 = 1;\n\n    var pt1 = this.getPoint( t1 );\n    var pt2 = this.getPoint( t2 );\n\n    var vec = pt2.clone().sub(pt1);\n    return vec.normalize();\n\n};\n\n\nTHREE.Curve.prototype.getTangentAt = function ( u ) {\n\n    var t = this.getUtoTmapping( u );\n    return this.getTangent( t );\n\n};\n\n\n\n\n\n/**************************************************************\n *\tUtils\n **************************************************************/\n\nTHREE.Curve.Utils = {\n\n    tangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n        return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n    },\n\n    // Puay Bing, thanks for helping with this derivative!\n\n    tangentCubicBezier: function (t, p0, p1, p2, p3 ) {\n\n        return -3 * p0 * (1 - t) * (1 - t)  +\n            3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +\n            6 * t *  p2 * (1-t) - 3 * t * t * p2 +\n            3 * t * t * p3;\n    },\n\n\n    tangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n        // To check if my formulas are correct\n\n        var h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n        var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n        var h01 = -6 * t * t + 6 * t; \t// − 2t3 + 3t2\n        var h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n        return h00 + h10 + h01 + h11;\n\n    },\n\n    // Catmull-Rom\n\n    interpolate: function( p0, p1, p2, p3, t ) {\n\n        var v0 = ( p2 - p0 ) * 0.5;\n        var v1 = ( p3 - p1 ) * 0.5;\n        var t2 = t * t;\n        var t3 = t * t2;\n        return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n    }\n\n};\n\n\n// TODO: Transformation for Curves?\n\n/**************************************************************\n *\t3D Curves\n **************************************************************/\n\n// A Factory method for creating new curve subclasses\n\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\n    constructor.prototype = Object.create( THREE.Curve.prototype );\n    constructor.prototype.getPoint = getPointFunc;\n\n    return constructor;\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nTHREE.CurvePath = function () {\n\n    this.curves = [];\n    this.bends = [];\n\n    this.autoClose = false; // Automatically closes the path\n};\n\nTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.CurvePath.prototype.add = function ( curve ) {\n\n    this.curves.push( curve );\n\n};\n\nTHREE.CurvePath.prototype.checkConnection = function() {\n    // TODO\n    // If the ending of curve is not connected to the starting\n    // or the next curve, then, this is not a real path\n};\n\nTHREE.CurvePath.prototype.closePath = function() {\n    // TODO Test\n    // and verify for vector3 (needs to implement equals)\n    // Add a line curve if start and end of lines are not connected\n    var startPoint = this.curves[0].getPoint(0);\n    var endPoint = this.curves[this.curves.length-1].getPoint(1);\n\n    if (!startPoint.equals(endPoint)) {\n        this.curves.push( new THREE.LineCurve(endPoint, startPoint) );\n    }\n\n};\n\n// To get accurate point with reference to\n// entire path distance at time t,\n// following has to be done:\n\n// 1. Length of each sub path have to be known\n// 2. Locate and identify type of curve\n// 3. Get t for the curve\n// 4. Return curve.getPointAt(t')\n\nTHREE.CurvePath.prototype.getPoint = function( t ) {\n\n    var d = t * this.getLength();\n    var curveLengths = this.getCurveLengths();\n    var i = 0, diff, curve;\n\n    // To think about boundaries points.\n\n    while ( i < curveLengths.length ) {\n\n        if ( curveLengths[ i ] >= d ) {\n\n            diff = curveLengths[ i ] - d;\n            curve = this.curves[ i ];\n\n            var u = 1 - diff / curve.getLength();\n\n            return curve.getPointAt( u );\n\n            break;\n        }\n\n        i ++;\n\n    }\n\n    return null;\n\n    // loop where sum != 0, sum > d , sum+1 <d\n\n};\n\n/*\n THREE.CurvePath.prototype.getTangent = function( t ) {\n };*/\n\n\n// We cannot use the default THREE.Curve getPoint() with getLength() because in\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n// getPoint() depends on getLength\n\nTHREE.CurvePath.prototype.getLength = function() {\n\n    var lens = this.getCurveLengths();\n    return lens[ lens.length - 1 ];\n\n};\n\n// Compute lengths and cache them\n// We cannot overwrite getLengths() because UtoT mapping uses it.\n\nTHREE.CurvePath.prototype.getCurveLengths = function() {\n\n    // We use cache values if curves and cache array are same length\n\n    if ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {\n\n        return this.cacheLengths;\n\n    };\n\n    // Get length of subsurve\n    // Push sums into cached array\n\n    var lengths = [], sums = 0;\n    var i, il = this.curves.length;\n\n    for ( i = 0; i < il; i ++ ) {\n\n        sums += this.curves[ i ].getLength();\n        lengths.push( sums );\n\n    }\n\n    this.cacheLengths = lengths;\n\n    return lengths;\n\n};\n\n\n\n// Returns min and max coordinates, as well as centroid\n\nTHREE.CurvePath.prototype.getBoundingBox = function () {\n\n    var points = this.getPoints();\n\n    var maxX, maxY, maxZ;\n    var minX, minY, minZ;\n\n    maxX = maxY = Number.NEGATIVE_INFINITY;\n    minX = minY = Number.POSITIVE_INFINITY;\n\n    var p, i, il, sum;\n\n    var v3 = points[0] instanceof THREE.Vector3;\n\n    sum = v3 ? new THREE.Vector3() : new THREE.Vector2();\n\n    for ( i = 0, il = points.length; i < il; i ++ ) {\n\n        p = points[ i ];\n\n        if ( p.x > maxX ) maxX = p.x;\n        else if ( p.x < minX ) minX = p.x;\n\n        if ( p.y > maxY ) maxY = p.y;\n        else if ( p.y < minY ) minY = p.y;\n\n        if ( v3 ) {\n\n            if ( p.z > maxZ ) maxZ = p.z;\n            else if ( p.z < minZ ) minZ = p.z;\n\n        }\n\n        sum.add( p );\n\n    }\n\n    var ret = {\n\n        minX: minX,\n        minY: minY,\n        maxX: maxX,\n        maxY: maxY,\n        centroid: sum.divideScalar( il )\n\n    };\n\n    if ( v3 ) {\n\n        ret.maxZ = maxZ;\n        ret.minZ = minZ;\n\n    }\n\n    return ret;\n\n};\n\n/**************************************************************\n *\tCreate Geometries Helpers\n **************************************************************/\n\n/// Generate geometry from path points (for Line or ParticleSystem objects)\n\nTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\n\n    var pts = this.getPoints( divisions, true );\n    return this.createGeometry( pts );\n\n};\n\n// Generate geometry from equidistance sampling along the path\n\nTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\n\n    var pts = this.getSpacedPoints( divisions, true );\n    return this.createGeometry( pts );\n\n};\n\nTHREE.CurvePath.prototype.createGeometry = function( points ) {\n\n    var geometry = new THREE.Geometry();\n\n    for ( var i = 0; i < points.length; i ++ ) {\n\n        geometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );\n\n    }\n\n    return geometry;\n\n};\n\n\n/**************************************************************\n *\tBend / Wrap Helper Methods\n **************************************************************/\n\n// Wrap path / Bend modifiers?\n\nTHREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {\n\n    this.bends.push( bendpath );\n\n};\n\nTHREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {\n\n    var oldPts = this.getPoints( segments ); // getPoints getSpacedPoints\n    var i, il;\n\n    if ( !bends ) {\n\n        bends = this.bends;\n\n    }\n\n    for ( i = 0, il = bends.length; i < il; i ++ ) {\n\n        oldPts = this.getWrapPoints( oldPts, bends[ i ] );\n\n    }\n\n    return oldPts;\n\n};\n\nTHREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {\n\n    var oldPts = this.getSpacedPoints( segments );\n\n    var i, il;\n\n    if ( !bends ) {\n\n        bends = this.bends;\n\n    }\n\n    for ( i = 0, il = bends.length; i < il; i ++ ) {\n\n        oldPts = this.getWrapPoints( oldPts, bends[ i ] );\n\n    }\n\n    return oldPts;\n\n};\n\n// This returns getPoints() bend/wrapped around the contour of a path.\n// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html\n\nTHREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {\n\n    var bounds = this.getBoundingBox();\n\n    var i, il, p, oldX, oldY, xNorm;\n\n    for ( i = 0, il = oldPts.length; i < il; i ++ ) {\n\n        p = oldPts[ i ];\n\n        oldX = p.x;\n        oldY = p.y;\n\n        xNorm = oldX / bounds.maxX;\n\n        // If using actual distance, for length > path, requires line extrusions\n        //xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance\n\n        xNorm = path.getUtoTmapping( xNorm, oldX );\n\n        // check for out of bounds?\n\n        var pathPt = path.getPoint( xNorm );\n        var normal = path.getNormalVector( xNorm ).multiplyScalar( oldY );\n\n        p.x = pathPt.x + normal.x;\n        p.y = pathPt.y + normal.y;\n\n    }\n\n    return oldPts;\n\n};\n\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Gyroscope = function () {\n\n    THREE.Object3D.call( this );\n\n};\n\nTHREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Gyroscope.prototype.updateMatrixWorld = function ( force ) {\n\n    this.matrixAutoUpdate && this.updateMatrix();\n\n    // update matrixWorld\n\n    if ( this.matrixWorldNeedsUpdate || force ) {\n\n        if ( this.parent ) {\n\n            this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n            this.matrixWorld.decompose( this.translationWorld, this.quaternionWorld, this.scaleWorld );\n            this.matrix.decompose( this.translationObject, this.quaternionObject, this.scaleObject );\n\n            this.matrixWorld.compose( this.translationWorld, this.quaternionObject, this.scaleWorld );\n\n\n        } else {\n\n            this.matrixWorld.copy( this.matrix );\n\n        }\n\n\n        this.matrixWorldNeedsUpdate = false;\n\n        force = true;\n\n    }\n\n    // update children\n\n    for ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n        this.children[ i ].updateMatrixWorld( force );\n\n    }\n\n};\n\nTHREE.Gyroscope.prototype.translationWorld = new THREE.Vector3();\nTHREE.Gyroscope.prototype.translationObject = new THREE.Vector3();\nTHREE.Gyroscope.prototype.quaternionWorld = new THREE.Quaternion();\nTHREE.Gyroscope.prototype.quaternionObject = new THREE.Quaternion();\nTHREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3();\nTHREE.Gyroscope.prototype.scaleObject = new THREE.Vector3();\n\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n *\n **/\n\nTHREE.Path = function ( points ) {\n\n    THREE.CurvePath.call(this);\n\n    this.actions = [];\n\n    if ( points ) {\n\n        this.fromPoints( points );\n\n    }\n\n};\n\nTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\n\nTHREE.PathActions = {\n\n    MOVE_TO: 'moveTo',\n    LINE_TO: 'lineTo',\n    QUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve\n    BEZIER_CURVE_TO: 'bezierCurveTo', \t\t// Bezier cubic curve\n    CSPLINE_THRU: 'splineThru',\t\t\t\t// Catmull-rom spline\n    ARC: 'arc',\t\t\t\t\t\t\t\t// Circle\n    ELLIPSE: 'ellipse'\n};\n\n// TODO Clean up PATH API\n\n// Create path using straight lines to connect all points\n// - vectors: array of Vector2\n\nTHREE.Path.prototype.fromPoints = function ( vectors ) {\n\n    this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n    for ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {\n\n        this.lineTo( vectors[ v ].x, vectors[ v ].y );\n\n    };\n\n};\n\n// startPath() endPath()?\n\nTHREE.Path.prototype.moveTo = function ( x, y ) {\n\n    var args = Array.prototype.slice.call( arguments );\n    this.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );\n\n};\n\nTHREE.Path.prototype.lineTo = function ( x, y ) {\n\n    var args = Array.prototype.slice.call( arguments );\n\n    var lastargs = this.actions[ this.actions.length - 1 ].args;\n\n    var x0 = lastargs[ lastargs.length - 2 ];\n    var y0 = lastargs[ lastargs.length - 1 ];\n\n    var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\n    this.curves.push( curve );\n\n    this.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );\n\n};\n\nTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\n\n    var args = Array.prototype.slice.call( arguments );\n\n    var lastargs = this.actions[ this.actions.length - 1 ].args;\n\n    var x0 = lastargs[ lastargs.length - 2 ];\n    var y0 = lastargs[ lastargs.length - 1 ];\n\n    var curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),\n        new THREE.Vector2( aCPx, aCPy ),\n        new THREE.Vector2( aX, aY ) );\n    this.curves.push( curve );\n\n    this.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );\n\n};\n\nTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,\n                                               aCP2x, aCP2y,\n                                               aX, aY ) {\n\n    var args = Array.prototype.slice.call( arguments );\n\n    var lastargs = this.actions[ this.actions.length - 1 ].args;\n\n    var x0 = lastargs[ lastargs.length - 2 ];\n    var y0 = lastargs[ lastargs.length - 1 ];\n\n    var curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),\n        new THREE.Vector2( aCP1x, aCP1y ),\n        new THREE.Vector2( aCP2x, aCP2y ),\n        new THREE.Vector2( aX, aY ) );\n    this.curves.push( curve );\n\n    this.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );\n\n};\n\nTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\n\n    var args = Array.prototype.slice.call( arguments );\n    var lastargs = this.actions[ this.actions.length - 1 ].args;\n\n    var x0 = lastargs[ lastargs.length - 2 ];\n    var y0 = lastargs[ lastargs.length - 1 ];\n//---\n    var npts = [ new THREE.Vector2( x0, y0 ) ];\n    Array.prototype.push.apply( npts, pts );\n\n    var curve = new THREE.SplineCurve( npts );\n    this.curves.push( curve );\n\n    this.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );\n\n};\n\n// FUTURE: Change the API or follow canvas API?\n\nTHREE.Path.prototype.arc = function ( aX, aY, aRadius,\n                                      aStartAngle, aEndAngle, aClockwise ) {\n\n    var lastargs = this.actions[ this.actions.length - 1].args;\n    var x0 = lastargs[ lastargs.length - 2 ];\n    var y0 = lastargs[ lastargs.length - 1 ];\n\n    this.absarc(aX + x0, aY + y0, aRadius,\n        aStartAngle, aEndAngle, aClockwise );\n\n};\n\nTHREE.Path.prototype.absarc = function ( aX, aY, aRadius,\n                                         aStartAngle, aEndAngle, aClockwise ) {\n    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n};\n\nTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,\n                                          aStartAngle, aEndAngle, aClockwise ) {\n\n    var lastargs = this.actions[ this.actions.length - 1].args;\n    var x0 = lastargs[ lastargs.length - 2 ];\n    var y0 = lastargs[ lastargs.length - 1 ];\n\n    this.absellipse(aX + x0, aY + y0, xRadius, yRadius,\n        aStartAngle, aEndAngle, aClockwise );\n\n};\n\n\nTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,\n                                             aStartAngle, aEndAngle, aClockwise ) {\n\n    var args = Array.prototype.slice.call( arguments );\n    var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,\n        aStartAngle, aEndAngle, aClockwise );\n    this.curves.push( curve );\n\n    var lastPoint = curve.getPoint(1);\n    args.push(lastPoint.x);\n    args.push(lastPoint.y);\n\n    this.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );\n\n};\n\nTHREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {\n\n    if ( ! divisions ) divisions = 40;\n\n    var points = [];\n\n    for ( var i = 0; i < divisions; i ++ ) {\n\n        points.push( this.getPoint( i / divisions ) );\n\n        //if( !this.getPoint( i / divisions ) ) throw \"DIE\";\n\n    }\n\n    // if ( closedPath ) {\n    //\n    // \tpoints.push( points[ 0 ] );\n    //\n    // }\n\n    return points;\n\n};\n\n/* Return an array of vectors based on contour of the path */\n\nTHREE.Path.prototype.getPoints = function( divisions, closedPath ) {\n\n    if (this.useSpacedPoints) {\n        console.log('tata');\n        return this.getSpacedPoints( divisions, closedPath );\n    }\n\n    divisions = divisions || 12;\n\n    var points = [];\n\n    var i, il, item, action, args;\n    var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\n        laste, j,\n        t, tx, ty;\n\n    for ( i = 0, il = this.actions.length; i < il; i ++ ) {\n\n        item = this.actions[ i ];\n\n        action = item.action;\n        args = item.args;\n\n        switch( action ) {\n\n            case THREE.PathActions.MOVE_TO:\n\n                points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n                break;\n\n            case THREE.PathActions.LINE_TO:\n\n                points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n                break;\n\n            case THREE.PathActions.QUADRATIC_CURVE_TO:\n\n                cpx  = args[ 2 ];\n                cpy  = args[ 3 ];\n\n                cpx1 = args[ 0 ];\n                cpy1 = args[ 1 ];\n\n                if ( points.length > 0 ) {\n\n                    laste = points[ points.length - 1 ];\n\n                    cpx0 = laste.x;\n                    cpy0 = laste.y;\n\n                } else {\n\n                    laste = this.actions[ i - 1 ].args;\n\n                    cpx0 = laste[ laste.length - 2 ];\n                    cpy0 = laste[ laste.length - 1 ];\n\n                }\n\n                for ( j = 1; j <= divisions; j ++ ) {\n\n                    t = j / divisions;\n\n                    tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\n                    ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\n\n                    points.push( new THREE.Vector2( tx, ty ) );\n\n                }\n\n                break;\n\n            case THREE.PathActions.BEZIER_CURVE_TO:\n\n                cpx  = args[ 4 ];\n                cpy  = args[ 5 ];\n\n                cpx1 = args[ 0 ];\n                cpy1 = args[ 1 ];\n\n                cpx2 = args[ 2 ];\n                cpy2 = args[ 3 ];\n\n                if ( points.length > 0 ) {\n\n                    laste = points[ points.length - 1 ];\n\n                    cpx0 = laste.x;\n                    cpy0 = laste.y;\n\n                } else {\n\n                    laste = this.actions[ i - 1 ].args;\n\n                    cpx0 = laste[ laste.length - 2 ];\n                    cpy0 = laste[ laste.length - 1 ];\n\n                }\n\n\n                for ( j = 1; j <= divisions; j ++ ) {\n\n                    t = j / divisions;\n\n                    tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\n                    ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\n\n                    points.push( new THREE.Vector2( tx, ty ) );\n\n                }\n\n                break;\n\n            case THREE.PathActions.CSPLINE_THRU:\n\n                laste = this.actions[ i - 1 ].args;\n\n                var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\n                var spts = [ last ];\n\n                var n = divisions * args[ 0 ].length;\n\n                spts = spts.concat( args[ 0 ] );\n\n                var spline = new THREE.SplineCurve( spts );\n\n                for ( j = 1; j <= n; j ++ ) {\n\n                    points.push( spline.getPointAt( j / n ) ) ;\n\n                }\n\n                break;\n\n            case THREE.PathActions.ARC:\n\n                var aX = args[ 0 ], aY = args[ 1 ],\n                    aRadius = args[ 2 ],\n                    aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\n                    aClockwise = !!args[ 5 ];\n\n                var deltaAngle = aEndAngle - aStartAngle;\n                var angle;\n                var tdivisions = divisions * 2;\n\n                for ( j = 1; j <= tdivisions; j ++ ) {\n\n                    t = j / tdivisions;\n\n                    if ( ! aClockwise ) {\n\n                        t = 1 - t;\n\n                    }\n\n                    angle = aStartAngle + t * deltaAngle;\n\n                    tx = aX + aRadius * Math.cos( angle );\n                    ty = aY + aRadius * Math.sin( angle );\n\n                    //console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n                    points.push( new THREE.Vector2( tx, ty ) );\n\n                }\n\n                //console.log(points);\n\n                break;\n\n            case THREE.PathActions.ELLIPSE:\n\n                var aX = args[ 0 ], aY = args[ 1 ],\n                    xRadius = args[ 2 ],\n                    yRadius = args[ 3 ],\n                    aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\n                    aClockwise = !!args[ 6 ];\n\n\n                var deltaAngle = aEndAngle - aStartAngle;\n                var angle;\n                var tdivisions = divisions * 2;\n\n                for ( j = 1; j <= tdivisions; j ++ ) {\n\n                    t = j / tdivisions;\n\n                    if ( ! aClockwise ) {\n\n                        t = 1 - t;\n\n                    }\n\n                    angle = aStartAngle + t * deltaAngle;\n\n                    tx = aX + xRadius * Math.cos( angle );\n                    ty = aY + yRadius * Math.sin( angle );\n\n                    //console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n                    points.push( new THREE.Vector2( tx, ty ) );\n\n                }\n\n                //console.log(points);\n\n                break;\n\n        } // end switch\n\n    }\n\n\n\n    // Normalize to remove the closing point by default.\n    var lastPoint = points[ points.length - 1];\n    var EPSILON = 0.0000000001;\n    if ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&\n        Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)\n        points.splice( points.length - 1, 1);\n    if ( closedPath ) {\n\n        points.push( points[ 0 ] );\n\n    }\n\n    return points;\n\n};\n\n// Breaks path into shapes\n\nTHREE.Path.prototype.toShapes = function( isCCW ) {\n\n    var i, il, item, action, args;\n\n    var subPaths = [], lastPath = new THREE.Path();\n\n    for ( i = 0, il = this.actions.length; i < il; i ++ ) {\n\n        item = this.actions[ i ];\n\n        args = item.args;\n        action = item.action;\n\n        if ( action == THREE.PathActions.MOVE_TO ) {\n\n            if ( lastPath.actions.length != 0 ) {\n\n                subPaths.push( lastPath );\n                lastPath = new THREE.Path();\n\n            }\n\n        }\n\n        lastPath[ action ].apply( lastPath, args );\n\n    }\n\n    if ( lastPath.actions.length != 0 ) {\n\n        subPaths.push( lastPath );\n\n    }\n\n    // console.log(subPaths);\n\n    if ( subPaths.length == 0 ) return [];\n\n    var solid, tmpPath, tmpShape, shapes = [];\n\n    if ( subPaths.length == 1) {\n\n        tmpPath = subPaths[0];\n        tmpShape = new THREE.Shape();\n        tmpShape.actions = tmpPath.actions;\n        tmpShape.curves = tmpPath.curves;\n        shapes.push( tmpShape );\n        return shapes;\n\n    }\n\n    var holesFirst = !THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );\n    holesFirst = isCCW ? !holesFirst : holesFirst;\n\n    // console.log(\"Holes first\", holesFirst);\n\n    if ( holesFirst ) {\n\n        tmpShape = new THREE.Shape();\n\n        for ( i = 0, il = subPaths.length; i < il; i ++ ) {\n\n            tmpPath = subPaths[ i ];\n            solid = THREE.Shape.Utils.isClockWise( tmpPath.getPoints() );\n            solid = isCCW ? !solid : solid;\n\n            if ( solid ) {\n\n                tmpShape.actions = tmpPath.actions;\n                tmpShape.curves = tmpPath.curves;\n\n                shapes.push( tmpShape );\n                tmpShape = new THREE.Shape();\n\n                //console.log('cw', i);\n\n            } else {\n\n                tmpShape.holes.push( tmpPath );\n\n                //console.log('ccw', i);\n\n            }\n\n        }\n\n    } else {\n\n        // Shapes first\n        tmpShape = undefined;\n\n        for ( i = 0, il = subPaths.length; i < il; i ++ ) {\n\n            tmpPath = subPaths[ i ];\n            solid = THREE.Shape.Utils.isClockWise( tmpPath.getPoints() );\n            solid = isCCW ? !solid : solid;\n\n            if ( solid ) {\n\n                if ( tmpShape ) shapes.push( tmpShape );\n\n                tmpShape = new THREE.Shape();\n                tmpShape.actions = tmpPath.actions;\n                tmpShape.curves = tmpPath.curves;\n\n            } else {\n\n                tmpShape.holes.push( tmpPath );\n\n            }\n\n        }\n\n        shapes.push( tmpShape );\n\n    }\n\n    //console.log(\"shape\", shapes);\n\n    return shapes;\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nTHREE.Shape = function () {\n\n    THREE.Path.apply( this, arguments );\n    this.holes = [];\n\n};\n\nTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\n\n// Convenience method to return ExtrudeGeometry\n\nTHREE.Shape.prototype.extrude = function ( options ) {\n\n    var extruded = new THREE.ExtrudeGeometry( this, options );\n    return extruded;\n\n};\n\n// Convenience method to return ShapeGeometry\n\nTHREE.Shape.prototype.makeGeometry = function ( options ) {\n\n    var geometry = new THREE.ShapeGeometry( this, options );\n    return geometry;\n\n};\n\n// Get points of holes\n\nTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\n\n    var i, il = this.holes.length, holesPts = [];\n\n    for ( i = 0; i < il; i ++ ) {\n\n        holesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );\n\n    }\n\n    return holesPts;\n\n};\n\n// Get points of holes (spaced by regular distance)\n\nTHREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {\n\n    var i, il = this.holes.length, holesPts = [];\n\n    for ( i = 0; i < il; i ++ ) {\n\n        holesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );\n\n    }\n\n    return holesPts;\n\n};\n\n\n// Get points of shape and holes (keypoints based on segments parameter)\n\nTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\n\n    return {\n\n        shape: this.getTransformedPoints( divisions ),\n        holes: this.getPointsHoles( divisions )\n\n    };\n\n};\n\nTHREE.Shape.prototype.extractPoints = function ( divisions ) {\n\n    if (this.useSpacedPoints) {\n        return this.extractAllSpacedPoints(divisions);\n    }\n\n    return this.extractAllPoints(divisions);\n\n};\n\n//\n// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {\n//\n// \treturn {\n//\n// \t\tshape: this.transform( bend, divisions ),\n// \t\tholes: this.getPointsHoles( divisions, bend )\n//\n// \t};\n//\n// };\n\n// Get points of shape and holes (spaced by regular distance)\n\nTHREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {\n\n    return {\n\n        shape: this.getTransformedSpacedPoints( divisions ),\n        holes: this.getSpacedPointsHoles( divisions )\n\n    };\n\n};\n\n/**************************************************************\n *\tUtils\n **************************************************************/\n\nTHREE.Shape.Utils = {\n\n    /*\n     contour - array of vector2 for contour\n     holes   - array of array of vector2\n     */\n\n    removeHoles: function ( contour, holes ) {\n\n        var shape = contour.concat(); // work on this shape\n        var allpoints = shape.concat();\n\n        /* For each isolated shape, find the closest points and break to the hole to allow triangulation */\n\n\n        var prevShapeVert, nextShapeVert,\n            prevHoleVert, nextHoleVert,\n            holeIndex, shapeIndex,\n            shapeId, shapeGroup,\n            h, h2,\n            hole, shortest, d,\n            p, pts1, pts2,\n            tmpShape1, tmpShape2,\n            tmpHole1, tmpHole2,\n            verts = [];\n\n        for ( h = 0; h < holes.length; h ++ ) {\n\n            hole = holes[ h ];\n\n            /*\n             shapeholes[ h ].concat(); // preserves original\n             holes.push( hole );\n             */\n\n            Array.prototype.push.apply( allpoints, hole );\n\n            shortest = Number.POSITIVE_INFINITY;\n\n\n            // Find the shortest pair of pts between shape and hole\n\n            // Note: Actually, I'm not sure now if we could optimize this to be faster than O(m*n)\n            // Using distanceToSquared() intead of distanceTo() should speed a little\n            // since running square roots operations are reduced.\n\n            for ( h2 = 0; h2 < hole.length; h2 ++ ) {\n\n                pts1 = hole[ h2 ];\n                var dist = [];\n\n                for ( p = 0; p < shape.length; p++ ) {\n\n                    pts2 = shape[ p ];\n                    d = pts1.distanceToSquared( pts2 );\n                    dist.push( d );\n\n                    if ( d < shortest ) {\n\n                        shortest = d;\n                        holeIndex = h2;\n                        shapeIndex = p;\n\n                    }\n\n                }\n\n            }\n\n            //console.log(\"shortest\", shortest, dist);\n\n            prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\n            prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\n\n            var areaapts = [\n\n                hole[ holeIndex ],\n                shape[ shapeIndex ],\n                shape[ prevShapeVert ]\n\n            ];\n\n            var areaa = THREE.FontUtils.Triangulate.area( areaapts );\n\n            var areabpts = [\n\n                hole[ holeIndex ],\n                hole[ prevHoleVert ],\n                shape[ shapeIndex ]\n\n            ];\n\n            var areab = THREE.FontUtils.Triangulate.area( areabpts );\n\n            var shapeOffset = 1;\n            var holeOffset = -1;\n\n            var oldShapeIndex = shapeIndex, oldHoleIndex = holeIndex;\n            shapeIndex += shapeOffset;\n            holeIndex += holeOffset;\n\n            if ( shapeIndex < 0 ) { shapeIndex += shape.length;  }\n            shapeIndex %= shape.length;\n\n            if ( holeIndex < 0 ) { holeIndex += hole.length;  }\n            holeIndex %= hole.length;\n\n            prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\n            prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\n\n            areaapts = [\n\n                hole[ holeIndex ],\n                shape[ shapeIndex ],\n                shape[ prevShapeVert ]\n\n            ];\n\n            var areaa2 = THREE.FontUtils.Triangulate.area( areaapts );\n\n            areabpts = [\n\n                hole[ holeIndex ],\n                hole[ prevHoleVert ],\n                shape[ shapeIndex ]\n\n            ];\n\n            var areab2 = THREE.FontUtils.Triangulate.area( areabpts );\n            //console.log(areaa,areab ,areaa2,areab2, ( areaa + areab ),  ( areaa2 + areab2 ));\n\n            if ( ( areaa + areab ) > ( areaa2 + areab2 ) ) {\n\n                // In case areas are not correct.\n                //console.log(\"USE THIS\");\n\n                shapeIndex = oldShapeIndex;\n                holeIndex = oldHoleIndex ;\n\n                if ( shapeIndex < 0 ) { shapeIndex += shape.length;  }\n                shapeIndex %= shape.length;\n\n                if ( holeIndex < 0 ) { holeIndex += hole.length;  }\n                holeIndex %= hole.length;\n\n                prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\n                prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\n\n            } else {\n\n                //console.log(\"USE THAT \")\n\n            }\n\n            tmpShape1 = shape.slice( 0, shapeIndex );\n            tmpShape2 = shape.slice( shapeIndex );\n            tmpHole1 = hole.slice( holeIndex );\n            tmpHole2 = hole.slice( 0, holeIndex );\n\n            // Should check orders here again?\n\n            var trianglea = [\n\n                hole[ holeIndex ],\n                shape[ shapeIndex ],\n                shape[ prevShapeVert ]\n\n            ];\n\n            var triangleb = [\n\n                hole[ holeIndex ] ,\n                hole[ prevHoleVert ],\n                shape[ shapeIndex ]\n\n            ];\n\n            verts.push( trianglea );\n            verts.push( triangleb );\n\n            shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n        }\n\n        return {\n\n            shape:shape, \t\t/* shape with no holes */\n            isolatedPts: verts, /* isolated faces */\n            allpoints: allpoints\n\n        }\n\n\n    },\n\n    triangulateShape: function ( contour, holes ) {\n\n        var shapeWithoutHoles = THREE.Shape.Utils.removeHoles( contour, holes );\n\n        var shape = shapeWithoutHoles.shape,\n            allpoints = shapeWithoutHoles.allpoints,\n            isolatedPts = shapeWithoutHoles.isolatedPts;\n\n        var triangles = THREE.FontUtils.Triangulate( shape, false ); // True returns indices for points of spooled shape\n\n        // To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n        //console.log( \"triangles\",triangles, triangles.length );\n        //console.log( \"allpoints\",allpoints, allpoints.length );\n\n        var i, il, f, face,\n            key, index,\n            allPointsMap = {},\n            isolatedPointsMap = {};\n\n        // prepare all points map\n\n        for ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n            key = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n            if ( allPointsMap[ key ] !== undefined ) {\n\n                console.log( \"Duplicate point\", key );\n\n            }\n\n            allPointsMap[ key ] = i;\n\n        }\n\n        // check all face vertices against all points map\n\n        for ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n            face = triangles[ i ];\n\n            for ( f = 0; f < 3; f ++ ) {\n\n                key = face[ f ].x + \":\" + face[ f ].y;\n\n                index = allPointsMap[ key ];\n\n                if ( index !== undefined ) {\n\n                    face[ f ] = index;\n\n                }\n\n            }\n\n        }\n\n        // check isolated points vertices against all points map\n\n        for ( i = 0, il = isolatedPts.length; i < il; i ++ ) {\n\n            face = isolatedPts[ i ];\n\n            for ( f = 0; f < 3; f ++ ) {\n\n                key = face[ f ].x + \":\" + face[ f ].y;\n\n                index = allPointsMap[ key ];\n\n                if ( index !== undefined ) {\n\n                    face[ f ] = index;\n\n                }\n\n            }\n\n        }\n\n        return triangles.concat( isolatedPts );\n\n    }, // end triangulate shapes\n\n    /*\n     triangulate2 : function( pts, holes ) {\n\n     // For use with Poly2Tri.js\n\n     var allpts = pts.concat();\n     var shape = [];\n     for (var p in pts) {\n     shape.push(new js.poly2tri.Point(pts[p].x, pts[p].y));\n     }\n\n     var swctx = new js.poly2tri.SweepContext(shape);\n\n     for (var h in holes) {\n     var aHole = holes[h];\n     var newHole = []\n     for (i in aHole) {\n     newHole.push(new js.poly2tri.Point(aHole[i].x, aHole[i].y));\n     allpts.push(aHole[i]);\n     }\n     swctx.AddHole(newHole);\n     }\n\n     var find;\n     var findIndexForPt = function (pt) {\n     find = new THREE.Vector2(pt.x, pt.y);\n     var p;\n     for (p=0, pl = allpts.length; p<pl; p++) {\n     if (allpts[p].equals(find)) return p;\n     }\n     return -1;\n     };\n\n     // triangulate\n     js.poly2tri.sweep.Triangulate(swctx);\n\n     var triangles =  swctx.GetTriangles();\n     var tr ;\n     var facesPts = [];\n     for (var t in triangles) {\n     tr =  triangles[t];\n     facesPts.push([\n     findIndexForPt(tr.GetPoint(0)),\n     findIndexForPt(tr.GetPoint(1)),\n     findIndexForPt(tr.GetPoint(2))\n     ]);\n     }\n\n\n     //\tconsole.log(facesPts);\n     //\tconsole.log(\"triangles\", triangles.length, triangles);\n\n     // Returns array of faces with 3 element each\n     return facesPts;\n     },\n     */\n\n    isClockWise: function ( pts ) {\n\n        return THREE.FontUtils.Triangulate.area( pts ) < 0;\n\n    },\n\n    // Bezier Curves formulas obtained from\n    // http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n    // Quad Bezier Functions\n\n    b2p0: function ( t, p ) {\n\n        var k = 1 - t;\n        return k * k * p;\n\n    },\n\n    b2p1: function ( t, p ) {\n\n        return 2 * ( 1 - t ) * t * p;\n\n    },\n\n    b2p2: function ( t, p ) {\n\n        return t * t * p;\n\n    },\n\n    b2: function ( t, p0, p1, p2 ) {\n\n        return this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );\n\n    },\n\n    // Cubic Bezier Functions\n\n    b3p0: function ( t, p ) {\n\n        var k = 1 - t;\n        return k * k * k * p;\n\n    },\n\n    b3p1: function ( t, p ) {\n\n        var k = 1 - t;\n        return 3 * k * k * t * p;\n\n    },\n\n    b3p2: function ( t, p ) {\n\n        var k = 1 - t;\n        return 3 * k * t * t * p;\n\n    },\n\n    b3p3: function ( t, p ) {\n\n        return t * t * t * p;\n\n    },\n\n    b3: function ( t, p0, p1, p2, p3 ) {\n\n        return this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );\n\n    }\n\n};\n\n\n/**************************************************************\n *\tLine\n **************************************************************/\n\nTHREE.LineCurve = function ( v1, v2 ) {\n\n    this.v1 = v1;\n    this.v2 = v2;\n\n};\n\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\n    var point = this.v2.clone().sub(this.v1);\n    point.multiplyScalar( t ).add( this.v1 );\n\n    return point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\n    return this.getPoint( u );\n\n};\n\nTHREE.LineCurve.prototype.getTangent = function( t ) {\n\n    var tangent = this.v2.clone().sub(this.v1);\n\n    return tangent.normalize();\n\n};\n/**************************************************************\n *\tQuadratic Bezier curve\n **************************************************************/\n\n\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\n    this.v0 = v0;\n    this.v1 = v1;\n    this.v2 = v2;\n\n};\n\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\n\n\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n    var tx, ty;\n\n    tx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\n    ty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\n\n    return new THREE.Vector2( tx, ty );\n\n};\n\n\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n    var tx, ty;\n\n    tx = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );\n    ty = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );\n\n    // returns unit vector\n\n    var tangent = new THREE.Vector2( tx, ty );\n    tangent.normalize();\n\n    return tangent;\n\n};\n/**************************************************************\n *\tCubic Bezier curve\n **************************************************************/\n\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\n    this.v0 = v0;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n\n};\n\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n    var tx, ty;\n\n    tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\n    ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\n\n    return new THREE.Vector2( tx, ty );\n\n};\n\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\n    var tx, ty;\n\n    tx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\n    ty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\n\n    var tangent = new THREE.Vector2( tx, ty );\n    tangent.normalize();\n\n    return tangent;\n\n};\n/**************************************************************\n *\tSpline curve\n **************************************************************/\n\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\n    this.points = (points == undefined) ? [] : points;\n\n};\n\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\n    var v = new THREE.Vector2();\n    var c = [];\n    var points = this.points, point, intPoint, weight;\n    point = ( points.length - 1 ) * t;\n\n    intPoint = Math.floor( point );\n    weight = point - intPoint;\n\n    c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\n    c[ 1 ] = intPoint;\n    c[ 2 ] = intPoint  > points.length - 2 ? points.length -1 : intPoint + 1;\n    c[ 3 ] = intPoint  > points.length - 3 ? points.length -1 : intPoint + 2;\n\n    v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );\n    v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );\n\n    return v;\n\n};\n/**************************************************************\n *\tEllipse curve\n **************************************************************/\n\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    this.aX = aX;\n    this.aY = aY;\n\n    this.xRadius = xRadius;\n    this.yRadius = yRadius;\n\n    this.aStartAngle = aStartAngle;\n    this.aEndAngle = aEndAngle;\n\n    this.aClockwise = aClockwise;\n\n};\n\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\n\n    var angle;\n    var deltaAngle = this.aEndAngle - this.aStartAngle;\n\n    if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\n    if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\n\n    if ( this.aClockwise === true ) {\n\n        angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\n\n    } else {\n\n        angle = this.aStartAngle + t * deltaAngle;\n\n    }\n\n    var tx = this.aX + this.xRadius * Math.cos( angle );\n    var ty = this.aY + this.yRadius * Math.sin( angle );\n\n    return new THREE.Vector2( tx, ty );\n\n};\n\n/**************************************************************\n *\tArc curve\n **************************************************************/\n\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n    THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n};\n\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\n/**************************************************************\n *\tLine3D\n **************************************************************/\n\nTHREE.LineCurve3 = THREE.Curve.create(\n\n    function ( v1, v2 ) {\n\n        this.v1 = v1;\n        this.v2 = v2;\n\n    },\n\n    function ( t ) {\n\n        var r = new THREE.Vector3();\n\n\n        r.subVectors( this.v2, this.v1 ); // diff\n        r.multiplyScalar( t );\n        r.add( this.v1 );\n\n        return r;\n\n    }\n\n);\n\n/**************************************************************\n *\tQuadratic Bezier 3D curve\n **************************************************************/\n\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\n    function ( v0, v1, v2 ) {\n\n        this.v0 = v0;\n        this.v1 = v1;\n        this.v2 = v2;\n\n    },\n\n    function ( t ) {\n\n        var tx, ty, tz;\n\n        tx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\n        ty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\n        tz = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );\n\n        return new THREE.Vector3( tx, ty, tz );\n\n    }\n\n);\n/**************************************************************\n *\tCubic Bezier 3D curve\n **************************************************************/\n\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\n    function ( v0, v1, v2, v3 ) {\n\n        this.v0 = v0;\n        this.v1 = v1;\n        this.v2 = v2;\n        this.v3 = v3;\n\n    },\n\n    function ( t ) {\n\n        var tx, ty, tz;\n\n        tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\n        ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\n        tz = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );\n\n        return new THREE.Vector3( tx, ty, tz );\n\n    }\n\n);\n/**************************************************************\n *\tSpline 3D curve\n **************************************************************/\n\n\nTHREE.SplineCurve3 = THREE.Curve.create(\n\n    function ( points /* array of Vector3 */) {\n\n        this.points = (points == undefined) ? [] : points;\n\n    },\n\n    function ( t ) {\n\n        var v = new THREE.Vector3();\n        var c = [];\n        var points = this.points, point, intPoint, weight;\n        point = ( points.length - 1 ) * t;\n\n        intPoint = Math.floor( point );\n        weight = point - intPoint;\n\n        c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\n        c[ 1 ] = intPoint;\n        c[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;\n        c[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;\n\n        var pt0 = points[ c[0] ],\n            pt1 = points[ c[1] ],\n            pt2 = points[ c[2] ],\n            pt3 = points[ c[3] ];\n\n        v.x = THREE.Curve.Utils.interpolate(pt0.x, pt1.x, pt2.x, pt3.x, weight);\n        v.y = THREE.Curve.Utils.interpolate(pt0.y, pt1.y, pt2.y, pt3.y, weight);\n        v.z = THREE.Curve.Utils.interpolate(pt0.z, pt1.z, pt2.z, pt3.z, weight);\n\n        return v;\n\n    }\n\n);\n\n\n// THREE.SplineCurve3.prototype.getTangent = function(t) {\n// \t\tvar v = new THREE.Vector3();\n// \t\tvar c = [];\n// \t\tvar points = this.points, point, intPoint, weight;\n// \t\tpoint = ( points.length - 1 ) * t;\n\n// \t\tintPoint = Math.floor( point );\n// \t\tweight = point - intPoint;\n\n// \t\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\n// \t\tc[ 1 ] = intPoint;\n// \t\tc[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;\n// \t\tc[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;\n\n// \t\tvar pt0 = points[ c[0] ],\n// \t\t\tpt1 = points[ c[1] ],\n// \t\t\tpt2 = points[ c[2] ],\n// \t\t\tpt3 = points[ c[3] ];\n\n// \t// t = weight;\n// \tv.x = THREE.Curve.Utils.tangentSpline( t, pt0.x, pt1.x, pt2.x, pt3.x );\n// \tv.y = THREE.Curve.Utils.tangentSpline( t, pt0.y, pt1.y, pt2.y, pt3.y );\n// \tv.z = THREE.Curve.Utils.tangentSpline( t, pt0.z, pt1.z, pt2.z, pt3.z );\n\n// \treturn v;\n\n// }\n/**************************************************************\n *\tClosed Spline 3D curve\n **************************************************************/\n\n\nTHREE.ClosedSplineCurve3 = THREE.Curve.create(\n\n    function ( points /* array of Vector3 */) {\n\n        this.points = (points == undefined) ? [] : points;\n\n    },\n\n    function ( t ) {\n\n        var v = new THREE.Vector3();\n        var c = [];\n        var points = this.points, point, intPoint, weight;\n        point = ( points.length - 0 ) * t;\n        // This needs to be from 0-length +1\n\n        intPoint = Math.floor( point );\n        weight = point - intPoint;\n\n        intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n        c[ 0 ] = ( intPoint - 1 ) % points.length;\n        c[ 1 ] = ( intPoint ) % points.length;\n        c[ 2 ] = ( intPoint + 1 ) % points.length;\n        c[ 3 ] = ( intPoint + 2 ) % points.length;\n\n        v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );\n        v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );\n        v.z = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].z, points[ c[ 1 ] ].z, points[ c[ 2 ] ].z, points[ c[ 3 ] ].z, weight );\n\n        return v;\n\n    }\n\n);\n/**\n * @author mikael emtinger / http://gomo.se/\n */\n\nTHREE.AnimationHandler = (function() {\n\n    var playing = [];\n    var library = {};\n    var that    = {};\n\n\n    //--- update ---\n\n    that.update = function( deltaTimeMS ) {\n\n        for( var i = 0; i < playing.length; i ++ )\n            playing[ i ].update( deltaTimeMS );\n\n    };\n\n\n    //--- add ---\n\n    that.addToUpdate = function( animation ) {\n\n        if ( playing.indexOf( animation ) === -1 )\n            playing.push( animation );\n\n    };\n\n\n    //--- remove ---\n\n    that.removeFromUpdate = function( animation ) {\n\n        var index = playing.indexOf( animation );\n\n        if( index !== -1 )\n            playing.splice( index, 1 );\n\n    };\n\n\n    //--- add ---\n\n    that.add = function( data ) {\n\n        if ( library[ data.name ] !== undefined )\n            console.log( \"THREE.AnimationHandler.add: Warning! \" + data.name + \" already exists in library. Overwriting.\" );\n\n        library[ data.name ] = data;\n        initData( data );\n\n    };\n\n\n    //--- get ---\n\n    that.get = function( name ) {\n\n        if ( typeof name === \"string\" ) {\n\n            if ( library[ name ] ) {\n\n                return library[ name ];\n\n            } else {\n\n                console.log( \"THREE.AnimationHandler.get: Couldn't find animation \" + name );\n                return null;\n\n            }\n\n        } else {\n\n            // todo: add simple tween library\n\n        }\n\n    };\n\n    //--- parse ---\n\n    that.parse = function( root ) {\n\n        // setup hierarchy\n\n        var hierarchy = [];\n\n        if ( root instanceof THREE.SkinnedMesh ) {\n\n            for( var b = 0; b < root.bones.length; b++ ) {\n\n                hierarchy.push( root.bones[ b ] );\n\n            }\n\n        } else {\n\n            parseRecurseHierarchy( root, hierarchy );\n\n        }\n\n        return hierarchy;\n\n    };\n\n    var parseRecurseHierarchy = function( root, hierarchy ) {\n\n        hierarchy.push( root );\n\n        for( var c = 0; c < root.children.length; c++ )\n            parseRecurseHierarchy( root.children[ c ], hierarchy );\n\n    }\n\n\n    //--- init data ---\n\n    var initData = function( data ) {\n\n        if( data.initialized === true )\n            return;\n\n\n        // loop through all keys\n\n        for( var h = 0; h < data.hierarchy.length; h ++ ) {\n\n            for( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n                // remove minus times\n\n                if( data.hierarchy[ h ].keys[ k ].time < 0 )\n                    data.hierarchy[ h ].keys[ k ].time = 0;\n\n\n                // create quaternions\n\n                if( data.hierarchy[ h ].keys[ k ].rot !== undefined &&\n                    !( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {\n\n                    var quat = data.hierarchy[ h ].keys[ k ].rot;\n                    data.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion( quat[0], quat[1], quat[2], quat[3] );\n\n                }\n\n            }\n\n\n            // prepare morph target keys\n\n            if( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {\n\n                // get all used\n\n                var usedMorphTargets = {};\n\n                for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n                    for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\n\n                        var morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];\n                        usedMorphTargets[ morphTargetName ] = -1;\n\n                    }\n\n                }\n\n                data.hierarchy[ h ].usedMorphTargets = usedMorphTargets;\n\n\n                // set all used on all frames\n\n                for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n                    var influences = {};\n\n                    for ( var morphTargetName in usedMorphTargets ) {\n\n                        for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\n\n                            if ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {\n\n                                influences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];\n                                break;\n\n                            }\n\n                        }\n\n                        if ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {\n\n                            influences[ morphTargetName ] = 0;\n\n                        }\n\n                    }\n\n                    data.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;\n\n                }\n\n            }\n\n\n            // remove all keys that are on the same time\n\n            for ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n                if ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {\n\n                    data.hierarchy[ h ].keys.splice( k, 1 );\n                    k --;\n\n                }\n\n            }\n\n\n            // set index\n\n            for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n                data.hierarchy[ h ].keys[ k ].index = k;\n\n            }\n\n        }\n\n\n        // JIT\n\n        var lengthInFrames = parseInt( data.length * data.fps, 10 );\n\n        data.JIT = {};\n        data.JIT.hierarchy = [];\n\n        for( var h = 0; h < data.hierarchy.length; h ++ )\n            data.JIT.hierarchy.push( new Array( lengthInFrames ) );\n\n\n        // done\n\n        data.initialized = true;\n\n    };\n\n\n    // interpolation types\n\n    that.LINEAR = 0;\n    that.CATMULLROM = 1;\n    that.CATMULLROM_FORWARD = 2;\n\n    return that;\n\n}());\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Animation = function ( root, name, interpolationType ) {\n\n    this.root = root;\n    this.data = THREE.AnimationHandler.get( name );\n    this.hierarchy = THREE.AnimationHandler.parse( root );\n\n    this.currentTime = 0;\n    this.timeScale = 1;\n\n    this.isPlaying = false;\n    this.isPaused = true;\n    this.loop = true;\n\n    this.interpolationType = interpolationType !== undefined ? interpolationType : THREE.AnimationHandler.LINEAR;\n\n    this.points = [];\n    this.target = new THREE.Vector3();\n\n};\n\nTHREE.Animation.prototype.play = function ( loop, startTimeMS ) {\n\n    if ( this.isPlaying === false ) {\n\n        this.isPlaying = true;\n        this.loop = loop !== undefined ? loop : true;\n        this.currentTime = startTimeMS !== undefined ? startTimeMS : 0;\n\n        // reset key cache\n\n        var h, hl = this.hierarchy.length,\n            object;\n\n        for ( h = 0; h < hl; h ++ ) {\n\n            object = this.hierarchy[ h ];\n\n            object.matrixAutoUpdate = true;\n\n            if ( object.animationCache === undefined ) {\n\n                object.animationCache = {};\n                object.animationCache.prevKey = { pos: 0, rot: 0, scl: 0 };\n                object.animationCache.nextKey = { pos: 0, rot: 0, scl: 0 };\n                object.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;\n\n            }\n\n            var prevKey = object.animationCache.prevKey;\n            var nextKey = object.animationCache.nextKey;\n\n            prevKey.pos = this.data.hierarchy[ h ].keys[ 0 ];\n            prevKey.rot = this.data.hierarchy[ h ].keys[ 0 ];\n            prevKey.scl = this.data.hierarchy[ h ].keys[ 0 ];\n\n            nextKey.pos = this.getNextKeyWith( \"pos\", h, 1 );\n            nextKey.rot = this.getNextKeyWith( \"rot\", h, 1 );\n            nextKey.scl = this.getNextKeyWith( \"scl\", h, 1 );\n\n        }\n\n        this.update( 0 );\n\n    }\n\n    this.isPaused = false;\n\n    THREE.AnimationHandler.addToUpdate( this );\n\n};\n\n\nTHREE.Animation.prototype.pause = function() {\n\n    if ( this.isPaused === true ) {\n\n        THREE.AnimationHandler.addToUpdate( this );\n\n    } else {\n\n        THREE.AnimationHandler.removeFromUpdate( this );\n\n    }\n\n    this.isPaused = !this.isPaused;\n\n};\n\n\nTHREE.Animation.prototype.stop = function() {\n\n    this.isPlaying = false;\n    this.isPaused  = false;\n    THREE.AnimationHandler.removeFromUpdate( this );\n\n};\n\n\nTHREE.Animation.prototype.update = function ( deltaTimeMS ) {\n\n    // early out\n\n    if ( this.isPlaying === false ) return;\n\n\n    // vars\n\n    var types = [ \"pos\", \"rot\", \"scl\" ];\n    var type;\n    var scale;\n    var vector;\n    var prevXYZ, nextXYZ;\n    var prevKey, nextKey;\n    var object;\n    var animationCache;\n    var frame;\n    var JIThierarchy = this.data.JIT.hierarchy;\n    var currentTime, unloopedCurrentTime;\n    var currentPoint, forwardPoint, angle;\n\n\n    this.currentTime += deltaTimeMS * this.timeScale;\n\n    unloopedCurrentTime = this.currentTime;\n    currentTime = this.currentTime = this.currentTime % this.data.length;\n    frame = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );\n\n\n    for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\n\n        object = this.hierarchy[ h ];\n        animationCache = object.animationCache;\n\n        // loop through pos/rot/scl\n\n        for ( var t = 0; t < 3; t ++ ) {\n\n            // get keys\n\n            type    = types[ t ];\n            prevKey = animationCache.prevKey[ type ];\n            nextKey = animationCache.nextKey[ type ];\n\n            // switch keys?\n\n            if ( nextKey.time <= unloopedCurrentTime ) {\n\n                // did we loop?\n\n                if ( currentTime < unloopedCurrentTime ) {\n\n                    if ( this.loop ) {\n\n                        prevKey = this.data.hierarchy[ h ].keys[ 0 ];\n                        nextKey = this.getNextKeyWith( type, h, 1 );\n\n                        while( nextKey.time < currentTime ) {\n\n                            prevKey = nextKey;\n                            nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\n\n                        }\n\n                    } else {\n\n                        this.stop();\n                        return;\n\n                    }\n\n                } else {\n\n                    do {\n\n                        prevKey = nextKey;\n                        nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\n\n                    } while( nextKey.time < currentTime )\n\n                }\n\n                animationCache.prevKey[ type ] = prevKey;\n                animationCache.nextKey[ type ] = nextKey;\n\n            }\n\n\n            object.matrixAutoUpdate = true;\n            object.matrixWorldNeedsUpdate = true;\n\n            scale = ( currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );\n            prevXYZ = prevKey[ type ];\n            nextXYZ = nextKey[ type ];\n\n\n            // check scale error\n\n            if ( scale < 0 || scale > 1 ) {\n\n                console.log( \"THREE.Animation.update: Warning! Scale out of bounds:\" + scale + \" on bone \" + h );\n                scale = scale < 0 ? 0 : 1;\n\n            }\n\n            // interpolate\n\n            if ( type === \"pos\" ) {\n\n                vector = object.position;\n\n                if ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {\n\n                    vector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\n                    vector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\n                    vector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\n\n                } else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\n                    this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\n\n                    this.points[ 0 ] = this.getPrevKeyWith( \"pos\", h, prevKey.index - 1 )[ \"pos\" ];\n                    this.points[ 1 ] = prevXYZ;\n                    this.points[ 2 ] = nextXYZ;\n                    this.points[ 3 ] = this.getNextKeyWith( \"pos\", h, nextKey.index + 1 )[ \"pos\" ];\n\n                    scale = scale * 0.33 + 0.33;\n\n                    currentPoint = this.interpolateCatmullRom( this.points, scale );\n\n                    vector.x = currentPoint[ 0 ];\n                    vector.y = currentPoint[ 1 ];\n                    vector.z = currentPoint[ 2 ];\n\n                    if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\n\n                        forwardPoint = this.interpolateCatmullRom( this.points, scale * 1.01 );\n\n                        this.target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );\n                        this.target.sub( vector );\n                        this.target.y = 0;\n                        this.target.normalize();\n\n                        angle = Math.atan2( this.target.x, this.target.z );\n                        object.rotation.set( 0, angle, 0 );\n\n                    }\n\n                }\n\n            } else if ( type === \"rot\" ) {\n\n                THREE.Quaternion.slerp( prevXYZ, nextXYZ, object.quaternion, scale );\n\n            } else if ( type === \"scl\" ) {\n\n                vector = object.scale;\n\n                vector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\n                vector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\n                vector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\n\n            }\n\n        }\n\n    }\n\n};\n\n// Catmull-Rom spline\n\nTHREE.Animation.prototype.interpolateCatmullRom = function ( points, scale ) {\n\n    var c = [], v3 = [],\n        point, intPoint, weight, w2, w3,\n        pa, pb, pc, pd;\n\n    point = ( points.length - 1 ) * scale;\n    intPoint = Math.floor( point );\n    weight = point - intPoint;\n\n    c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n    c[ 1 ] = intPoint;\n    c[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;\n    c[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;\n\n    pa = points[ c[ 0 ] ];\n    pb = points[ c[ 1 ] ];\n    pc = points[ c[ 2 ] ];\n    pd = points[ c[ 3 ] ];\n\n    w2 = weight * weight;\n    w3 = weight * w2;\n\n    v3[ 0 ] = this.interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );\n    v3[ 1 ] = this.interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );\n    v3[ 2 ] = this.interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );\n\n    return v3;\n\n};\n\nTHREE.Animation.prototype.interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {\n\n    var v0 = ( p2 - p0 ) * 0.5,\n        v1 = ( p3 - p1 ) * 0.5;\n\n    return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n};\n\n\n\n// Get next key with\n\nTHREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {\n\n    var keys = this.data.hierarchy[ h ].keys;\n\n    if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\n        this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\n\n        key = key < keys.length - 1 ? key : keys.length - 1;\n\n    } else {\n\n        key = key % keys.length;\n\n    }\n\n    for ( ; key < keys.length; key++ ) {\n\n        if ( keys[ key ][ type ] !== undefined ) {\n\n            return keys[ key ];\n\n        }\n\n    }\n\n    return this.data.hierarchy[ h ].keys[ 0 ];\n\n};\n\n// Get previous key with\n\nTHREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {\n\n    var keys = this.data.hierarchy[ h ].keys;\n\n    if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\n        this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\n\n        key = key > 0 ? key : 0;\n\n    } else {\n\n        key = key >= 0 ? key : key + keys.length;\n\n    }\n\n\n    for ( ; key >= 0; key -- ) {\n\n        if ( keys[ key ][ type ] !== undefined ) {\n\n            return keys[ key ];\n\n        }\n\n    }\n\n    return this.data.hierarchy[ h ].keys[ keys.length - 1 ];\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author khang duong\n * @author erik kitson\n */\n\nTHREE.KeyFrameAnimation = function( root, data, JITCompile ) {\n\n    this.root = root;\n    this.data = THREE.AnimationHandler.get( data );\n    this.hierarchy = THREE.AnimationHandler.parse( root );\n    this.currentTime = 0;\n    this.timeScale = 0.001;\n    this.isPlaying = false;\n    this.isPaused = true;\n    this.loop = true;\n    this.JITCompile = JITCompile !== undefined ? JITCompile : true;\n\n    // initialize to first keyframes\n\n    for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\n\n        var keys = this.data.hierarchy[h].keys,\n            sids = this.data.hierarchy[h].sids,\n            obj = this.hierarchy[h];\n\n        if ( keys.length && sids ) {\n\n            for ( var s = 0; s < sids.length; s++ ) {\n\n                var sid = sids[ s ],\n                    next = this.getNextKeyWith( sid, h, 0 );\n\n                if ( next ) {\n\n                    next.apply( sid );\n\n                }\n\n            }\n\n            obj.matrixAutoUpdate = false;\n            this.data.hierarchy[h].node.updateMatrix();\n            obj.matrixWorldNeedsUpdate = true;\n\n        }\n\n    }\n\n};\n\n// Play\n\nTHREE.KeyFrameAnimation.prototype.play = function( loop, startTimeMS ) {\n\n    if( !this.isPlaying ) {\n\n        this.isPlaying = true;\n        this.loop = loop !== undefined ? loop : true;\n        this.currentTime = startTimeMS !== undefined ? startTimeMS : 0;\n        this.startTimeMs = startTimeMS;\n        this.startTime = 10000000;\n        this.endTime = -this.startTime;\n\n\n        // reset key cache\n\n        var h, hl = this.hierarchy.length,\n            object,\n            node;\n\n        for ( h = 0; h < hl; h++ ) {\n\n            object = this.hierarchy[ h ];\n            node = this.data.hierarchy[ h ];\n\n            if ( node.animationCache === undefined ) {\n\n                node.animationCache = {};\n                node.animationCache.prevKey = null;\n                node.animationCache.nextKey = null;\n                node.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;\n\n            }\n\n            var keys = this.data.hierarchy[h].keys;\n\n            if (keys.length) {\n\n                node.animationCache.prevKey = keys[ 0 ];\n                node.animationCache.nextKey = keys[ 1 ];\n\n                this.startTime = Math.min( keys[0].time, this.startTime );\n                this.endTime = Math.max( keys[keys.length - 1].time, this.endTime );\n\n            }\n\n        }\n\n        this.update( 0 );\n\n    }\n\n    this.isPaused = false;\n\n    THREE.AnimationHandler.addToUpdate( this );\n\n};\n\n\n\n// Pause\n\nTHREE.KeyFrameAnimation.prototype.pause = function() {\n\n    if( this.isPaused ) {\n\n        THREE.AnimationHandler.addToUpdate( this );\n\n    } else {\n\n        THREE.AnimationHandler.removeFromUpdate( this );\n\n    }\n\n    this.isPaused = !this.isPaused;\n\n};\n\n\n// Stop\n\nTHREE.KeyFrameAnimation.prototype.stop = function() {\n\n    this.isPlaying = false;\n    this.isPaused  = false;\n    THREE.AnimationHandler.removeFromUpdate( this );\n\n\n    // reset JIT matrix and remove cache\n\n    for ( var h = 0; h < this.data.hierarchy.length; h++ ) {\n\n        var obj = this.hierarchy[ h ];\n        var node = this.data.hierarchy[ h ];\n\n        if ( node.animationCache !== undefined ) {\n\n            var original = node.animationCache.originalMatrix;\n\n            if( obj instanceof THREE.Bone ) {\n\n                original.copy( obj.skinMatrix );\n                obj.skinMatrix = original;\n\n            } else {\n\n                original.copy( obj.matrix );\n                obj.matrix = original;\n\n            }\n\n            delete node.animationCache;\n\n        }\n\n    }\n\n};\n\n\n// Update\n\nTHREE.KeyFrameAnimation.prototype.update = function( deltaTimeMS ) {\n\n    // early out\n\n    if( !this.isPlaying ) return;\n\n\n    // vars\n\n    var prevKey, nextKey;\n    var object;\n    var node;\n    var frame;\n    var JIThierarchy = this.data.JIT.hierarchy;\n    var currentTime, unloopedCurrentTime;\n    var looped;\n\n\n    // update\n\n    this.currentTime += deltaTimeMS * this.timeScale;\n\n    unloopedCurrentTime = this.currentTime;\n    currentTime         = this.currentTime = this.currentTime % this.data.length;\n\n    // if looped around, the current time should be based on the startTime\n    if ( currentTime < this.startTimeMs ) {\n\n        currentTime = this.currentTime = this.startTimeMs + currentTime;\n\n    }\n\n    frame               = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );\n    looped \t\t\t\t= currentTime < unloopedCurrentTime;\n\n    if ( looped && !this.loop ) {\n\n        // Set the animation to the last keyframes and stop\n        for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\n\n            var keys = this.data.hierarchy[h].keys,\n                sids = this.data.hierarchy[h].sids,\n                end = keys.length-1,\n                obj = this.hierarchy[h];\n\n            if ( keys.length ) {\n\n                for ( var s = 0; s < sids.length; s++ ) {\n\n                    var sid = sids[ s ],\n                        prev = this.getPrevKeyWith( sid, h, end );\n\n                    if ( prev ) {\n                        prev.apply( sid );\n\n                    }\n\n                }\n\n                this.data.hierarchy[h].node.updateMatrix();\n                obj.matrixWorldNeedsUpdate = true;\n\n            }\n\n        }\n\n        this.stop();\n        return;\n\n    }\n\n    // check pre-infinity\n    if ( currentTime < this.startTime ) {\n\n        return;\n\n    }\n\n    // update\n\n    for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\n\n        object = this.hierarchy[ h ];\n        node = this.data.hierarchy[ h ];\n\n        var keys = node.keys,\n            animationCache = node.animationCache;\n\n        // use JIT?\n\n        if ( this.JITCompile && JIThierarchy[ h ][ frame ] !== undefined ) {\n\n            if( object instanceof THREE.Bone ) {\n\n                object.skinMatrix = JIThierarchy[ h ][ frame ];\n                object.matrixWorldNeedsUpdate = false;\n\n            } else {\n\n                object.matrix = JIThierarchy[ h ][ frame ];\n                object.matrixWorldNeedsUpdate = true;\n\n            }\n\n            // use interpolation\n\n        } else if ( keys.length ) {\n\n            // make sure so original matrix and not JIT matrix is set\n\n            if ( this.JITCompile && animationCache ) {\n\n                if( object instanceof THREE.Bone ) {\n\n                    object.skinMatrix = animationCache.originalMatrix;\n\n                } else {\n\n                    object.matrix = animationCache.originalMatrix;\n\n                }\n\n            }\n\n            prevKey = animationCache.prevKey;\n            nextKey = animationCache.nextKey;\n\n            if ( prevKey && nextKey ) {\n\n                // switch keys?\n\n                if ( nextKey.time <= unloopedCurrentTime ) {\n\n                    // did we loop?\n\n                    if ( looped && this.loop ) {\n\n                        prevKey = keys[ 0 ];\n                        nextKey = keys[ 1 ];\n\n                        while ( nextKey.time < currentTime ) {\n\n                            prevKey = nextKey;\n                            nextKey = keys[ prevKey.index + 1 ];\n\n                        }\n\n                    } else if ( !looped ) {\n\n                        var lastIndex = keys.length - 1;\n\n                        while ( nextKey.time < currentTime && nextKey.index !== lastIndex ) {\n\n                            prevKey = nextKey;\n                            nextKey = keys[ prevKey.index + 1 ];\n\n                        }\n\n                    }\n\n                    animationCache.prevKey = prevKey;\n                    animationCache.nextKey = nextKey;\n\n                }\n                if(nextKey.time >= currentTime)\n                    prevKey.interpolate( nextKey, currentTime );\n                else\n                    prevKey.interpolate( nextKey, nextKey.time);\n\n            }\n\n            this.data.hierarchy[h].node.updateMatrix();\n            object.matrixWorldNeedsUpdate = true;\n\n        }\n\n    }\n\n    // update JIT?\n\n    if ( this.JITCompile ) {\n\n        if ( JIThierarchy[ 0 ][ frame ] === undefined ) {\n\n            this.hierarchy[ 0 ].updateMatrixWorld( true );\n\n            for ( var h = 0; h < this.hierarchy.length; h++ ) {\n\n                if( this.hierarchy[ h ] instanceof THREE.Bone ) {\n\n                    JIThierarchy[ h ][ frame ] = this.hierarchy[ h ].skinMatrix.clone();\n\n                } else {\n\n                    JIThierarchy[ h ][ frame ] = this.hierarchy[ h ].matrix.clone();\n\n                }\n\n            }\n\n        }\n\n    }\n\n};\n\n// Get next key with\n\nTHREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {\n\n    var keys = this.data.hierarchy[ h ].keys;\n    key = key % keys.length;\n\n    for ( ; key < keys.length; key++ ) {\n\n        if ( keys[ key ].hasTarget( sid ) ) {\n\n            return keys[ key ];\n\n        }\n\n    }\n\n    return keys[ 0 ];\n\n};\n\n// Get previous key with\n\nTHREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {\n\n    var keys = this.data.hierarchy[ h ].keys;\n    key = key >= 0 ? key : key + keys.length;\n\n    for ( ; key >= 0; key-- ) {\n\n        if ( keys[ key ].hasTarget( sid ) ) {\n\n            return keys[ key ];\n\n        }\n\n    }\n\n    return keys[ keys.length - 1 ];\n\n};\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\n    THREE.Object3D.call( this );\n\n    var fov = 90, aspect = 1;\n\n    var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n    cameraPX.up.set( 0, -1, 0 );\n    cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n    this.add( cameraPX );\n\n    var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n    cameraNX.up.set( 0, -1, 0 );\n    cameraNX.lookAt( new THREE.Vector3( -1, 0, 0 ) );\n    this.add( cameraNX );\n\n    var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n    cameraPY.up.set( 0, 0, 1 );\n    cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n    this.add( cameraPY );\n\n    var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n    cameraNY.up.set( 0, 0, -1 );\n    cameraNY.lookAt( new THREE.Vector3( 0, -1, 0 ) );\n    this.add( cameraNY );\n\n    var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n    cameraPZ.up.set( 0, -1, 0 );\n    cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n    this.add( cameraPZ );\n\n    var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n    cameraNZ.up.set( 0, -1, 0 );\n    cameraNZ.lookAt( new THREE.Vector3( 0, 0, -1 ) );\n    this.add( cameraNZ );\n\n    this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );\n\n    this.updateCubeMap = function ( renderer, scene ) {\n\n        var renderTarget = this.renderTarget;\n        var generateMipmaps = renderTarget.generateMipmaps;\n\n        renderTarget.generateMipmaps = false;\n\n        renderTarget.activeCubeFace = 0;\n        renderer.render( scene, cameraPX, renderTarget );\n\n        renderTarget.activeCubeFace = 1;\n        renderer.render( scene, cameraNX, renderTarget );\n\n        renderTarget.activeCubeFace = 2;\n        renderer.render( scene, cameraPY, renderTarget );\n\n        renderTarget.activeCubeFace = 3;\n        renderer.render( scene, cameraNY, renderTarget );\n\n        renderTarget.activeCubeFace = 4;\n        renderer.render( scene, cameraPZ, renderTarget );\n\n        renderTarget.generateMipmaps = generateMipmaps;\n\n        renderTarget.activeCubeFace = 5;\n        renderer.render( scene, cameraNZ, renderTarget );\n\n    };\n\n};\n\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\n\n/*\n *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\n *\n *\tA general perpose camera, for setting FOV, Lens Focal Length,\n *\t\tand switching between perspective and orthographic views easily.\n *\t\tUse this only if you do not wish to manage\n *\t\tboth a Orthographic and Perspective Camera\n *\n */\n\n\nTHREE.CombinedCamera = function ( width, height, fov, near, far, orthoNear, orthoFar ) {\n\n    THREE.Camera.call( this );\n\n    this.fov = fov;\n\n    this.left = -width / 2;\n    this.right = width / 2\n    this.top = height / 2;\n    this.bottom = -height / 2;\n\n    // We could also handle the projectionMatrix internally, but just wanted to test nested camera objects\n\n    this.cameraO = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, \torthoNear, orthoFar );\n    this.cameraP = new THREE.PerspectiveCamera( fov, width / height, near, far );\n\n    this.zoom = 1;\n\n    this.toPerspective();\n\n    var aspect = width/height;\n\n};\n\nTHREE.CombinedCamera.prototype = Object.create( THREE.Camera.prototype );\n\nTHREE.CombinedCamera.prototype.toPerspective = function () {\n\n    // Switches to the Perspective Camera\n\n    this.near = this.cameraP.near;\n    this.far = this.cameraP.far;\n\n    this.cameraP.fov =  this.fov / this.zoom ;\n\n    this.cameraP.updateProjectionMatrix();\n\n    this.projectionMatrix = this.cameraP.projectionMatrix;\n\n    this.inPerspectiveMode = true;\n    this.inOrthographicMode = false;\n\n};\n\nTHREE.CombinedCamera.prototype.toOrthographic = function () {\n\n    // Switches to the Orthographic camera estimating viewport from Perspective\n\n    var fov = this.fov;\n    var aspect = this.cameraP.aspect;\n    var near = this.cameraP.near;\n    var far = this.cameraP.far;\n\n    // The size that we set is the mid plane of the viewing frustum\n\n    var hyperfocus = ( near + far ) / 2;\n\n    var halfHeight = Math.tan( fov / 2 ) * hyperfocus;\n    var planeHeight = 2 * halfHeight;\n    var planeWidth = planeHeight * aspect;\n    var halfWidth = planeWidth / 2;\n\n    halfHeight /= this.zoom;\n    halfWidth /= this.zoom;\n\n    this.cameraO.left = -halfWidth;\n    this.cameraO.right = halfWidth;\n    this.cameraO.top = halfHeight;\n    this.cameraO.bottom = -halfHeight;\n\n    // this.cameraO.left = -farHalfWidth;\n    // this.cameraO.right = farHalfWidth;\n    // this.cameraO.top = farHalfHeight;\n    // this.cameraO.bottom = -farHalfHeight;\n\n    // this.cameraO.left = this.left / this.zoom;\n    // this.cameraO.right = this.right / this.zoom;\n    // this.cameraO.top = this.top / this.zoom;\n    // this.cameraO.bottom = this.bottom / this.zoom;\n\n    this.cameraO.updateProjectionMatrix();\n\n    this.near = this.cameraO.near;\n    this.far = this.cameraO.far;\n    this.projectionMatrix = this.cameraO.projectionMatrix;\n\n    this.inPerspectiveMode = false;\n    this.inOrthographicMode = true;\n\n};\n\n\nTHREE.CombinedCamera.prototype.setSize = function( width, height ) {\n\n    this.cameraP.aspect = width / height;\n    this.left = -width / 2;\n    this.right = width / 2\n    this.top = height / 2;\n    this.bottom = -height / 2;\n\n};\n\n\nTHREE.CombinedCamera.prototype.setFov = function( fov ) {\n\n    this.fov = fov;\n\n    if ( this.inPerspectiveMode ) {\n\n        this.toPerspective();\n\n    } else {\n\n        this.toOrthographic();\n\n    }\n\n};\n\n// For mantaining similar API with PerspectiveCamera\n\nTHREE.CombinedCamera.prototype.updateProjectionMatrix = function() {\n\n    if ( this.inPerspectiveMode ) {\n\n        this.toPerspective();\n\n    } else {\n\n        this.toPerspective();\n        this.toOrthographic();\n\n    }\n\n};\n\n/*\n * Uses Focal Length (in mm) to estimate and set FOV\n * 35mm (fullframe) camera is used if frame size is not specified;\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\n */\nTHREE.CombinedCamera.prototype.setLens = function ( focalLength, frameHeight ) {\n\n    if ( frameHeight === undefined ) frameHeight = 24;\n\n    var fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\n\n    this.setFov( fov );\n\n    return fov;\n};\n\n\nTHREE.CombinedCamera.prototype.setZoom = function( zoom ) {\n\n    this.zoom = zoom;\n\n    if ( this.inPerspectiveMode ) {\n\n        this.toPerspective();\n\n    } else {\n\n        this.toOrthographic();\n\n    }\n\n};\n\nTHREE.CombinedCamera.prototype.toFrontView = function() {\n\n    this.rotation.x = 0;\n    this.rotation.y = 0;\n    this.rotation.z = 0;\n\n    // should we be modifing the matrix instead?\n\n    this.rotationAutoUpdate = false;\n\n};\n\nTHREE.CombinedCamera.prototype.toBackView = function() {\n\n    this.rotation.x = 0;\n    this.rotation.y = Math.PI;\n    this.rotation.z = 0;\n    this.rotationAutoUpdate = false;\n\n};\n\nTHREE.CombinedCamera.prototype.toLeftView = function() {\n\n    this.rotation.x = 0;\n    this.rotation.y = - Math.PI / 2;\n    this.rotation.z = 0;\n    this.rotationAutoUpdate = false;\n\n};\n\nTHREE.CombinedCamera.prototype.toRightView = function() {\n\n    this.rotation.x = 0;\n    this.rotation.y = Math.PI / 2;\n    this.rotation.z = 0;\n    this.rotationAutoUpdate = false;\n\n};\n\nTHREE.CombinedCamera.prototype.toTopView = function() {\n\n    this.rotation.x = - Math.PI / 2;\n    this.rotation.y = 0;\n    this.rotation.z = 0;\n    this.rotationAutoUpdate = false;\n\n};\n\nTHREE.CombinedCamera.prototype.toBottomView = function() {\n\n    this.rotation.x = Math.PI / 2;\n    this.rotation.y = 0;\n    this.rotation.z = 0;\n    this.rotationAutoUpdate = false;\n\n};\n\n\n/**\n * @author hughes\n */\n\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n    THREE.Geometry.call( this );\n\n    this.radius = radius = radius || 50;\n    this.segments = segments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n    this.thetaStart = thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    this.thetaLength = thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    var i, uvs = [],\n        center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );\n\n    this.vertices.push(center);\n    uvs.push( centerUV );\n\n    for ( i = 0; i <= segments; i ++ ) {\n\n        var vertex = new THREE.Vector3();\n        var segment = thetaStart + i / segments * thetaLength;\n\n        vertex.x = radius * Math.cos( segment );\n        vertex.y = radius * Math.sin( segment );\n\n        this.vertices.push( vertex );\n        uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, ( vertex.y / radius + 1 ) / 2 ) );\n\n    }\n\n    var n = new THREE.Vector3( 0, 0, 1 );\n\n    for ( i = 1; i <= segments; i ++ ) {\n\n        var v1 = i;\n        var v2 = i + 1 ;\n        var v3 = 0;\n\n        this.faces.push( new THREE.Face3( v1, v2, v3, [ n, n, n ] ) );\n        this.faceVertexUvs[ 0 ].push( [ uvs[ i ], uvs[ i + 1 ], centerUV ] );\n\n    }\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n */\n\nTHREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n    THREE.Geometry.call( this );\n\n    var scope = this;\n\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n\n    this.widthSegments = widthSegments || 1;\n    this.heightSegments = heightSegments || 1;\n    this.depthSegments = depthSegments || 1;\n\n    var width_half = this.width / 2;\n    var height_half = this.height / 2;\n    var depth_half = this.depth / 2;\n\n    buildPlane( 'z', 'y', - 1, - 1, this.depth, this.height, width_half, 0 ); // px\n    buildPlane( 'z', 'y',   1, - 1, this.depth, this.height, - width_half, 1 ); // nx\n    buildPlane( 'x', 'z',   1,   1, this.width, this.depth, height_half, 2 ); // py\n    buildPlane( 'x', 'z',   1, - 1, this.width, this.depth, - height_half, 3 ); // ny\n    buildPlane( 'x', 'y',   1, - 1, this.width, this.height, depth_half, 4 ); // pz\n    buildPlane( 'x', 'y', - 1, - 1, this.width, this.height, - depth_half, 5 ); // nz\n\n    function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {\n\n        var w, ix, iy,\n            gridX = scope.widthSegments,\n            gridY = scope.heightSegments,\n            width_half = width / 2,\n            height_half = height / 2,\n            offset = scope.vertices.length;\n\n        if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {\n\n            w = 'z';\n\n        } else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {\n\n            w = 'y';\n            gridY = scope.depthSegments;\n\n        } else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {\n\n            w = 'x';\n            gridX = scope.depthSegments;\n\n        }\n\n        var gridX1 = gridX + 1,\n            gridY1 = gridY + 1,\n            segment_width = width / gridX,\n            segment_height = height / gridY,\n            normal = new THREE.Vector3();\n\n        normal[ w ] = depth > 0 ? 1 : - 1;\n\n        for ( iy = 0; iy < gridY1; iy ++ ) {\n\n            for ( ix = 0; ix < gridX1; ix ++ ) {\n\n                var vector = new THREE.Vector3();\n                vector[ u ] = ( ix * segment_width - width_half ) * udir;\n                vector[ v ] = ( iy * segment_height - height_half ) * vdir;\n                vector[ w ] = depth;\n\n                scope.vertices.push( vector );\n\n            }\n\n        }\n\n        for ( iy = 0; iy < gridY; iy++ ) {\n\n            for ( ix = 0; ix < gridX; ix++ ) {\n\n                var a = ix + gridX1 * iy;\n                var b = ix + gridX1 * ( iy + 1 );\n                var c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n                var d = ( ix + 1 ) + gridX1 * iy;\n\n                var uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );\n                var uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );\n                var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );\n                var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );\n\n                var face = new THREE.Face3( a + offset, b + offset, d + offset );\n                face.normal.copy( normal );\n                face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\n                face.materialIndex = materialIndex;\n\n                scope.faces.push( face );\n                scope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n                face = new THREE.Face3( b + offset, c + offset, d + offset );\n                face.normal.copy( normal );\n                face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\n                face.materialIndex = materialIndex;\n\n                scope.faces.push( face );\n                scope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n            }\n\n        }\n\n    }\n\n    this.computeCentroids();\n    this.mergeVertices();\n\n};\n\nTHREE.CubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded ) {\n\n    THREE.Geometry.call( this );\n\n    this.radiusTop = radiusTop = radiusTop !== undefined ? radiusTop : 20;\n    this.radiusBottom = radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n    this.height = height = height !== undefined ? height : 100;\n\n    this.radialSegments = radialSegments = radialSegments || 8;\n    this.heightSegments = heightSegments = heightSegments || 1;\n\n    this.openEnded = openEnded = openEnded !== undefined ? openEnded : false;\n\n    var heightHalf = height / 2;\n\n    var x, y, vertices = [], uvs = [];\n\n    for ( y = 0; y <= heightSegments; y ++ ) {\n\n        var verticesRow = [];\n        var uvsRow = [];\n\n        var v = y / heightSegments;\n        var radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n        for ( x = 0; x <= radialSegments; x ++ ) {\n\n            var u = x / radialSegments;\n\n            var vertex = new THREE.Vector3();\n            vertex.x = radius * Math.sin( u * Math.PI * 2 );\n            vertex.y = - v * height + heightHalf;\n            vertex.z = radius * Math.cos( u * Math.PI * 2 );\n\n            this.vertices.push( vertex );\n\n            verticesRow.push( this.vertices.length - 1 );\n            uvsRow.push( new THREE.Vector2( u, 1 - v ) );\n\n        }\n\n        vertices.push( verticesRow );\n        uvs.push( uvsRow );\n\n    }\n\n    var tanTheta = ( radiusBottom - radiusTop ) / height;\n    var na, nb;\n\n    for ( x = 0; x < radialSegments; x ++ ) {\n\n        if ( radiusTop !== 0 ) {\n\n            na = this.vertices[ vertices[ 0 ][ x ] ].clone();\n            nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();\n\n        } else {\n\n            na = this.vertices[ vertices[ 1 ][ x ] ].clone();\n            nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();\n\n        }\n\n        na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();\n        nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();\n\n        for ( y = 0; y < heightSegments; y ++ ) {\n\n            var v1 = vertices[ y ][ x ];\n            var v2 = vertices[ y + 1 ][ x ];\n            var v3 = vertices[ y + 1 ][ x + 1 ];\n            var v4 = vertices[ y ][ x + 1 ];\n\n            var n1 = na.clone();\n            var n2 = na.clone();\n            var n3 = nb.clone();\n            var n4 = nb.clone();\n\n            var uv1 = uvs[ y ][ x ].clone();\n            var uv2 = uvs[ y + 1 ][ x ].clone();\n            var uv3 = uvs[ y + 1 ][ x + 1 ].clone();\n            var uv4 = uvs[ y ][ x + 1 ].clone();\n\n            this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );\n            this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );\n\n            this.faces.push( new THREE.Face3( v2, v3, v4, [ n2, n3, n4 ] ) );\n            this.faceVertexUvs[ 0 ].push( [ uv2, uv3, uv4 ] );\n\n        }\n\n    }\n\n    // top cap\n\n    if ( openEnded === false && radiusTop > 0 ) {\n\n        this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );\n\n        for ( x = 0; x < radialSegments; x ++ ) {\n\n            var v1 = vertices[ 0 ][ x ];\n            var v2 = vertices[ 0 ][ x + 1 ];\n            var v3 = this.vertices.length - 1;\n\n            var n1 = new THREE.Vector3( 0, 1, 0 );\n            var n2 = new THREE.Vector3( 0, 1, 0 );\n            var n3 = new THREE.Vector3( 0, 1, 0 );\n\n            var uv1 = uvs[ 0 ][ x ].clone();\n            var uv2 = uvs[ 0 ][ x + 1 ].clone();\n            var uv3 = new THREE.Vector2( uv2.u, 0 );\n\n            this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\n            this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\n\n        }\n\n    }\n\n    // bottom cap\n\n    if ( openEnded === false && radiusBottom > 0 ) {\n\n        this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );\n\n        for ( x = 0; x < radialSegments; x ++ ) {\n\n            var v1 = vertices[ y ][ x + 1 ];\n            var v2 = vertices[ y ][ x ];\n            var v3 = this.vertices.length - 1;\n\n            var n1 = new THREE.Vector3( 0, - 1, 0 );\n            var n2 = new THREE.Vector3( 0, - 1, 0 );\n            var n3 = new THREE.Vector3( 0, - 1, 0 );\n\n            var uv1 = uvs[ y ][ x + 1 ].clone();\n            var uv2 = uvs[ y ][ x ].clone();\n            var uv3 = new THREE.Vector2( uv2.u, 1 );\n\n            this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\n            this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\n\n        }\n\n    }\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n\n}\n\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n *\n *  material: <int> // material index for front and back faces\n *  extrudeMaterial: <int> // material index for extrusion and beveled faces\n *  uvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\n    if ( typeof( shapes ) === \"undefined\" ) {\n        shapes = [];\n        return;\n    }\n\n    THREE.Geometry.call( this );\n\n    shapes = shapes instanceof Array ? shapes : [ shapes ];\n\n    this.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();\n\n    this.addShapeList( shapes, options );\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n\n    // can't really use automatic vertex normals\n    // as then front and back sides get smoothed too\n    // should do separate smoothing just for sides\n\n    //this.computeVertexNormals();\n\n    //console.log( \"took\", ( Date.now() - startTime ) );\n\n};\n\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n    var sl = shapes.length;\n\n    for ( var s = 0; s < sl; s ++ ) {\n        var shape = shapes[ s ];\n        this.addShape( shape, options );\n    }\n};\n\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n    var amount = options.amount !== undefined ? options.amount : 100;\n\n    var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n    var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n    var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n    var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n    var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    var steps = options.steps !== undefined ? options.steps : 1;\n\n    var extrudePath = options.extrudePath;\n    var extrudePts, extrudeByPath = false;\n\n    var material = options.material;\n    var extrudeMaterial = options.extrudeMaterial;\n\n    // Use default WorldUVGenerator if no UV generators are specified.\n    var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\n    var shapebb = this.shapebb;\n    //shapebb = shape.getBoundingBox();\n\n\n\n    var splineTube, binormal, normal, position2;\n    if ( extrudePath ) {\n\n        extrudePts = extrudePath.getSpacedPoints( steps );\n\n        extrudeByPath = true;\n        bevelEnabled = false; // bevels not supported for path extrusion\n\n        // SETUP TNB variables\n\n        // Reuse TNB from TubeGeomtry for now.\n        // TODO1 - have a .isClosed in spline?\n\n        splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);\n\n        // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n        binormal = new THREE.Vector3();\n        normal = new THREE.Vector3();\n        position2 = new THREE.Vector3();\n\n    }\n\n    // Safeguards if bevels are not enabled\n\n    if ( ! bevelEnabled ) {\n\n        bevelSegments = 0;\n        bevelThickness = 0;\n        bevelSize = 0;\n\n    }\n\n    // Variables initalization\n\n    var ahole, h, hl; // looping of holes\n    var scope = this;\n    var bevelPoints = [];\n\n    var shapesOffset = this.vertices.length;\n\n    var shapePoints = shape.extractPoints( curveSegments );\n\n    var vertices = shapePoints.shape;\n    var holes = shapePoints.holes;\n\n    var reverse = !THREE.Shape.Utils.isClockWise( vertices ) ;\n\n    if ( reverse ) {\n\n        vertices = vertices.reverse();\n\n        // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n        for ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n            ahole = holes[ h ];\n\n            if ( THREE.Shape.Utils.isClockWise( ahole ) ) {\n\n                holes[ h ] = ahole.reverse();\n\n            }\n\n        }\n\n        reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n    }\n\n\n    var faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );\n\n    /* Vertices */\n\n    var contour = vertices; // vertices has all points but contour has only points of circumference\n\n    for ( h = 0, hl = holes.length;  h < hl; h ++ ) {\n\n        ahole = holes[ h ];\n\n        vertices = vertices.concat( ahole );\n\n    }\n\n\n    function scalePt2 ( pt, vec, size ) {\n\n        if ( !vec ) console.log( \"die\" );\n\n        return vec.clone().multiplyScalar( size ).add( pt );\n\n    }\n\n    var b, bs, t, z,\n        vert, vlen = vertices.length,\n        face, flen = faces.length,\n        cont, clen = contour.length;\n\n\n    // Find directions for point movement\n\n    var RAD_TO_DEGREES = 180 / Math.PI;\n\n\n    function getBevelVec( pt_i, pt_j, pt_k ) {\n\n        // Algorithm 2\n\n        return getBevelVec2( pt_i, pt_j, pt_k );\n\n    }\n\n    function getBevelVec1( pt_i, pt_j, pt_k ) {\n\n        var anglea = Math.atan2( pt_j.y - pt_i.y, pt_j.x - pt_i.x );\n        var angleb = Math.atan2( pt_k.y - pt_i.y, pt_k.x - pt_i.x );\n\n        if ( anglea > angleb ) {\n\n            angleb += Math.PI * 2;\n\n        }\n\n        var anglec = ( anglea + angleb ) / 2;\n\n\n        //console.log('angle1', anglea * RAD_TO_DEGREES,'angle2', angleb * RAD_TO_DEGREES, 'anglec', anglec *RAD_TO_DEGREES);\n\n        var x = - Math.cos( anglec );\n        var y = - Math.sin( anglec );\n\n        var vec = new THREE.Vector2( x, y ); //.normalize();\n\n        return vec;\n\n    }\n\n    function getBevelVec2( pt_i, pt_j, pt_k ) {\n\n        var a = THREE.ExtrudeGeometry.__v1,\n            b = THREE.ExtrudeGeometry.__v2,\n            v_hat = THREE.ExtrudeGeometry.__v3,\n            w_hat = THREE.ExtrudeGeometry.__v4,\n            p = THREE.ExtrudeGeometry.__v5,\n            q = THREE.ExtrudeGeometry.__v6,\n            v, w,\n            v_dot_w_hat, q_sub_p_dot_w_hat,\n            s, intersection;\n\n        // good reading for line-line intersection\n        // http://sputsoft.com/blog/2010/03/line-line-intersection.html\n\n        // define a as vector j->i\n        // define b as vectot k->i\n\n        a.set( pt_i.x - pt_j.x, pt_i.y - pt_j.y );\n        b.set( pt_i.x - pt_k.x, pt_i.y - pt_k.y );\n\n        // get unit vectors\n\n        v = a.normalize();\n        w = b.normalize();\n\n        // normals from pt i\n\n        v_hat.set( -v.y, v.x );\n        w_hat.set( w.y, -w.x );\n\n        // pts from i\n\n        p.copy( pt_i ).add( v_hat );\n        q.copy( pt_i ).add( w_hat );\n\n        if ( p.equals( q ) ) {\n\n            //console.log(\"Warning: lines are straight\");\n            return w_hat.clone();\n\n        }\n\n        // Points from j, k. helps prevents points cross overover most of the time\n\n        p.copy( pt_j ).add( v_hat );\n        q.copy( pt_k ).add( w_hat );\n\n        v_dot_w_hat = v.dot( w_hat );\n        q_sub_p_dot_w_hat = q.sub( p ).dot( w_hat );\n\n        // We should not reach these conditions\n\n        if ( v_dot_w_hat === 0 ) {\n\n            console.log( \"Either infinite or no solutions!\" );\n\n            if ( q_sub_p_dot_w_hat === 0 ) {\n\n                console.log( \"Its finite solutions.\" );\n\n            } else {\n\n                console.log( \"Too bad, no solutions.\" );\n\n            }\n\n        }\n\n        s = q_sub_p_dot_w_hat / v_dot_w_hat;\n\n        if ( s < 0 ) {\n\n            // in case of emergecy, revert to algorithm 1.\n\n            return getBevelVec1( pt_i, pt_j, pt_k );\n\n        }\n\n        intersection = v.multiplyScalar( s ).add( p );\n\n        return intersection.sub( pt_i ).clone(); // Don't normalize!, otherwise sharp corners become ugly\n\n    }\n\n    var contourMovements = [];\n\n    for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n        if ( j === il ) j = 0;\n        if ( k === il ) k = 0;\n\n        //  (j)---(i)---(k)\n        // console.log('i,j,k', i, j , k)\n\n        var pt_i = contour[ i ];\n        var pt_j = contour[ j ];\n        var pt_k = contour[ k ];\n\n        contourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n    }\n\n    var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n    for ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n        ahole = holes[ h ];\n\n        oneHoleMovements = [];\n\n        for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n            if ( j === il ) j = 0;\n            if ( k === il ) k = 0;\n\n            //  (j)---(i)---(k)\n            oneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n        }\n\n        holesMovements.push( oneHoleMovements );\n        verticesMovements = verticesMovements.concat( oneHoleMovements );\n\n    }\n\n\n    // Loop bevelSegments, 1 for the front, 1 for the back\n\n    for ( b = 0; b < bevelSegments; b ++ ) {\n        //for ( b = bevelSegments; b > 0; b -- ) {\n\n        t = b / bevelSegments;\n        z = bevelThickness * ( 1 - t );\n\n        //z = bevelThickness * t;\n        bs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved\n        //bs = bevelSize * t ; // linear\n\n        // contract shape\n\n        for ( i = 0, il = contour.length; i < il; i ++ ) {\n\n            vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n            //vert = scalePt( contour[ i ], contourCentroid, bs, false );\n            v( vert.x, vert.y,  - z );\n\n        }\n\n        // expand holes\n\n        for ( h = 0, hl = holes.length; h < hl; h++ ) {\n\n            ahole = holes[ h ];\n            oneHoleMovements = holesMovements[ h ];\n\n            for ( i = 0, il = ahole.length; i < il; i++ ) {\n\n                vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n                //vert = scalePt( ahole[ i ], holesCentroids[ h ], bs, true );\n\n                v( vert.x, vert.y,  -z );\n\n            }\n\n        }\n\n    }\n\n    bs = bevelSize;\n\n    // Back facing vertices\n\n    for ( i = 0; i < vlen; i ++ ) {\n\n        vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n        if ( !extrudeByPath ) {\n\n            v( vert.x, vert.y, 0 );\n\n        } else {\n\n            // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n            normal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);\n            binormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);\n\n            position2.copy( extrudePts[0] ).add(normal).add(binormal);\n\n            v( position2.x, position2.y, position2.z );\n\n        }\n\n    }\n\n    // Add stepped vertices...\n    // Including front facing vertices\n\n    var s;\n\n    for ( s = 1; s <= steps; s ++ ) {\n\n        for ( i = 0; i < vlen; i ++ ) {\n\n            vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n            if ( !extrudeByPath ) {\n\n                v( vert.x, vert.y, amount / steps * s );\n\n            } else {\n\n                // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n                normal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );\n                binormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );\n\n                position2.copy( extrudePts[s] ).add( normal ).add( binormal );\n\n                v( position2.x, position2.y, position2.z );\n\n            }\n\n        }\n\n    }\n\n\n    // Add bevel segments planes\n\n    //for ( b = 1; b <= bevelSegments; b ++ ) {\n    for ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n        t = b / bevelSegments;\n        z = bevelThickness * ( 1 - t );\n        //bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n        bs = bevelSize * Math.sin ( t * Math.PI/2 ) ;\n\n        // contract shape\n\n        for ( i = 0, il = contour.length; i < il; i ++ ) {\n\n            vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n            v( vert.x, vert.y,  amount + z );\n\n        }\n\n        // expand holes\n\n        for ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n            ahole = holes[ h ];\n            oneHoleMovements = holesMovements[ h ];\n\n            for ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n                vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n                if ( !extrudeByPath ) {\n\n                    v( vert.x, vert.y,  amount + z );\n\n                } else {\n\n                    v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n                }\n\n            }\n\n        }\n\n    }\n\n    /* Faces */\n\n    // Top and bottom faces\n\n    buildLidFaces();\n\n    // Sides faces\n\n    buildSideFaces();\n\n\n    /////  Internal functions\n\n    function buildLidFaces() {\n\n        if ( bevelEnabled ) {\n\n            var layer = 0 ; // steps + 1\n            var offset = vlen * layer;\n\n            // Bottom faces\n\n            for ( i = 0; i < flen; i ++ ) {\n\n                face = faces[ i ];\n                f3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset, true );\n\n            }\n\n            layer = steps + bevelSegments * 2;\n            offset = vlen * layer;\n\n            // Top faces\n\n            for ( i = 0; i < flen; i ++ ) {\n\n                face = faces[ i ];\n                f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset, false );\n\n            }\n\n        } else {\n\n            // Bottom faces\n\n            for ( i = 0; i < flen; i++ ) {\n\n                face = faces[ i ];\n                f3( face[ 2 ], face[ 1 ], face[ 0 ], true );\n\n            }\n\n            // Top faces\n\n            for ( i = 0; i < flen; i ++ ) {\n\n                face = faces[ i ];\n                f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps, false );\n\n            }\n        }\n\n    }\n\n    // Create faces for the z-sides of the shape\n\n    function buildSideFaces() {\n\n        var layeroffset = 0;\n        sidewalls( contour, layeroffset );\n        layeroffset += contour.length;\n\n        for ( h = 0, hl = holes.length;  h < hl; h ++ ) {\n\n            ahole = holes[ h ];\n            sidewalls( ahole, layeroffset );\n\n            //, true\n            layeroffset += ahole.length;\n\n        }\n\n    }\n\n    function sidewalls( contour, layeroffset ) {\n\n        var j, k;\n        i = contour.length;\n\n        while ( --i >= 0 ) {\n\n            j = i;\n            k = i - 1;\n            if ( k < 0 ) k = contour.length - 1;\n\n            //console.log('b', i,j, i-1, k,vertices.length);\n\n            var s = 0, sl = steps  + bevelSegments * 2;\n\n            for ( s = 0; s < sl; s ++ ) {\n\n                var slen1 = vlen * s;\n                var slen2 = vlen * ( s + 1 );\n\n                var a = layeroffset + j + slen1,\n                    b = layeroffset + k + slen1,\n                    c = layeroffset + k + slen2,\n                    d = layeroffset + j + slen2;\n\n                f4( a, b, c, d, contour, s, sl, j, k );\n\n            }\n        }\n\n    }\n\n\n    function v( x, y, z ) {\n\n        scope.vertices.push( new THREE.Vector3( x, y, z ) );\n\n    }\n\n    function f3( a, b, c, isBottom ) {\n\n        a += shapesOffset;\n        b += shapesOffset;\n        c += shapesOffset;\n\n        // normal, color, material\n        scope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\n        var uvs = isBottom ? uvgen.generateBottomUV( scope, shape, options, a, b, c ) : uvgen.generateTopUV( scope, shape, options, a, b, c );\n\n        scope.faceVertexUvs[ 0 ].push( uvs );\n\n    }\n\n    function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n        a += shapesOffset;\n        b += shapesOffset;\n        c += shapesOffset;\n        d += shapesOffset;\n\n        scope.faces.push( new THREE.Face3( a, b, d, null, null, extrudeMaterial ) );\n        scope.faces.push( new THREE.Face3( b, c, d, null, null, extrudeMaterial ) );\n\n        var uvs = uvgen.generateSideWallUV( scope, shape, wallContour, options, a, b, c, d,\n            stepIndex, stepsLength, contourIndex1, contourIndex2 );\n\n        scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n        scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n    }\n\n};\n\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\n    generateTopUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {\n        var ax = geometry.vertices[ indexA ].x,\n            ay = geometry.vertices[ indexA ].y,\n\n            bx = geometry.vertices[ indexB ].x,\n            by = geometry.vertices[ indexB ].y,\n\n            cx = geometry.vertices[ indexC ].x,\n            cy = geometry.vertices[ indexC ].y;\n\n        return [\n            new THREE.Vector2( ax, ay ),\n            new THREE.Vector2( bx, by ),\n            new THREE.Vector2( cx, cy )\n        ];\n\n    },\n\n    generateBottomUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {\n\n        return this.generateTopUV( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC );\n\n    },\n\n    generateSideWallUV: function( geometry, extrudedShape, wallContour, extrudeOptions,\n                                  indexA, indexB, indexC, indexD, stepIndex, stepsLength,\n                                  contourIndex1, contourIndex2 ) {\n\n        var ax = geometry.vertices[ indexA ].x,\n            ay = geometry.vertices[ indexA ].y,\n            az = geometry.vertices[ indexA ].z,\n\n            bx = geometry.vertices[ indexB ].x,\n            by = geometry.vertices[ indexB ].y,\n            bz = geometry.vertices[ indexB ].z,\n\n            cx = geometry.vertices[ indexC ].x,\n            cy = geometry.vertices[ indexC ].y,\n            cz = geometry.vertices[ indexC ].z,\n\n            dx = geometry.vertices[ indexD ].x,\n            dy = geometry.vertices[ indexD ].y,\n            dz = geometry.vertices[ indexD ].z;\n\n        if ( Math.abs( ay - by ) < 0.01 ) {\n            return [\n                new THREE.Vector2( ax, 1 - az ),\n                new THREE.Vector2( bx, 1 - bz ),\n                new THREE.Vector2( cx, 1 - cz ),\n                new THREE.Vector2( dx, 1 - dz )\n            ];\n        } else {\n            return [\n                new THREE.Vector2( ay, 1 - az ),\n                new THREE.Vector2( by, 1 - bz ),\n                new THREE.Vector2( cy, 1 - cz ),\n                new THREE.Vector2( dy, 1 - dz )\n            ];\n        }\n    }\n};\n\nTHREE.ExtrudeGeometry.__v1 = new THREE.Vector2();\nTHREE.ExtrudeGeometry.__v2 = new THREE.Vector2();\nTHREE.ExtrudeGeometry.__v3 = new THREE.Vector2();\nTHREE.ExtrudeGeometry.__v4 = new THREE.Vector2();\nTHREE.ExtrudeGeometry.__v5 = new THREE.Vector2();\nTHREE.ExtrudeGeometry.__v6 = new THREE.Vector2();\n\n/**\n * @author jonobr1 / http://jonobr1.com\n *\n * Creates a one-sided polygonal geometry from a path shape. Similar to\n * ExtrudeGeometry.\n *\n * parameters = {\n *\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n *\n *\tmaterial: <int> // material index for front and back faces\n *\tuvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ShapeGeometry = function ( shapes, options ) {\n\n    THREE.Geometry.call( this );\n\n    if ( shapes instanceof Array === false ) shapes = [ shapes ];\n\n    this.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();\n\n    this.addShapeList( shapes, options );\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n\n};\n\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * Add an array of shapes to THREE.ShapeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n    for ( var i = 0, l = shapes.length; i < l; i++ ) {\n\n        this.addShape( shapes[ i ], options );\n\n    }\n\n    return this;\n\n};\n\n/**\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n    if ( options === undefined ) options = {};\n    var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n    var material = options.material;\n    var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n    var shapebb = this.shapebb;\n\n    //\n\n    var i, l, hole, s;\n\n    var shapesOffset = this.vertices.length;\n    var shapePoints = shape.extractPoints( curveSegments );\n\n    var vertices = shapePoints.shape;\n    var holes = shapePoints.holes;\n\n    var reverse = !THREE.Shape.Utils.isClockWise( vertices );\n\n    if ( reverse ) {\n\n        vertices = vertices.reverse();\n\n        // Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n        for ( i = 0, l = holes.length; i < l; i++ ) {\n\n            hole = holes[ i ];\n\n            if ( THREE.Shape.Utils.isClockWise( hole ) ) {\n\n                holes[ i ] = hole.reverse();\n\n            }\n\n        }\n\n        reverse = false;\n\n    }\n\n    var faces = THREE.Shape.Utils.triangulateShape( vertices, holes );\n\n    // Vertices\n\n    var contour = vertices;\n\n    for ( i = 0, l = holes.length; i < l; i++ ) {\n\n        hole = holes[ i ];\n        vertices = vertices.concat( hole );\n\n    }\n\n    //\n\n    var vert, vlen = vertices.length;\n    var face, flen = faces.length;\n    var cont, clen = contour.length;\n\n    for ( i = 0; i < vlen; i++ ) {\n\n        vert = vertices[ i ];\n\n        this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\n    }\n\n    for ( i = 0; i < flen; i++ ) {\n\n        face = faces[ i ];\n\n        var a = face[ 0 ] + shapesOffset;\n        var b = face[ 1 ] + shapesOffset;\n        var c = face[ 2 ] + shapesOffset;\n\n        this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n        this.faceVertexUvs[ 0 ].push( uvgen.generateBottomUV( this, shape, options, a, b, c ) );\n\n    }\n\n};\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://exocortex.com\n */\n\n// points - to create a closed torus, one must use a set of points \n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2*PI) range of the lathed section\n//    2*pi is a closed lathe, less than 2PI is a portion.\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\n    THREE.Geometry.call( this );\n\n    segments = segments || 12;\n    phiStart = phiStart || 0;\n    phiLength = phiLength || 2 * Math.PI;\n\n    var inversePointLength = 1.0 / ( points.length - 1 );\n    var inverseSegments = 1.0 / segments;\n\n    for ( var i = 0, il = segments; i <= il; i ++ ) {\n\n        var phi = phiStart + i * inverseSegments * phiLength;\n\n        var c = Math.cos( phi ),\n            s = Math.sin( phi );\n\n        for ( var j = 0, jl = points.length; j < jl; j ++ ) {\n\n            var pt = points[ j ];\n\n            var vertex = new THREE.Vector3();\n\n            vertex.x = c * pt.x - s * pt.y;\n            vertex.y = s * pt.x + c * pt.y;\n            vertex.z = pt.z;\n\n            this.vertices.push( vertex );\n\n        }\n\n    }\n\n    var np = points.length;\n\n    for ( var i = 0, il = segments; i < il; i ++ ) {\n\n        for ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {\n\n            var base = j + np * i;\n            var a = base;\n            var b = base + np;\n            var c = base + 1 + np;\n            var d = base + 1;\n\n            var u0 = i * inverseSegments;\n            var v0 = j * inversePointLength;\n            var u1 = u0 + inverseSegments;\n            var v1 = v0 + inversePointLength;\n\n            this.faces.push( new THREE.Face3( a, b, d ) );\n\n            this.faceVertexUvs[ 0 ].push( [\n\n                new THREE.Vector2( u0, v0 ),\n                new THREE.Vector2( u1, v0 ),\n                new THREE.Vector2( u0, v1 )\n\n            ] );\n\n            this.faces.push( new THREE.Face3( b, c, d ) );\n\n            this.faceVertexUvs[ 0 ].push( [\n\n                new THREE.Vector2( u1, v0 ),\n                new THREE.Vector2( u1, v1 ),\n                new THREE.Vector2( u0, v1 )\n\n            ] );\n\n\n        }\n\n    }\n\n    this.mergeVertices();\n    this.computeCentroids();\n    this.computeFaceNormals();\n    this.computeVertexNormals();\n\n};\n\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n    THREE.Geometry.call( this );\n\n    this.width = width;\n    this.height = height;\n\n    this.widthSegments = widthSegments || 1;\n    this.heightSegments = heightSegments || 1;\n\n    var ix, iz;\n    var width_half = width / 2;\n    var height_half = height / 2;\n\n    var gridX = this.widthSegments;\n    var gridZ = this.heightSegments;\n\n    var gridX1 = gridX + 1;\n    var gridZ1 = gridZ + 1;\n\n    var segment_width = this.width / gridX;\n    var segment_height = this.height / gridZ;\n\n    var normal = new THREE.Vector3( 0, 0, 1 );\n\n    for ( iz = 0; iz < gridZ1; iz ++ ) {\n\n        for ( ix = 0; ix < gridX1; ix ++ ) {\n\n            var x = ix * segment_width - width_half;\n            var y = iz * segment_height - height_half;\n\n            this.vertices.push( new THREE.Vector3( x, - y, 0 ) );\n\n        }\n\n    }\n\n    for ( iz = 0; iz < gridZ; iz ++ ) {\n\n        for ( ix = 0; ix < gridX; ix ++ ) {\n\n            var a = ix + gridX1 * iz;\n            var b = ix + gridX1 * ( iz + 1 );\n            var c = ( ix + 1 ) + gridX1 * ( iz + 1 );\n            var d = ( ix + 1 ) + gridX1 * iz;\n\n            var uva = new THREE.Vector2( ix / gridX, 1 - iz / gridZ );\n            var uvb = new THREE.Vector2( ix / gridX, 1 - ( iz + 1 ) / gridZ );\n            var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iz + 1 ) / gridZ );\n            var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iz / gridZ );\n\n            var face = new THREE.Face3( a, b, d );\n            face.normal.copy( normal );\n            face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\n\n            this.faces.push( face );\n            this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n            face = new THREE.Face3( b, c, d );\n            face.normal.copy( normal );\n            face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\n\n            this.faces.push( face );\n            this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n        }\n\n    }\n\n    this.computeCentroids();\n\n};\n\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author Kaleb Murphy\n */\n\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n    THREE.Geometry.call( this );\n\n    innerRadius = innerRadius || 0;\n    outerRadius = outerRadius || 50;\n\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n    phiSegments = phiSegments !== undefined ? Math.max( 3, phiSegments ) : 8;\n\n    var i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\n    for ( i = 0; i <= phiSegments; i ++ ) { // concentric circles inside ring\n\n        for ( o = 0; o <= thetaSegments; o ++ ) { // number of segments per circle\n\n            var vertex = new THREE.Vector3();\n            var segment = thetaStart + o / thetaSegments * thetaLength;\n\n            vertex.x = radius * Math.cos( segment );\n            vertex.y = radius * Math.sin( segment );\n\n            this.vertices.push( vertex );\n            uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, - ( vertex.y / radius + 1 ) / 2 + 1 ) );\n        }\n\n        radius += radiusStep;\n\n    }\n\n    var n = new THREE.Vector3( 0, 0, 1 );\n\n    for ( i = 0; i < phiSegments; i ++ ) { // concentric circles inside ring\n\n        var thetaSegment = i * thetaSegments;\n\n        for ( o = 0; o <= thetaSegments; o ++ ) { // number of segments per circle\n\n            var segment = o + thetaSegment;\n\n            var v1 = segment + i;\n            var v2 = segment + thetaSegments + i;\n            var v3 = segment + thetaSegments + 1 + i;\n\n            this.faces.push( new THREE.Face3( v1, v2, v3, [ n, n, n ] ) );\n            this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ], uvs[ v2 ], uvs[ v3 ] ]);\n\n            v1 = segment + i;\n            v2 = segment + thetaSegments + 1 + i;\n            v3 = segment + 1 + i;\n\n            this.faces.push( new THREE.Face3( v1, v2, v3, [ n, n, n ] ) );\n            this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ], uvs[ v2 ], uvs[ v3 ] ]);\n\n        }\n    }\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n    THREE.Geometry.call( this );\n\n    this.radius = radius = radius || 50;\n\n    this.widthSegments = widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n    this.heightSegments = heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n    this.phiStart = phiStart = phiStart !== undefined ? phiStart : 0;\n    this.phiLength = phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n    this.thetaStart = thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    this.thetaLength = thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n    var x, y, vertices = [], uvs = [];\n\n    for ( y = 0; y <= heightSegments; y ++ ) {\n\n        var verticesRow = [];\n        var uvsRow = [];\n\n        for ( x = 0; x <= widthSegments; x ++ ) {\n\n            var u = x / widthSegments;\n            var v = y / heightSegments;\n\n            var vertex = new THREE.Vector3();\n            vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n            vertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n            vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n            this.vertices.push( vertex );\n\n            verticesRow.push( this.vertices.length - 1 );\n            uvsRow.push( new THREE.Vector2( u, 1 - v ) );\n\n        }\n\n        vertices.push( verticesRow );\n        uvs.push( uvsRow );\n\n    }\n\n    for ( y = 0; y < this.heightSegments; y ++ ) {\n\n        for ( x = 0; x < this.widthSegments; x ++ ) {\n\n            var v1 = vertices[ y ][ x + 1 ];\n            var v2 = vertices[ y ][ x ];\n            var v3 = vertices[ y + 1 ][ x ];\n            var v4 = vertices[ y + 1 ][ x + 1 ];\n\n            var n1 = this.vertices[ v1 ].clone().normalize();\n            var n2 = this.vertices[ v2 ].clone().normalize();\n            var n3 = this.vertices[ v3 ].clone().normalize();\n            var n4 = this.vertices[ v4 ].clone().normalize();\n\n            var uv1 = uvs[ y ][ x + 1 ].clone();\n            var uv2 = uvs[ y ][ x ].clone();\n            var uv3 = uvs[ y + 1 ][ x ].clone();\n            var uv4 = uvs[ y + 1 ][ x + 1 ].clone();\n\n            if ( Math.abs( this.vertices[ v1 ].y ) === this.radius ) {\n\n                this.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );\n                this.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );\n\n            } else if ( Math.abs( this.vertices[ v3 ].y ) === this.radius ) {\n\n                this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\n                this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\n\n            } else {\n\n                this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );\n                this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );\n\n                this.faces.push( new THREE.Face3( v2, v3, v4, [ n2, n3, n4 ] ) );\n                this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );\n\n            }\n\n        }\n\n    }\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * For creating 3D text geometry in three.js\n *\n * Text = 3D Text\n *\n * parameters = {\n *  size: \t\t\t<float>, \t// size of the text\n *  height: \t\t<float>, \t// thickness to extrude text\n *  curveSegments: \t<int>,\t\t// number of points on the curves\n *\n *  font: \t\t\t<string>,\t\t// font name\n *  weight: \t\t<string>,\t\t// font weight (normal, bold)\n *  style: \t\t\t<string>,\t\t// font style  (normal, italics)\n *\n *  bevelEnabled:\t<bool>,\t\t\t// turn on bevel\n *  bevelThickness: <float>, \t\t// how deep into text bevel goes\n *  bevelSize:\t\t<float>, \t\t// how far from text outline is bevel\n *  }\n *\n */\n\n/*\tUsage Examples\n\n // TextGeometry wrapper\n\n var text3d = new TextGeometry( text, options );\n\n // Complete manner\n\n var textShapes = THREE.FontUtils.generateShapes( text, options );\n var text3d = new ExtrudeGeometry( textShapes, options );\n\n */\n\n\nTHREE.TextGeometry = function ( text, parameters ) {\n\n    parameters = parameters || {};\n\n    var textShapes = THREE.FontUtils.generateShapes( text, parameters );\n\n    // translate parameters to ExtrudeGeometry API\n\n    parameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n    // defaults\n\n    if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n    if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n    if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n    THREE.ExtrudeGeometry.call( this, textShapes, parameters );\n\n};\n\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n */\n\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n    THREE.Geometry.call( this );\n\n    var scope = this;\n\n    this.radius = radius || 100;\n    this.tube = tube || 40;\n    this.radialSegments = radialSegments || 8;\n    this.tubularSegments = tubularSegments || 6;\n    this.arc = arc || Math.PI * 2;\n\n    var center = new THREE.Vector3(), uvs = [], normals = [];\n\n    for ( var j = 0; j <= this.radialSegments; j ++ ) {\n\n        for ( var i = 0; i <= this.tubularSegments; i ++ ) {\n\n            var u = i / this.tubularSegments * this.arc;\n            var v = j / this.radialSegments * Math.PI * 2;\n\n            center.x = this.radius * Math.cos( u );\n            center.y = this.radius * Math.sin( u );\n\n            var vertex = new THREE.Vector3();\n            vertex.x = ( this.radius + this.tube * Math.cos( v ) ) * Math.cos( u );\n            vertex.y = ( this.radius + this.tube * Math.cos( v ) ) * Math.sin( u );\n            vertex.z = this.tube * Math.sin( v );\n\n            this.vertices.push( vertex );\n\n            uvs.push( new THREE.Vector2( i / this.tubularSegments, j / this.radialSegments ) );\n            normals.push( vertex.clone().sub( center ).normalize() );\n\n        }\n    }\n\n\n    for ( var j = 1; j <= this.radialSegments; j ++ ) {\n\n        for ( var i = 1; i <= this.tubularSegments; i ++ ) {\n\n            var a = ( this.tubularSegments + 1 ) * j + i - 1;\n            var b = ( this.tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n            var c = ( this.tubularSegments + 1 ) * ( j - 1 ) + i;\n            var d = ( this.tubularSegments + 1 ) * j + i;\n\n            var face = new THREE.Face3( a, b, d, [ normals[ a ], normals[ b ], normals[ d ] ] );\n            face.normal.add( normals[ a ] );\n            face.normal.add( normals[ b ] );\n            face.normal.add( normals[ d ] );\n            face.normal.normalize();\n\n            this.faces.push( face );\n\n            this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );\n\n            face = new THREE.Face3( b, c, d, [ normals[ b ], normals[ c ], normals[ d ] ] );\n            face.normal.add( normals[ b ] );\n            face.normal.add( normals[ c ] );\n            face.normal.add( normals[ d ] );\n            face.normal.normalize();\n\n            this.faces.push( face );\n\n            this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\n        }\n\n    }\n\n    this.computeCentroids();\n\n};\n\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author oosmoxiecode\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\n */\n\nTHREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {\n\n    THREE.Geometry.call( this );\n\n    var scope = this;\n\n    this.radius = radius || 100;\n    this.tube = tube || 40;\n    this.radialSegments = radialSegments || 64;\n    this.tubularSegments = tubularSegments || 8;\n    this.p = p || 2;\n    this.q = q || 3;\n    this.heightScale = heightScale || 1;\n    this.grid = new Array( this.radialSegments );\n\n    var tang = new THREE.Vector3();\n    var n = new THREE.Vector3();\n    var bitan = new THREE.Vector3();\n\n    for ( var i = 0; i < this.radialSegments; ++ i ) {\n\n        this.grid[ i ] = new Array( this.tubularSegments );\n        var u = i / this.radialSegments * 2 * this.p * Math.PI;\n        var p1 = getPos( u, this.q, this.p, this.radius, this.heightScale );\n        var p2 = getPos( u + 0.01, this.q, this.p, this.radius, this.heightScale );\n        tang.subVectors( p2, p1 );\n        n.addVectors( p2, p1 );\n\n        bitan.crossVectors( tang, n );\n        n.crossVectors( bitan, tang );\n        bitan.normalize();\n        n.normalize();\n\n        for ( var j = 0; j < this.tubularSegments; ++ j ) {\n\n            var v = j / this.tubularSegments * 2 * Math.PI;\n            var cx = - this.tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n            var cy = this.tube * Math.sin( v );\n\n            var pos = new THREE.Vector3();\n            pos.x = p1.x + cx * n.x + cy * bitan.x;\n            pos.y = p1.y + cx * n.y + cy * bitan.y;\n            pos.z = p1.z + cx * n.z + cy * bitan.z;\n\n            this.grid[ i ][ j ] = scope.vertices.push( pos ) - 1;\n\n        }\n\n    }\n\n    for ( var i = 0; i < this.radialSegments; ++ i ) {\n\n        for ( var j = 0; j < this.tubularSegments; ++ j ) {\n\n            var ip = ( i + 1 ) % this.radialSegments;\n            var jp = ( j + 1 ) % this.tubularSegments;\n\n            var a = this.grid[ i ][ j ];\n            var b = this.grid[ ip ][ j ];\n            var c = this.grid[ ip ][ jp ];\n            var d = this.grid[ i ][ jp ];\n\n            var uva = new THREE.Vector2( i / this.radialSegments, j / this.tubularSegments );\n            var uvb = new THREE.Vector2( ( i + 1 ) / this.radialSegments, j / this.tubularSegments );\n            var uvc = new THREE.Vector2( ( i + 1 ) / this.radialSegments, ( j + 1 ) / this.tubularSegments );\n            var uvd = new THREE.Vector2( i / this.radialSegments, ( j + 1 ) / this.tubularSegments );\n\n            this.faces.push( new THREE.Face3( a, b, d ) );\n            this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n            this.faces.push( new THREE.Face3( b, c, d ) );\n            this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n        }\n    }\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n    this.computeVertexNormals();\n\n    function getPos( u, in_q, in_p, radius, heightScale ) {\n\n        var cu = Math.cos( u );\n        var su = Math.sin( u );\n        var quOverP = in_q / in_p * u;\n        var cs = Math.cos( quOverP );\n\n        var tx = radius * ( 2 + cs ) * 0.5 * cu;\n        var ty = radius * ( 2 + cs ) * su * 0.5;\n        var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;\n\n        return new THREE.Vector3( tx, ty, tz );\n\n    }\n\n};\n\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n *\n * Modified from the TorusKnotGeometry by @oosmoxiecode\n *\n * Creates a tube which extrudes along a 3d spline\n *\n * Uses parallel transport frames as described in\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n */\n\nTHREE.TubeGeometry = function( path, segments, radius, radialSegments, closed ) {\n\n    THREE.Geometry.call( this );\n\n    this.path = path;\n    this.segments = segments || 64;\n    this.radius = radius || 1;\n    this.radialSegments = radialSegments || 8;\n    this.closed = closed || false;\n\n    this.grid = [];\n\n    var scope = this,\n\n        tangent,\n        normal,\n        binormal,\n\n        numpoints = this.segments + 1,\n\n        x, y, z,\n        tx, ty, tz,\n        u, v,\n\n        cx, cy,\n        pos, pos2 = new THREE.Vector3(),\n        i, j,\n        ip, jp,\n        a, b, c, d,\n        uva, uvb, uvc, uvd;\n\n    var frames = new THREE.TubeGeometry.FrenetFrames( this.path, this.segments, this.closed ),\n        tangents = frames.tangents,\n        normals = frames.normals,\n        binormals = frames.binormals;\n\n    // proxy internals\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n\n    function vert( x, y, z ) {\n\n        return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\n    }\n\n\n    // consruct the grid\n\n    for ( i = 0; i < numpoints; i++ ) {\n\n        this.grid[ i ] = [];\n\n        u = i / ( numpoints - 1 );\n\n        pos = path.getPointAt( u );\n\n        tangent = tangents[ i ];\n        normal = normals[ i ];\n        binormal = binormals[ i ];\n\n        for ( j = 0; j < this.radialSegments; j++ ) {\n\n            v = j / this.radialSegments * 2 * Math.PI;\n\n            cx = -this.radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n            cy = this.radius * Math.sin( v );\n\n            pos2.copy( pos );\n            pos2.x += cx * normal.x + cy * binormal.x;\n            pos2.y += cx * normal.y + cy * binormal.y;\n            pos2.z += cx * normal.z + cy * binormal.z;\n\n            this.grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n        }\n    }\n\n\n    // construct the mesh\n\n    for ( i = 0; i < this.segments; i++ ) {\n\n        for ( j = 0; j < this.radialSegments; j++ ) {\n\n            ip = ( this.closed ) ? (i + 1) % this.segments : i + 1;\n            jp = (j + 1) % this.radialSegments;\n\n            a = this.grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n            b = this.grid[ ip ][ j ];\n            c = this.grid[ ip ][ jp ];\n            d = this.grid[ i ][ jp ];\n\n            uva = new THREE.Vector2( i / this.segments, j / this.radialSegments );\n            uvb = new THREE.Vector2( ( i + 1 ) / this.segments, j / this.radialSegments );\n            uvc = new THREE.Vector2( ( i + 1 ) / this.segments, ( j + 1 ) / this.radialSegments );\n            uvd = new THREE.Vector2( i / this.segments, ( j + 1 ) / this.radialSegments );\n\n            this.faces.push( new THREE.Face3( a, b, d ) );\n            this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n            this.faces.push( new THREE.Face3( b, c, d ) );\n            this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n        }\n    }\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n    this.computeVertexNormals();\n\n};\n\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\nTHREE.TubeGeometry.FrenetFrames = function(path, segments, closed) {\n\n    var\ttangent = new THREE.Vector3(),\n        normal = new THREE.Vector3(),\n        binormal = new THREE.Vector3(),\n\n        tangents = [],\n        normals = [],\n        binormals = [],\n\n        vec = new THREE.Vector3(),\n        mat = new THREE.Matrix4(),\n\n        numpoints = segments + 1,\n        theta,\n        epsilon = 0.0001,\n        smallest,\n\n        tx, ty, tz,\n        i, u, v;\n\n\n    // expose internals\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n\n    // compute the tangent vectors for each segment on the path\n\n    for ( i = 0; i < numpoints; i++ ) {\n\n        u = i / ( numpoints - 1 );\n\n        tangents[ i ] = path.getTangentAt( u );\n        tangents[ i ].normalize();\n\n    }\n\n    initialNormal3();\n\n    function initialNormal1(lastBinormal) {\n        // fixed start binormal. Has dangers of 0 vectors\n        normals[ 0 ] = new THREE.Vector3();\n        binormals[ 0 ] = new THREE.Vector3();\n        if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n        normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n        binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n    }\n\n    function initialNormal2() {\n\n        // This uses the Frenet-Serret formula for deriving binormal\n        var t2 = path.getTangentAt( epsilon );\n\n        normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n        binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n        normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n        binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n    }\n\n    function initialNormal3() {\n        // select an initial normal vector perpenicular to the first tangent vector,\n        // and in the direction of the smallest tangent xyz component\n\n        normals[ 0 ] = new THREE.Vector3();\n        binormals[ 0 ] = new THREE.Vector3();\n        smallest = Number.MAX_VALUE;\n        tx = Math.abs( tangents[ 0 ].x );\n        ty = Math.abs( tangents[ 0 ].y );\n        tz = Math.abs( tangents[ 0 ].z );\n\n        if ( tx <= smallest ) {\n            smallest = tx;\n            normal.set( 1, 0, 0 );\n        }\n\n        if ( ty <= smallest ) {\n            smallest = ty;\n            normal.set( 0, 1, 0 );\n        }\n\n        if ( tz <= smallest ) {\n            normal.set( 0, 0, 1 );\n        }\n\n        vec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n        normals[ 0 ].crossVectors( tangents[ 0 ], vec );\n        binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n    }\n\n\n    // compute the slowly-varying normal and binormal vectors for each segment on the path\n\n    for ( i = 1; i < numpoints; i++ ) {\n\n        normals[ i ] = normals[ i-1 ].clone();\n\n        binormals[ i ] = binormals[ i-1 ].clone();\n\n        vec.crossVectors( tangents[ i-1 ], tangents[ i ] );\n\n        if ( vec.length() > epsilon ) {\n\n            vec.normalize();\n\n            theta = Math.acos( THREE.Math.clamp( tangents[ i-1 ].dot( tangents[ i ] ), -1, 1 ) ); // clamp for floating pt errors\n\n            normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n        }\n\n        binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n    }\n\n\n    // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n    if ( closed ) {\n\n        theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints-1 ] ), -1, 1 ) );\n        theta /= ( numpoints - 1 );\n\n        if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {\n\n            theta = -theta;\n\n        }\n\n        for ( i = 1; i < numpoints; i++ ) {\n\n            // twist a little...\n            normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n            binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n        }\n\n    }\n};\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.PolyhedronGeometry = function ( vertices, faces, radius, detail ) {\n\n    THREE.Geometry.call( this );\n\n    radius = radius || 1;\n    detail = detail || 0;\n\n    var that = this;\n\n    for ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n        prepare( new THREE.Vector3( vertices[ i ][ 0 ], vertices[ i ][ 1 ], vertices[ i ][ 2 ] ) );\n\n    }\n\n    var midpoints = [], p = this.vertices;\n\n    var f = [];\n    for ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n        var v1 = p[ faces[ i ][ 0 ] ];\n        var v2 = p[ faces[ i ][ 1 ] ];\n        var v3 = p[ faces[ i ][ 2 ] ];\n\n        f[ i ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n    }\n\n    for ( var i = 0, l = f.length; i < l; i ++ ) {\n\n        subdivide(f[ i ], detail);\n\n    }\n\n\n    // Handle case when face straddles the seam\n\n    for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n        var uvs = this.faceVertexUvs[ 0 ][ i ];\n\n        var x0 = uvs[ 0 ].x;\n        var x1 = uvs[ 1 ].x;\n        var x2 = uvs[ 2 ].x;\n\n        var max = Math.max( x0, Math.max( x1, x2 ) );\n        var min = Math.min( x0, Math.min( x1, x2 ) );\n\n        if ( max > 0.9 && min < 0.1 ) { // 0.9 is somewhat arbitrary\n\n            if ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n            if ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n            if ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n        }\n\n    }\n\n\n    // Apply radius\n\n    for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n        this.vertices[ i ].multiplyScalar( radius );\n\n    }\n\n\n    // Merge vertices\n\n    this.mergeVertices();\n\n    this.computeCentroids();\n\n    this.computeFaceNormals();\n\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\n    // Project vector onto sphere's surface\n\n    function prepare( vector ) {\n\n        var vertex = vector.normalize().clone();\n        vertex.index = that.vertices.push( vertex ) - 1;\n\n        // Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n        var u = azimuth( vector ) / 2 / Math.PI + 0.5;\n        var v = inclination( vector ) / Math.PI + 0.5;\n        vertex.uv = new THREE.Vector2( u, 1 - v );\n\n        return vertex;\n\n    }\n\n\n    // Approximate a curved face with recursively sub-divided triangles.\n\n    function make( v1, v2, v3 ) {\n\n        var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n        face.centroid.add( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n        that.faces.push( face );\n\n        var azi = azimuth( face.centroid );\n\n        that.faceVertexUvs[ 0 ].push( [\n            correctUV( v1.uv, v1, azi ),\n            correctUV( v2.uv, v2, azi ),\n            correctUV( v3.uv, v3, azi )\n        ] );\n\n    }\n\n\n    // Analytically subdivide a face to the required detail level.\n\n    function subdivide(face, detail ) {\n\n        var cols = Math.pow(2, detail);\n        var cells = Math.pow(4, detail);\n        var a = prepare( that.vertices[ face.a ] );\n        var b = prepare( that.vertices[ face.b ] );\n        var c = prepare( that.vertices[ face.c ] );\n        var v = [];\n\n        // Construct all of the vertices for this subdivision.\n\n        for ( var i = 0 ; i <= cols; i ++ ) {\n\n            v[ i ] = [];\n\n            var aj = prepare( a.clone().lerp( c, i / cols ) );\n            var bj = prepare( b.clone().lerp( c, i / cols ) );\n            var rows = cols - i;\n\n            for ( var j = 0; j <= rows; j ++) {\n\n                if ( j == 0 && i == cols ) {\n\n                    v[ i ][ j ] = aj;\n\n                } else {\n\n                    v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n                }\n\n            }\n\n        }\n\n        // Construct all of the faces.\n\n        for ( var i = 0; i < cols ; i ++ ) {\n\n            for ( var j = 0; j < 2 * (cols - i) - 1; j ++ ) {\n\n                var k = Math.floor( j / 2 );\n\n                if ( j % 2 == 0 ) {\n\n                    make(\n                        v[ i ][ k + 1],\n                        v[ i + 1 ][ k ],\n                        v[ i ][ k ]\n                    );\n\n                } else {\n\n                    make(\n                        v[ i ][ k + 1 ],\n                        v[ i + 1][ k + 1],\n                        v[ i + 1 ][ k ]\n                    );\n\n                }\n\n            }\n\n        }\n\n    }\n\n\n    // Angle around the Y axis, counter-clockwise when looking from above.\n\n    function azimuth( vector ) {\n\n        return Math.atan2( vector.z, -vector.x );\n\n    }\n\n\n    // Angle above the XZ plane.\n\n    function inclination( vector ) {\n\n        return Math.atan2( -vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n    }\n\n\n    // Texture fixing helper. Spheres have some odd behaviours.\n\n    function correctUV( uv, vector, azimuth ) {\n\n        if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n        if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n        return uv.clone();\n\n    }\n\n\n};\n\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\n    this.radius = radius;\n    this.detail = detail;\n\n    var t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n    var vertices = [\n        [ -1,  t,  0 ], [  1, t, 0 ], [ -1, -t,  0 ], [  1, -t,  0 ],\n        [  0, -1,  t ], [  0, 1, t ], [  0, -1, -t ], [  0,  1, -t ],\n        [  t,  0, -1 ], [  t, 0, 1 ], [ -t,  0, -1 ], [ -t,  0,  1 ]\n    ];\n\n    var faces = [\n        [ 0, 11,  5 ], [ 0,  5,  1 ], [  0,  1,  7 ], [  0,  7, 10 ], [  0, 10, 11 ],\n        [ 1,  5,  9 ], [ 5, 11,  4 ], [ 11, 10,  2 ], [ 10,  7,  6 ], [  7,  1,  8 ],\n        [ 3,  9,  4 ], [ 3,  4,  2 ], [  3,  2,  6 ], [  3,  6,  8 ], [  3,  8,  9 ],\n        [ 4,  9,  5 ], [ 2,  4, 11 ], [  6,  2, 10 ], [  8,  6,  7 ], [  9,  8,  1 ]\n    ];\n\n    THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\n\n};\n\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.OctahedronGeometry = function ( radius, detail ) {\n\n    var vertices = [\n        [ 1, 0, 0 ], [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ], [ 0, 0, -1 ]\n    ];\n\n    var faces = [\n        [ 0, 2, 4 ], [ 0, 4, 3 ], [ 0, 3, 5 ], [ 0, 5, 2 ], [ 1, 2, 5 ], [ 1, 5, 3 ], [ 1, 3, 4 ], [ 1, 4, 2 ]\n    ];\n\n    THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\n};\n\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\n    var vertices = [\n        [ 1,  1,  1 ], [ -1, -1, 1 ], [ -1, 1, -1 ], [ 1, -1, -1 ]\n    ];\n\n    var faces = [\n        [ 2, 1, 0 ], [ 0, 3, 2 ], [ 1, 3, 0 ], [ 2, 3, 1 ]\n    ];\n\n    THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\n\n};\n\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author zz85 / https://github.com/zz85\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n *\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n *\n */\n\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\n    THREE.Geometry.call( this );\n\n    var verts = this.vertices;\n    var faces = this.faces;\n    var uvs = this.faceVertexUvs[ 0 ];\n\n    var i, il, j, p;\n    var u, v;\n\n    var stackCount = stacks + 1;\n    var sliceCount = slices + 1;\n\n    for ( i = 0; i <= stacks; i ++ ) {\n\n        v = i / stacks;\n\n        for ( j = 0; j <= slices; j ++ ) {\n\n            u = j / slices;\n\n            p = func( u, v );\n            verts.push( p );\n\n        }\n    }\n\n    var a, b, c, d;\n    var uva, uvb, uvc, uvd;\n\n    for ( i = 0; i < stacks; i ++ ) {\n\n        for ( j = 0; j < slices; j ++ ) {\n\n            a = i * sliceCount + j;\n            b = i * sliceCount + j + 1;\n            c = (i + 1) * sliceCount + j + 1;\n            d = (i + 1) * sliceCount + j;\n\n            uva = new THREE.Vector2( j / slices, i / stacks );\n            uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n            uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n            uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\n            faces.push( new THREE.Face3( a, b, d ) );\n            uvs.push( [ uva, uvb, uvd ] );\n\n            faces.push( new THREE.Face3( b, c, d ) );\n            uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n        }\n\n    }\n\n    // console.log(this);\n\n    // magic bullet\n    // var diff = this.mergeVertices();\n    // console.log('removed ', diff, ' vertices by merging');\n\n    this.computeCentroids();\n    this.computeFaceNormals();\n    this.computeVertexNormals();\n\n};\n\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AxisHelper = function ( size ) {\n\n    size = size || 1;\n\n    var geometry = new THREE.Geometry();\n\n    geometry.vertices.push(\n        new THREE.Vector3(), new THREE.Vector3( size, 0, 0 ),\n        new THREE.Vector3(), new THREE.Vector3( 0, size, 0 ),\n        new THREE.Vector3(), new THREE.Vector3( 0, 0, size )\n    );\n\n    geometry.colors.push(\n        new THREE.Color( 0xff0000 ), new THREE.Color( 0xffaa00 ),\n        new THREE.Color( 0x00ff00 ), new THREE.Color( 0xaaff00 ),\n        new THREE.Color( 0x0000ff ), new THREE.Color( 0x00aaff )\n    );\n\n    var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n    THREE.Line.call( this, geometry, material, THREE.LinePieces );\n\n};\n\nTHREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://exocortex.com\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  hex - color in hex value\n */\n\nTHREE.ArrowHelper = function ( dir, origin, length, hex ) {\n\n    // dir is assumed to be normalized\n\n    THREE.Object3D.call( this );\n\n    if ( hex === undefined ) hex = 0xffff00;\n    if ( length === undefined ) length = 1;\n\n    this.position = origin;\n\n    var lineGeometry = new THREE.Geometry();\n    lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );\n    lineGeometry.vertices.push( new THREE.Vector3( 0, 1, 0 ) );\n\n    this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: hex } ) );\n    this.line.matrixAutoUpdate = false;\n    this.add( this.line );\n\n    var coneGeometry = new THREE.CylinderGeometry( 0, 0.05, 0.25, 5, 1 );\n    coneGeometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, 0.875, 0 ) );\n\n    this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: hex } ) );\n    this.cone.matrixAutoUpdate = false;\n    this.add( this.cone );\n\n    this.setDirection( dir );\n    this.setLength( length );\n\n};\n\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.ArrowHelper.prototype.setDirection = function () {\n\n    var axis = new THREE.Vector3();\n    var radians;\n\n    return function ( dir ) {\n\n        // dir is assumed to be normalized\n\n        if ( dir.y > 0.99999 ) {\n\n            this.quaternion.set( 0, 0, 0, 1 );\n\n        } else if ( dir.y < - 0.99999 ) {\n\n            this.quaternion.set( 1, 0, 0, 0 );\n\n        } else {\n\n            axis.set( dir.z, 0, - dir.x ).normalize();\n\n            radians = Math.acos( dir.y );\n\n            this.quaternion.setFromAxisAngle( axis, radians );\n\n        }\n\n    };\n\n}();\n\nTHREE.ArrowHelper.prototype.setLength = function ( length ) {\n\n    this.scale.set( length, length, length );\n\n};\n\nTHREE.ArrowHelper.prototype.setColor = function ( hex ) {\n\n    this.line.material.color.setHex( hex );\n    this.cone.material.color.setHex( hex );\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BoxHelper = function ( object ) {\n\n    //   5____4\n    // 1/___0/|\n    // | 6__|_7\n    // 2/___3/\n\n    var vertices = [\n        new THREE.Vector3(   1,   1,   1 ),\n        new THREE.Vector3( - 1,   1,   1 ),\n        new THREE.Vector3( - 1, - 1,   1 ),\n        new THREE.Vector3(   1, - 1,   1 ),\n\n        new THREE.Vector3(   1,   1, - 1 ),\n        new THREE.Vector3( - 1,   1, - 1 ),\n        new THREE.Vector3( - 1, - 1, - 1 ),\n        new THREE.Vector3(   1, - 1, - 1 )\n    ];\n\n    this.vertices = vertices;\n\n    // TODO: Wouldn't be nice if Line had .segments?\n\n    var geometry = new THREE.Geometry();\n    geometry.vertices.push(\n        vertices[ 0 ], vertices[ 1 ],\n        vertices[ 1 ], vertices[ 2 ],\n        vertices[ 2 ], vertices[ 3 ],\n        vertices[ 3 ], vertices[ 0 ],\n\n        vertices[ 4 ], vertices[ 5 ],\n        vertices[ 5 ], vertices[ 6 ],\n        vertices[ 6 ], vertices[ 7 ],\n        vertices[ 7 ], vertices[ 4 ],\n\n        vertices[ 0 ], vertices[ 4 ],\n        vertices[ 1 ], vertices[ 5 ],\n        vertices[ 2 ], vertices[ 6 ],\n        vertices[ 3 ], vertices[ 7 ]\n    );\n\n    THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ), THREE.LinePieces );\n\n    if ( object !== undefined ) {\n\n        this.update( object );\n\n    }\n\n};\n\nTHREE.BoxHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.BoxHelper.prototype.update = function ( object ) {\n\n    var geometry = object.geometry;\n\n    if ( geometry.boundingBox === null ) {\n\n        geometry.computeBoundingBox();\n\n    }\n\n    var min = geometry.boundingBox.min;\n    var max = geometry.boundingBox.max;\n    var vertices = this.vertices;\n\n    vertices[ 0 ].set( max.x, max.y, max.z );\n    vertices[ 1 ].set( min.x, max.y, max.z );\n    vertices[ 2 ].set( min.x, min.y, max.z );\n    vertices[ 3 ].set( max.x, min.y, max.z );\n    vertices[ 4 ].set( max.x, max.y, min.z );\n    vertices[ 5 ].set( min.x, max.y, min.z );\n    vertices[ 6 ].set( min.x, min.y, min.z );\n    vertices[ 7 ].set( max.x, min.y, min.z );\n\n    this.geometry.computeBoundingSphere();\n    this.geometry.verticesNeedUpdate = true;\n\n    this.matrixAutoUpdate = false;\n    this.matrixWorld = object.matrixWorld;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\n// a helper to show the world-axis-aligned bounding box for an object\n\nTHREE.BoundingBoxHelper = function ( object, hex ) {\n\n    var color = hex || 0x888888;\n\n    this.object = object;\n\n    this.box = new THREE.Box3();\n\n    THREE.Mesh.call( this, new THREE.CubeGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n};\n\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.BoundingBoxHelper.prototype.update = function () {\n\n    this.box.setFromObject( this.object );\n\n    this.box.size( this.scale );\n\n    this.box.center( this.position );\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nTHREE.CameraHelper = function ( camera ) {\n\n    var geometry = new THREE.Geometry();\n    var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\n    var pointMap = {};\n\n    // colors\n\n    var hexFrustum = 0xffaa00;\n    var hexCone = 0xff0000;\n    var hexUp = 0x00aaff;\n    var hexTarget = 0xffffff;\n    var hexCross = 0x333333;\n\n    // near\n\n    addLine( \"n1\", \"n2\", hexFrustum );\n    addLine( \"n2\", \"n4\", hexFrustum );\n    addLine( \"n4\", \"n3\", hexFrustum );\n    addLine( \"n3\", \"n1\", hexFrustum );\n\n    // far\n\n    addLine( \"f1\", \"f2\", hexFrustum );\n    addLine( \"f2\", \"f4\", hexFrustum );\n    addLine( \"f4\", \"f3\", hexFrustum );\n    addLine( \"f3\", \"f1\", hexFrustum );\n\n    // sides\n\n    addLine( \"n1\", \"f1\", hexFrustum );\n    addLine( \"n2\", \"f2\", hexFrustum );\n    addLine( \"n3\", \"f3\", hexFrustum );\n    addLine( \"n4\", \"f4\", hexFrustum );\n\n    // cone\n\n    addLine( \"p\", \"n1\", hexCone );\n    addLine( \"p\", \"n2\", hexCone );\n    addLine( \"p\", \"n3\", hexCone );\n    addLine( \"p\", \"n4\", hexCone );\n\n    // up\n\n    addLine( \"u1\", \"u2\", hexUp );\n    addLine( \"u2\", \"u3\", hexUp );\n    addLine( \"u3\", \"u1\", hexUp );\n\n    // target\n\n    addLine( \"c\", \"t\", hexTarget );\n    addLine( \"p\", \"c\", hexCross );\n\n    // cross\n\n    addLine( \"cn1\", \"cn2\", hexCross );\n    addLine( \"cn3\", \"cn4\", hexCross );\n\n    addLine( \"cf1\", \"cf2\", hexCross );\n    addLine( \"cf3\", \"cf4\", hexCross );\n\n    function addLine( a, b, hex ) {\n\n        addPoint( a, hex );\n        addPoint( b, hex );\n\n    }\n\n    function addPoint( id, hex ) {\n\n        geometry.vertices.push( new THREE.Vector3() );\n        geometry.colors.push( new THREE.Color( hex ) );\n\n        if ( pointMap[ id ] === undefined ) {\n\n            pointMap[ id ] = [];\n\n        }\n\n        pointMap[ id ].push( geometry.vertices.length - 1 );\n\n    }\n\n    THREE.Line.call( this, geometry, material, THREE.LinePieces );\n\n    this.camera = camera;\n    this.matrixWorld = camera.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    this.pointMap = pointMap;\n\n    this.update();\n\n};\n\nTHREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.CameraHelper.prototype.update = function () {\n\n    var vector = new THREE.Vector3();\n    var camera = new THREE.Camera();\n    var projector = new THREE.Projector();\n\n    return function () {\n\n        var scope = this;\n\n        var w = 1, h = 1;\n\n        // we need just camera projection matrix\n        // world matrix must be identity\n\n        camera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n        // center / target\n\n        setPoint( \"c\", 0, 0, -1 );\n        setPoint( \"t\", 0, 0,  1 );\n\n        // near\n\n        setPoint( \"n1\", -w, -h, -1 );\n        setPoint( \"n2\",  w, -h, -1 );\n        setPoint( \"n3\", -w,  h, -1 );\n        setPoint( \"n4\",  w,  h, -1 );\n\n        // far\n\n        setPoint( \"f1\", -w, -h, 1 );\n        setPoint( \"f2\",  w, -h, 1 );\n        setPoint( \"f3\", -w,  h, 1 );\n        setPoint( \"f4\",  w,  h, 1 );\n\n        // up\n\n        setPoint( \"u1\",  w * 0.7, h * 1.1, -1 );\n        setPoint( \"u2\", -w * 0.7, h * 1.1, -1 );\n        setPoint( \"u3\",        0, h * 2,   -1 );\n\n        // cross\n\n        setPoint( \"cf1\", -w,  0, 1 );\n        setPoint( \"cf2\",  w,  0, 1 );\n        setPoint( \"cf3\",  0, -h, 1 );\n        setPoint( \"cf4\",  0,  h, 1 );\n\n        setPoint( \"cn1\", -w,  0, -1 );\n        setPoint( \"cn2\",  w,  0, -1 );\n        setPoint( \"cn3\",  0, -h, -1 );\n        setPoint( \"cn4\",  0,  h, -1 );\n\n        function setPoint( point, x, y, z ) {\n\n            vector.set( x, y, z );\n            projector.unprojectVector( vector, camera );\n\n            var points = scope.pointMap[ point ];\n\n            if ( points !== undefined ) {\n\n                for ( var i = 0, il = points.length; i < il; i ++ ) {\n\n                    scope.geometry.vertices[ points[ i ] ].copy( vector );\n\n                }\n\n            }\n\n        }\n\n        this.geometry.verticesNeedUpdate = true;\n\n    };\n\n}();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectionalLightHelper = function ( light, size ) {\n\n    THREE.Object3D.call( this );\n\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    this.matrixWorld = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    var geometry = new THREE.PlaneGeometry( size, size );\n    var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n    material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    this.lightPlane = new THREE.Mesh( geometry, material );\n    this.add( this.lightPlane );\n\n    geometry = new THREE.Geometry();\n    geometry.vertices.push( new THREE.Vector3() );\n    geometry.vertices.push( new THREE.Vector3() );\n    geometry.computeLineDistances();\n\n    material = new THREE.LineBasicMaterial( { fog: false } );\n    material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    this.targetLine = new THREE.Line( geometry, material );\n    this.add( this.targetLine );\n\n    this.update();\n\n};\n\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\n    this.lightPlane.geometry.dispose();\n    this.lightPlane.material.dispose();\n    this.targetLine.geometry.dispose();\n    this.targetLine.material.dispose();\n};\n\nTHREE.DirectionalLightHelper.prototype.update = function () {\n\n    var vector = new THREE.Vector3();\n\n    return function () {\n\n        vector.getPositionFromMatrix( this.light.matrixWorld ).negate();\n\n        this.lightPlane.lookAt( vector );\n        this.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n        this.targetLine.geometry.vertices[ 1 ].copy( vector );\n        this.targetLine.geometry.verticesNeedUpdate = true;\n        this.targetLine.material.color.copy( this.lightPlane.material.color );\n\n    }\n\n}();\n\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\n    this.object = object;\n\n    this.size = size || 1;\n\n    var color = hex || 0xffff00;\n\n    var width = linewidth || 1;\n\n    var geometry = new THREE.Geometry();\n\n    var faces = this.object.geometry.faces;\n\n    for ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n        geometry.vertices.push( new THREE.Vector3() );\n        geometry.vertices.push( new THREE.Vector3() );\n\n    }\n\n    THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );\n\n    this.matrixAutoUpdate = false;\n\n    this.normalMatrix = new THREE.Matrix3();\n\n    this.update();\n\n};\n\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.FaceNormalsHelper.prototype.update = ( function ( object ) {\n\n    var v1 = new THREE.Vector3();\n\n    return function ( object ) {\n\n        this.object.updateMatrixWorld( true );\n\n        this.normalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n        var vertices = this.geometry.vertices;\n\n        var faces = this.object.geometry.faces;\n\n        var worldMatrix = this.object.matrixWorld;\n\n        for ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n            var face = faces[ i ];\n\n            v1.copy( face.normal ).applyMatrix3( this.normalMatrix ).normalize().multiplyScalar( this.size );\n\n            var idx = 2 * i;\n\n            vertices[ idx ].copy( face.centroid ).applyMatrix4( worldMatrix );\n\n            vertices[ idx + 1 ].addVectors( vertices[ idx ], v1 );\n\n        }\n\n        this.geometry.verticesNeedUpdate = true;\n\n        return this;\n\n    }\n\n}());\n\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GridHelper = function ( size, step ) {\n\n    var geometry = new THREE.Geometry();\n    var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n    this.color1 = new THREE.Color( 0x444444 );\n    this.color2 = new THREE.Color( 0x888888 );\n\n    for ( var i = - size; i <= size; i += step ) {\n\n        geometry.vertices.push(\n            new THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),\n            new THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )\n        );\n\n        var color = i === 0 ? this.color1 : this.color2;\n\n        geometry.colors.push( color, color, color, color );\n\n    }\n\n    THREE.Line.call( this, geometry, material, THREE.LinePieces );\n\n};\n\nTHREE.GridHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {\n\n    this.color1.set( colorCenterLine );\n    this.color2.set( colorGrid );\n\n    this.geometry.colorsNeedUpdate = true;\n\n}\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {\n\n    THREE.Object3D.call( this );\n\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    this.matrixWorld = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    this.colors = [ new THREE.Color(), new THREE.Color() ];\n\n    var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n    geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );\n\n    for ( var i = 0, il = 8; i < il; i ++ ) {\n\n        geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n    }\n\n    var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\n    this.lightSphere = new THREE.Mesh( geometry, material );\n    this.add( this.lightSphere );\n\n    this.update();\n\n};\n\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\n    this.lightSphere.geometry.dispose();\n    this.lightSphere.material.dispose();\n};\n\nTHREE.HemisphereLightHelper.prototype.update = function () {\n\n    var vector = new THREE.Vector3();\n\n    return function () {\n\n        this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n        this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n        this.lightSphere.lookAt( vector.getPositionFromMatrix( this.light.matrixWorld ).negate() );\n        this.lightSphere.geometry.colorsNeedUpdate = true;\n\n    }\n\n}();\n\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLightHelper = function ( light, sphereSize ) {\n\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n    var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n    material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    THREE.Mesh.call( this, geometry, material );\n\n    this.matrixWorld = this.light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    /*\n     var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n     var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n     this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n     this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n     var d = light.distance;\n\n     if ( d === 0.0 ) {\n\n     this.lightDistance.visible = false;\n\n     } else {\n\n     this.lightDistance.scale.set( d, d, d );\n\n     }\n\n     this.add( this.lightDistance );\n     */\n\n};\n\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.PointLightHelper.prototype.dispose = function () {\n\n    this.geometry.dispose();\n    this.material.dispose();\n};\n\nTHREE.PointLightHelper.prototype.update = function () {\n\n    this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    /*\n     var d = this.light.distance;\n\n     if ( d === 0.0 ) {\n\n     this.lightDistance.visible = false;\n\n     } else {\n\n     this.lightDistance.visible = true;\n     this.lightDistance.scale.set( d, d, d );\n\n     }\n     */\n\n};\n\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.SpotLightHelper = function ( light ) {\n\n    THREE.Object3D.call( this );\n\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    this.matrixWorld = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    var geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );\n\n    geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, -0.5, 0 ) );\n    geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );\n\n    var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\n    this.cone = new THREE.Mesh( geometry, material );\n    this.add( this.cone );\n\n    this.update();\n\n};\n\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.SpotLightHelper.prototype.dispose = function () {\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n};\n\nTHREE.SpotLightHelper.prototype.update = function () {\n\n    var vector = new THREE.Vector3();\n    var vector2 = new THREE.Vector3();\n\n    return function () {\n\n        var coneLength = this.light.distance ? this.light.distance : 10000;\n        var coneWidth = coneLength * Math.tan( this.light.angle );\n\n        this.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n        vector.getPositionFromMatrix( this.light.matrixWorld );\n        vector2.getPositionFromMatrix( this.light.target.matrixWorld );\n\n        this.cone.lookAt( vector2.sub( vector ) );\n\n        this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n    };\n\n}();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\n    this.object = object;\n\n    this.size = size || 1;\n\n    var color = hex || 0xff0000;\n\n    var width = linewidth || 1;\n\n    var geometry = new THREE.Geometry();\n\n    var vertices = object.geometry.vertices;\n\n    var faces = object.geometry.faces;\n\n    for ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n        var face = faces[ i ];\n\n        for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n            geometry.vertices.push( new THREE.Vector3() );\n            geometry.vertices.push( new THREE.Vector3() );\n\n        }\n\n    }\n\n    THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );\n\n    this.matrixAutoUpdate = false;\n\n    this.normalMatrix = new THREE.Matrix3();\n\n    this.update();\n\n};\n\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.VertexNormalsHelper.prototype.update = ( function ( object ) {\n\n    var v1 = new THREE.Vector3();\n\n    return function( object ) {\n\n        var keys = [ 'a', 'b', 'c', 'd' ];\n\n        this.object.updateMatrixWorld( true );\n\n        this.normalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n        var vertices = this.geometry.vertices;\n\n        var verts = this.object.geometry.vertices;\n\n        var faces = this.object.geometry.faces;\n\n        var worldMatrix = this.object.matrixWorld;\n\n        var idx = 0;\n\n        for ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n            var face = faces[ i ];\n\n            for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n                var vertexId = face[ keys[ j ] ];\n                var vertex = verts[ vertexId ];\n\n                var normal = face.vertexNormals[ j ];\n\n                vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );\n\n                v1.copy( normal ).applyMatrix3( this.normalMatrix ).normalize().multiplyScalar( this.size );\n\n                v1.add( vertices[ idx ] );\n                idx = idx + 1;\n\n                vertices[ idx ].copy( v1 );\n                idx = idx + 1;\n\n            }\n\n        }\n\n        this.geometry.verticesNeedUpdate = true;\n\n        return this;\n\n    }\n\n}());\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.VertexTangentsHelper = function ( object, size, hex, linewidth ) {\n\n    this.object = object;\n\n    this.size = size || 1;\n\n    var color = hex || 0x0000ff;\n\n    var width = linewidth || 1;\n\n    var geometry = new THREE.Geometry();\n\n    var vertices = object.geometry.vertices;\n\n    var faces = object.geometry.faces;\n\n    for ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n        var face = faces[ i ];\n\n        for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {\n\n            geometry.vertices.push( new THREE.Vector3() );\n            geometry.vertices.push( new THREE.Vector3() );\n\n        }\n\n    }\n\n    THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );\n\n    this.matrixAutoUpdate = false;\n\n    this.update();\n\n};\n\nTHREE.VertexTangentsHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.VertexTangentsHelper.prototype.update = ( function ( object ) {\n\n    var v1 = new THREE.Vector3();\n\n    return function( object ) {\n\n        var keys = [ 'a', 'b', 'c', 'd' ];\n\n        this.object.updateMatrixWorld( true );\n\n        var vertices = this.geometry.vertices;\n\n        var verts = this.object.geometry.vertices;\n\n        var faces = this.object.geometry.faces;\n\n        var worldMatrix = this.object.matrixWorld;\n\n        var idx = 0;\n\n        for ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n            var face = faces[ i ];\n\n            for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {\n\n                var vertexId = face[ keys[ j ] ];\n                var vertex = verts[ vertexId ];\n\n                var tangent = face.vertexTangents[ j ];\n\n                vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );\n\n                v1.copy( tangent ).transformDirection( worldMatrix ).multiplyScalar( this.size );\n\n                v1.add( vertices[ idx ] );\n                idx = idx + 1;\n\n                vertices[ idx ].copy( v1 );\n                idx = idx + 1;\n\n            }\n\n        }\n\n        this.geometry.verticesNeedUpdate = true;\n\n        return this;\n\n    }\n\n}());\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeHelper = function ( object ) {\n\n    var edge = [ 0, 0 ], hash = {};\n    var sortFunction = function ( a, b ) { return a - b };\n\n    var keys = [ 'a', 'b', 'c', 'd' ];\n    var geometry = new THREE.Geometry();\n\n    var vertices = object.geometry.vertices;\n    var faces = object.geometry.faces;\n\n    for ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n        var face = faces[ i ];\n\n        for ( var j = 0; j < 3; j ++ ) {\n\n            edge[ 0 ] = face[ keys[ j ] ];\n            edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n            edge.sort( sortFunction );\n\n            var key = edge.toString();\n\n            if ( hash[ key ] === undefined ) {\n\n                geometry.vertices.push( vertices[ edge[ 0 ] ] );\n                geometry.vertices.push( vertices[ edge[ 1 ] ] );\n\n                hash[ key ] = true;\n\n            }\n\n        }\n\n    }\n\n    THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffffff } ), THREE.LinePieces );\n\n    this.matrixAutoUpdate = false;\n    this.matrixWorld = object.matrixWorld;\n\n};\n\nTHREE.WireframeHelper.prototype = Object.create( THREE.Line.prototype );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ImmediateRenderObject = function () {\n\n    THREE.Object3D.call( this );\n\n    this.render = function ( renderCallback ) { };\n\n};\n\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\n    THREE.Object3D.call( this );\n\n    this.lensFlares = [];\n\n    this.positionScreen = new THREE.Vector3();\n    this.customUpdateCallback = undefined;\n\n    if( texture !== undefined ) {\n\n        this.add( texture, size, distance, blending, color );\n\n    }\n\n};\n\nTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\n\n\n/*\n * Add: adds another flare\n */\n\nTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\n\n    if( size === undefined ) size = -1;\n    if( distance === undefined ) distance = 0;\n    if( opacity === undefined ) opacity = 1;\n    if( color === undefined ) color = new THREE.Color( 0xffffff );\n    if( blending === undefined ) blending = THREE.NormalBlending;\n\n    distance = Math.min( distance, Math.max( 0, distance ) );\n\n    this.lensFlares.push( { texture: texture, \t\t\t// THREE.Texture\n        size: size, \t\t\t\t// size in pixels (-1 = use texture.width)\n        distance: distance, \t\t// distance (0-1) from light source (0=at light source)\n        x: 0, y: 0, z: 0,\t\t\t// screen position (-1 => 1) z = 0 is ontop z = 1 is back\n        scale: 1, \t\t\t\t\t// scale\n        rotation: 1, \t\t\t\t// rotation\n        opacity: opacity,\t\t\t// opacity\n        color: color,\t\t\t\t// color\n        blending: blending } );\t\t// blending\n\n};\n\n\n/*\n * Update lens flares update positions on all flares based on the screen position\n * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n */\n\nTHREE.LensFlare.prototype.updateLensFlares = function () {\n\n    var f, fl = this.lensFlares.length;\n    var flare;\n    var vecX = -this.positionScreen.x * 2;\n    var vecY = -this.positionScreen.y * 2;\n\n    for( f = 0; f < fl; f ++ ) {\n\n        flare = this.lensFlares[ f ];\n\n        flare.x = this.positionScreen.x + vecX * flare.distance;\n        flare.y = this.positionScreen.y + vecY * flare.distance;\n\n        flare.wantedRotation = flare.x * Math.PI * 0.25;\n        flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n    }\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphBlendMesh = function( geometry, material ) {\n\n    THREE.Mesh.call( this, geometry, material );\n\n    this.animationsMap = {};\n    this.animationsList = [];\n\n    // prepare default animation\n    // (all frames played together in 1 second)\n\n    var numFrames = this.geometry.morphTargets.length;\n\n    var name = \"__default\";\n\n    var startFrame = 0;\n    var endFrame = numFrames - 1;\n\n    var fps = numFrames / 1;\n\n    this.createAnimation( name, startFrame, endFrame, fps );\n    this.setAnimationWeight( name, 1 );\n\n};\n\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\n    var animation = {\n\n        startFrame: start,\n        endFrame: end,\n\n        length: end - start + 1,\n\n        fps: fps,\n        duration: ( end - start ) / fps,\n\n        lastFrame: 0,\n        currentFrame: 0,\n\n        active: false,\n\n        time: 0,\n        direction: 1,\n        weight: 1,\n\n        directionBackwards: false,\n        mirroredLoop: false\n\n    };\n\n    this.animationsMap[ name ] = animation;\n    this.animationsList.push( animation );\n\n};\n\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\n    var pattern = /([a-z]+)(\\d+)/;\n\n    var firstAnimation, frameRanges = {};\n\n    var geometry = this.geometry;\n\n    for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n        var morph = geometry.morphTargets[ i ];\n        var chunks = morph.name.match( pattern );\n\n        if ( chunks && chunks.length > 1 ) {\n\n            var name = chunks[ 1 ];\n            var num = chunks[ 2 ];\n\n            if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: -Infinity };\n\n            var range = frameRanges[ name ];\n\n            if ( i < range.start ) range.start = i;\n            if ( i > range.end ) range.end = i;\n\n            if ( ! firstAnimation ) firstAnimation = name;\n\n        }\n\n    }\n\n    for ( var name in frameRanges ) {\n\n        var range = frameRanges[ name ];\n        this.createAnimation( name, range.start, range.end, fps );\n\n    }\n\n    this.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        animation.direction = 1;\n        animation.directionBackwards = false;\n\n    }\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        animation.direction = -1;\n        animation.directionBackwards = true;\n\n    }\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        animation.fps = fps;\n        animation.duration = ( animation.end - animation.start ) / animation.fps;\n\n    }\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        animation.duration = duration;\n        animation.fps = ( animation.end - animation.start ) / animation.duration;\n\n    }\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        animation.weight = weight;\n\n    }\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        animation.time = time;\n\n    }\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\n    var time = 0;\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        time = animation.time;\n\n    }\n\n    return time;\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\n    var duration = -1;\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        duration = animation.duration;\n\n    }\n\n    return duration;\n\n};\n\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        animation.time = 0;\n        animation.active = true;\n\n    } else {\n\n        console.warn( \"animation[\" + name + \"] undefined\" );\n\n    }\n\n};\n\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\n    var animation = this.animationsMap[ name ];\n\n    if ( animation ) {\n\n        animation.active = false;\n\n    }\n\n};\n\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\n    for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n        var animation = this.animationsList[ i ];\n\n        if ( ! animation.active ) continue;\n\n        var frameTime = animation.duration / animation.length;\n\n        animation.time += animation.direction * delta;\n\n        if ( animation.mirroredLoop ) {\n\n            if ( animation.time > animation.duration || animation.time < 0 ) {\n\n                animation.direction *= -1;\n\n                if ( animation.time > animation.duration ) {\n\n                    animation.time = animation.duration;\n                    animation.directionBackwards = true;\n\n                }\n\n                if ( animation.time < 0 ) {\n\n                    animation.time = 0;\n                    animation.directionBackwards = false;\n\n                }\n\n            }\n\n        } else {\n\n            animation.time = animation.time % animation.duration;\n\n            if ( animation.time < 0 ) animation.time += animation.duration;\n\n        }\n\n        var keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n        var weight = animation.weight;\n\n        if ( keyframe !== animation.currentFrame ) {\n\n            this.morphTargetInfluences[ animation.lastFrame ] = 0;\n            this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n            this.morphTargetInfluences[ keyframe ] = 0;\n\n            animation.lastFrame = animation.currentFrame;\n            animation.currentFrame = keyframe;\n\n        }\n\n        var mix = ( animation.time % frameTime ) / frameTime;\n\n        if ( animation.directionBackwards ) mix = 1 - mix;\n\n        this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n        this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n    }\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlarePlugin = function () {\n\n    var _gl, _renderer, _precision, _lensFlare = {};\n\n    this.init = function ( renderer ) {\n\n        _gl = renderer.context;\n        _renderer = renderer;\n\n        _precision = renderer.getPrecision();\n\n        _lensFlare.vertices = new Float32Array( 8 + 8 );\n        _lensFlare.faces = new Uint16Array( 6 );\n\n        var i = 0;\n        _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1;\t// vertex\n        _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0;\t// uv... etc.\n\n        _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;\n        _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;\n\n        _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;\n        _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;\n\n        _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;\n        _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;\n\n        i = 0;\n        _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;\n        _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;\n\n        // buffers\n\n        _lensFlare.vertexBuffer     = _gl.createBuffer();\n        _lensFlare.elementBuffer    = _gl.createBuffer();\n\n        _gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );\n        _gl.bufferData( _gl.ARRAY_BUFFER, _lensFlare.vertices, _gl.STATIC_DRAW );\n\n        _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );\n        _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.faces, _gl.STATIC_DRAW );\n\n        // textures\n\n        _lensFlare.tempTexture      = _gl.createTexture();\n        _lensFlare.occlusionTexture = _gl.createTexture();\n\n        _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\n        _gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, 16, 16, 0, _gl.RGB, _gl.UNSIGNED_BYTE, null );\n        _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n        _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n        _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\n        _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\n\n        _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );\n        _gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, 16, 16, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null );\n        _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n        _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n        _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\n        _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\n\n        if ( _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) <= 0 ) {\n\n            _lensFlare.hasVertexTexture = false;\n            _lensFlare.program = createProgram( THREE.ShaderFlares[ \"lensFlare\" ], _precision );\n\n        } else {\n\n            _lensFlare.hasVertexTexture = true;\n            _lensFlare.program = createProgram( THREE.ShaderFlares[ \"lensFlareVertexTexture\" ], _precision );\n\n        }\n\n        _lensFlare.attributes = {};\n        _lensFlare.uniforms = {};\n\n        _lensFlare.attributes.vertex       = _gl.getAttribLocation ( _lensFlare.program, \"position\" );\n        _lensFlare.attributes.uv           = _gl.getAttribLocation ( _lensFlare.program, \"uv\" );\n\n        _lensFlare.uniforms.renderType     = _gl.getUniformLocation( _lensFlare.program, \"renderType\" );\n        _lensFlare.uniforms.map            = _gl.getUniformLocation( _lensFlare.program, \"map\" );\n        _lensFlare.uniforms.occlusionMap   = _gl.getUniformLocation( _lensFlare.program, \"occlusionMap\" );\n        _lensFlare.uniforms.opacity        = _gl.getUniformLocation( _lensFlare.program, \"opacity\" );\n        _lensFlare.uniforms.color          = _gl.getUniformLocation( _lensFlare.program, \"color\" );\n        _lensFlare.uniforms.scale          = _gl.getUniformLocation( _lensFlare.program, \"scale\" );\n        _lensFlare.uniforms.rotation       = _gl.getUniformLocation( _lensFlare.program, \"rotation\" );\n        _lensFlare.uniforms.screenPosition = _gl.getUniformLocation( _lensFlare.program, \"screenPosition\" );\n\n    };\n\n\n    /*\n     * Render lens flares\n     * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n     *         reads these back and calculates occlusion.\n     *         Then _lensFlare.update_lensFlares() is called to re-position and\n     *         update transparency of flares. Then they are rendered.\n     *\n     */\n\n    this.render = function ( scene, camera, viewportWidth, viewportHeight ) {\n\n        var flares = scene.__webglFlares,\n            nFlares = flares.length;\n\n        if ( ! nFlares ) return;\n\n        var tempPosition = new THREE.Vector3();\n\n        var invAspect = viewportHeight / viewportWidth,\n            halfViewportWidth = viewportWidth * 0.5,\n            halfViewportHeight = viewportHeight * 0.5;\n\n        var size = 16 / viewportHeight,\n            scale = new THREE.Vector2( size * invAspect, size );\n\n        var screenPosition = new THREE.Vector3( 1, 1, 0 ),\n            screenPositionPixels = new THREE.Vector2( 1, 1 );\n\n        var uniforms = _lensFlare.uniforms,\n            attributes = _lensFlare.attributes;\n\n        // set _lensFlare program and reset blending\n\n        _gl.useProgram( _lensFlare.program );\n\n        _gl.enableVertexAttribArray( _lensFlare.attributes.vertex );\n        _gl.enableVertexAttribArray( _lensFlare.attributes.uv );\n\n        // loop through all lens flares to update their occlusion and positions\n        // setup gl and common used attribs/unforms\n\n        _gl.uniform1i( uniforms.occlusionMap, 0 );\n        _gl.uniform1i( uniforms.map, 1 );\n\n        _gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );\n        _gl.vertexAttribPointer( attributes.vertex, 2, _gl.FLOAT, false, 2 * 8, 0 );\n        _gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );\n\n        _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );\n\n        _gl.disable( _gl.CULL_FACE );\n        _gl.depthMask( false );\n\n        var i, j, jl, flare, sprite;\n\n        for ( i = 0; i < nFlares; i ++ ) {\n\n            size = 16 / viewportHeight;\n            scale.set( size * invAspect, size );\n\n            // calc object screen position\n\n            flare = flares[ i ];\n\n            tempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );\n\n            tempPosition.applyMatrix4( camera.matrixWorldInverse );\n            tempPosition.applyProjection( camera.projectionMatrix );\n\n            // setup arrays for gl programs\n\n            screenPosition.copy( tempPosition )\n\n            screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\n            screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\n\n            // screen cull\n\n            if ( _lensFlare.hasVertexTexture || (\n                screenPositionPixels.x > 0 &&\n                    screenPositionPixels.x < viewportWidth &&\n                    screenPositionPixels.y > 0 &&\n                    screenPositionPixels.y < viewportHeight ) ) {\n\n                // save current RGB to temp texture\n\n                _gl.activeTexture( _gl.TEXTURE1 );\n                _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\n                _gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\n\n\n                // render pink quad\n\n                _gl.uniform1i( uniforms.renderType, 0 );\n                _gl.uniform2f( uniforms.scale, scale.x, scale.y );\n                _gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n                _gl.disable( _gl.BLEND );\n                _gl.enable( _gl.DEPTH_TEST );\n\n                _gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\n\n\n                // copy result to occlusionMap\n\n                _gl.activeTexture( _gl.TEXTURE0 );\n                _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );\n                _gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\n\n\n                // restore graphics\n\n                _gl.uniform1i( uniforms.renderType, 1 );\n                _gl.disable( _gl.DEPTH_TEST );\n\n                _gl.activeTexture( _gl.TEXTURE1 );\n                _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\n                _gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\n\n\n                // update object positions\n\n                flare.positionScreen.copy( screenPosition )\n\n                if ( flare.customUpdateCallback ) {\n\n                    flare.customUpdateCallback( flare );\n\n                } else {\n\n                    flare.updateLensFlares();\n\n                }\n\n                // render flares\n\n                _gl.uniform1i( uniforms.renderType, 2 );\n                _gl.enable( _gl.BLEND );\n\n                for ( j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n                    sprite = flare.lensFlares[ j ];\n\n                    if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n                        screenPosition.x = sprite.x;\n                        screenPosition.y = sprite.y;\n                        screenPosition.z = sprite.z;\n\n                        size = sprite.size * sprite.scale / viewportHeight;\n\n                        scale.x = size * invAspect;\n                        scale.y = size;\n\n                        _gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n                        _gl.uniform2f( uniforms.scale, scale.x, scale.y );\n                        _gl.uniform1f( uniforms.rotation, sprite.rotation );\n\n                        _gl.uniform1f( uniforms.opacity, sprite.opacity );\n                        _gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n                        _renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n                        _renderer.setTexture( sprite.texture, 1 );\n\n                        _gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\n\n                    }\n\n                }\n\n            }\n\n        }\n\n        // restore gl\n\n        _gl.enable( _gl.CULL_FACE );\n        _gl.enable( _gl.DEPTH_TEST );\n        _gl.depthMask( true );\n\n    };\n\n    function createProgram ( shader, precision ) {\n\n        var program = _gl.createProgram();\n\n        var fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );\n        var vertexShader = _gl.createShader( _gl.VERTEX_SHADER );\n\n        var prefix = \"precision \" + precision + \" float;\\n\";\n\n        _gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n        _gl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n        _gl.compileShader( fragmentShader );\n        _gl.compileShader( vertexShader );\n\n        _gl.attachShader( program, fragmentShader );\n        _gl.attachShader( program, vertexShader );\n\n        _gl.linkProgram( program );\n\n        return program;\n\n    };\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ShadowMapPlugin = function () {\n\n    var _gl,\n        _renderer,\n        _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\n\n        _frustum = new THREE.Frustum(),\n        _projScreenMatrix = new THREE.Matrix4(),\n\n        _min = new THREE.Vector3(),\n        _max = new THREE.Vector3(),\n\n        _matrixPosition = new THREE.Vector3();\n\n    this.init = function ( renderer ) {\n\n        _gl = renderer.context;\n        _renderer = renderer;\n\n        var depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\n        var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\n\n        _depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );\n        _depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );\n        _depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );\n        _depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );\n\n        _depthMaterial._shadowPass = true;\n        _depthMaterialMorph._shadowPass = true;\n        _depthMaterialSkin._shadowPass = true;\n        _depthMaterialMorphSkin._shadowPass = true;\n\n    };\n\n    this.render = function ( scene, camera ) {\n\n        if ( ! ( _renderer.shadowMapEnabled && _renderer.shadowMapAutoUpdate ) ) return;\n\n        this.update( scene, camera );\n\n    };\n\n    this.update = function ( scene, camera ) {\n\n        var i, il, j, jl, n,\n\n            shadowMap, shadowMatrix, shadowCamera,\n            program, buffer, material,\n            webglObject, object, light,\n            renderList,\n\n            lights = [],\n            k = 0,\n\n            fog = null;\n\n        // set GL state for depth map\n\n        _gl.clearColor( 1, 1, 1, 1 );\n        _gl.disable( _gl.BLEND );\n\n        _gl.enable( _gl.CULL_FACE );\n        _gl.frontFace( _gl.CCW );\n\n        if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\n\n            _gl.cullFace( _gl.FRONT );\n\n        } else {\n\n            _gl.cullFace( _gl.BACK );\n\n        }\n\n        _renderer.setDepthTest( true );\n\n        // preprocess lights\n        // \t- skip lights that are not casting shadows\n        //\t- create virtual lights for cascaded shadow maps\n\n        for ( i = 0, il = scene.__lights.length; i < il; i ++ ) {\n\n            light = scene.__lights[ i ];\n\n            if ( ! light.castShadow ) continue;\n\n            if ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {\n\n                for ( n = 0; n < light.shadowCascadeCount; n ++ ) {\n\n                    var virtualLight;\n\n                    if ( ! light.shadowCascadeArray[ n ] ) {\n\n                        virtualLight = createVirtualLight( light, n );\n                        virtualLight.originalCamera = camera;\n\n                        var gyro = new THREE.Gyroscope();\n                        gyro.position = light.shadowCascadeOffset;\n\n                        gyro.add( virtualLight );\n                        gyro.add( virtualLight.target );\n\n                        camera.add( gyro );\n\n                        light.shadowCascadeArray[ n ] = virtualLight;\n\n                        console.log( \"Created virtualLight\", virtualLight );\n\n                    } else {\n\n                        virtualLight = light.shadowCascadeArray[ n ];\n\n                    }\n\n                    updateVirtualLight( light, n );\n\n                    lights[ k ] = virtualLight;\n                    k ++;\n\n                }\n\n            } else {\n\n                lights[ k ] = light;\n                k ++;\n\n            }\n\n        }\n\n        // render depth map\n\n        for ( i = 0, il = lights.length; i < il; i ++ ) {\n\n            light = lights[ i ];\n\n            if ( ! light.shadowMap ) {\n\n                var shadowFilter = THREE.LinearFilter;\n\n                if ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n                    shadowFilter = THREE.NearestFilter;\n\n                }\n\n                var pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };\n\n                light.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );\n                light.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );\n\n                light.shadowMatrix = new THREE.Matrix4();\n\n            }\n\n            if ( ! light.shadowCamera ) {\n\n                if ( light instanceof THREE.SpotLight ) {\n\n                    light.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );\n\n                } else if ( light instanceof THREE.DirectionalLight ) {\n\n                    light.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );\n\n                } else {\n\n                    console.error( \"Unsupported light type for shadow\" );\n                    continue;\n\n                }\n\n                scene.add( light.shadowCamera );\n\n                if ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n            }\n\n            if ( light.shadowCameraVisible && ! light.cameraHelper ) {\n\n                light.cameraHelper = new THREE.CameraHelper( light.shadowCamera );\n                light.shadowCamera.add( light.cameraHelper );\n\n            }\n\n            if ( light.isVirtual && virtualLight.originalCamera == camera ) {\n\n                updateShadowCamera( camera, light );\n\n            }\n\n            shadowMap = light.shadowMap;\n            shadowMatrix = light.shadowMatrix;\n            shadowCamera = light.shadowCamera;\n\n            shadowCamera.position.getPositionFromMatrix( light.matrixWorld );\n            _matrixPosition.getPositionFromMatrix( light.target.matrixWorld );\n            shadowCamera.lookAt( _matrixPosition );\n            shadowCamera.updateMatrixWorld();\n\n            shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n            if ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;\n            if ( light.shadowCameraVisible ) light.cameraHelper.update();\n\n            // compute shadow matrix\n\n            shadowMatrix.set( 0.5, 0.0, 0.0, 0.5,\n                0.0, 0.5, 0.0, 0.5,\n                0.0, 0.0, 0.5, 0.5,\n                0.0, 0.0, 0.0, 1.0 );\n\n            shadowMatrix.multiply( shadowCamera.projectionMatrix );\n            shadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n            // update camera matrices and frustum\n\n            _projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n            _frustum.setFromMatrix( _projScreenMatrix );\n\n            // render shadow map\n\n            _renderer.setRenderTarget( shadowMap );\n            _renderer.clear();\n\n            // set object matrices & frustum culling\n\n            renderList = scene.__webglObjects;\n\n            for ( j = 0, jl = renderList.length; j < jl; j ++ ) {\n\n                webglObject = renderList[ j ];\n                object = webglObject.object;\n\n                webglObject.render = false;\n\n                if ( object.visible && object.castShadow ) {\n\n                    if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\n\n                        object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n                        webglObject.render = true;\n\n                    }\n\n                }\n\n            }\n\n            // render regular objects\n\n            var objectMaterial, useMorphing, useSkinning;\n\n            for ( j = 0, jl = renderList.length; j < jl; j ++ ) {\n\n                webglObject = renderList[ j ];\n\n                if ( webglObject.render ) {\n\n                    object = webglObject.object;\n                    buffer = webglObject.buffer;\n\n                    // culling is overriden globally for all objects\n                    // while rendering depth map\n\n                    // need to deal with MeshFaceMaterial somehow\n                    // in that case just use the first of material.materials for now\n                    // (proper solution would require to break objects by materials\n                    //  similarly to regular rendering and then set corresponding\n                    //  depth materials per each chunk instead of just once per object)\n\n                    objectMaterial = getObjectMaterial( object );\n\n                    useMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\n                    useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\n\n                    if ( object.customDepthMaterial ) {\n\n                        material = object.customDepthMaterial;\n\n                    } else if ( useSkinning ) {\n\n                        material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\n\n                    } else if ( useMorphing ) {\n\n                        material = _depthMaterialMorph;\n\n                    } else {\n\n                        material = _depthMaterial;\n\n                    }\n\n                    if ( buffer instanceof THREE.BufferGeometry ) {\n\n                        _renderer.renderBufferDirect( shadowCamera, scene.__lights, fog, material, buffer, object );\n\n                    } else {\n\n                        _renderer.renderBuffer( shadowCamera, scene.__lights, fog, material, buffer, object );\n\n                    }\n\n                }\n\n            }\n\n            // set matrices and render immediate objects\n\n            renderList = scene.__webglObjectsImmediate;\n\n            for ( j = 0, jl = renderList.length; j < jl; j ++ ) {\n\n                webglObject = renderList[ j ];\n                object = webglObject.object;\n\n                if ( object.visible && object.castShadow ) {\n\n                    object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n                    _renderer.renderImmediateObject( shadowCamera, scene.__lights, fog, _depthMaterial, object );\n\n                }\n\n            }\n\n        }\n\n        // restore GL state\n\n        var clearColor = _renderer.getClearColor(),\n            clearAlpha = _renderer.getClearAlpha();\n\n        _gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\n        _gl.enable( _gl.BLEND );\n\n        if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\n\n            _gl.cullFace( _gl.BACK );\n\n        }\n\n    };\n\n    function createVirtualLight( light, cascade ) {\n\n        var virtualLight = new THREE.DirectionalLight();\n\n        virtualLight.isVirtual = true;\n\n        virtualLight.onlyShadow = true;\n        virtualLight.castShadow = true;\n\n        virtualLight.shadowCameraNear = light.shadowCameraNear;\n        virtualLight.shadowCameraFar = light.shadowCameraFar;\n\n        virtualLight.shadowCameraLeft = light.shadowCameraLeft;\n        virtualLight.shadowCameraRight = light.shadowCameraRight;\n        virtualLight.shadowCameraBottom = light.shadowCameraBottom;\n        virtualLight.shadowCameraTop = light.shadowCameraTop;\n\n        virtualLight.shadowCameraVisible = light.shadowCameraVisible;\n\n        virtualLight.shadowDarkness = light.shadowDarkness;\n\n        virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\n        virtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];\n        virtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];\n\n        virtualLight.pointsWorld = [];\n        virtualLight.pointsFrustum = [];\n\n        var pointsWorld = virtualLight.pointsWorld,\n            pointsFrustum = virtualLight.pointsFrustum;\n\n        for ( var i = 0; i < 8; i ++ ) {\n\n            pointsWorld[ i ] = new THREE.Vector3();\n            pointsFrustum[ i ] = new THREE.Vector3();\n\n        }\n\n        var nearZ = light.shadowCascadeNearZ[ cascade ];\n        var farZ = light.shadowCascadeFarZ[ cascade ];\n\n        pointsFrustum[ 0 ].set( -1, -1, nearZ );\n        pointsFrustum[ 1 ].set(  1, -1, nearZ );\n        pointsFrustum[ 2 ].set( -1,  1, nearZ );\n        pointsFrustum[ 3 ].set(  1,  1, nearZ );\n\n        pointsFrustum[ 4 ].set( -1, -1, farZ );\n        pointsFrustum[ 5 ].set(  1, -1, farZ );\n        pointsFrustum[ 6 ].set( -1,  1, farZ );\n        pointsFrustum[ 7 ].set(  1,  1, farZ );\n\n        return virtualLight;\n\n    }\n\n    // Synchronize virtual light with the original light\n\n    function updateVirtualLight( light, cascade ) {\n\n        var virtualLight = light.shadowCascadeArray[ cascade ];\n\n        virtualLight.position.copy( light.position );\n        virtualLight.target.position.copy( light.target.position );\n        virtualLight.lookAt( virtualLight.target );\n\n        virtualLight.shadowCameraVisible = light.shadowCameraVisible;\n        virtualLight.shadowDarkness = light.shadowDarkness;\n\n        virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\n\n        var nearZ = light.shadowCascadeNearZ[ cascade ];\n        var farZ = light.shadowCascadeFarZ[ cascade ];\n\n        var pointsFrustum = virtualLight.pointsFrustum;\n\n        pointsFrustum[ 0 ].z = nearZ;\n        pointsFrustum[ 1 ].z = nearZ;\n        pointsFrustum[ 2 ].z = nearZ;\n        pointsFrustum[ 3 ].z = nearZ;\n\n        pointsFrustum[ 4 ].z = farZ;\n        pointsFrustum[ 5 ].z = farZ;\n        pointsFrustum[ 6 ].z = farZ;\n        pointsFrustum[ 7 ].z = farZ;\n\n    }\n\n    // Fit shadow camera's ortho frustum to camera frustum\n\n    function updateShadowCamera( camera, light ) {\n\n        var shadowCamera = light.shadowCamera,\n            pointsFrustum = light.pointsFrustum,\n            pointsWorld = light.pointsWorld;\n\n        _min.set( Infinity, Infinity, Infinity );\n        _max.set( -Infinity, -Infinity, -Infinity );\n\n        for ( var i = 0; i < 8; i ++ ) {\n\n            var p = pointsWorld[ i ];\n\n            p.copy( pointsFrustum[ i ] );\n            THREE.ShadowMapPlugin.__projector.unprojectVector( p, camera );\n\n            p.applyMatrix4( shadowCamera.matrixWorldInverse );\n\n            if ( p.x < _min.x ) _min.x = p.x;\n            if ( p.x > _max.x ) _max.x = p.x;\n\n            if ( p.y < _min.y ) _min.y = p.y;\n            if ( p.y > _max.y ) _max.y = p.y;\n\n            if ( p.z < _min.z ) _min.z = p.z;\n            if ( p.z > _max.z ) _max.z = p.z;\n\n        }\n\n        shadowCamera.left = _min.x;\n        shadowCamera.right = _max.x;\n        shadowCamera.top = _max.y;\n        shadowCamera.bottom = _min.y;\n\n        // can't really fit near/far\n        //shadowCamera.near = _min.z;\n        //shadowCamera.far = _max.z;\n\n        shadowCamera.updateProjectionMatrix();\n\n    }\n\n    // For the moment just ignore objects that have multiple materials with different animation methods\n    // Only the first material will be taken into account for deciding which depth material to use for shadow maps\n\n    function getObjectMaterial( object ) {\n\n        return object.material instanceof THREE.MeshFaceMaterial\n            ? object.material.materials[ 0 ]\n            : object.material;\n\n    };\n\n};\n\nTHREE.ShadowMapPlugin.__projector = new THREE.Projector();\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpritePlugin = function () {\n\n    var _gl, _renderer, _precision, _sprite = {};\n\n    this.init = function ( renderer ) {\n\n        _gl = renderer.context;\n        _renderer = renderer;\n\n        _precision = renderer.getPrecision();\n\n        _sprite.vertices = new Float32Array( 8 + 8 );\n        _sprite.faces    = new Uint16Array( 6 );\n\n        var i = 0;\n\n        _sprite.vertices[ i++ ] = -0.5; _sprite.vertices[ i++ ] = -0.5;\t// vertex 0\n        _sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 0;\t// uv 0\n\n        _sprite.vertices[ i++ ] = 0.5;  _sprite.vertices[ i++ ] = -0.5;\t// vertex 1\n        _sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 0;\t// uv 1\n\n        _sprite.vertices[ i++ ] = 0.5;  _sprite.vertices[ i++ ] = 0.5;\t// vertex 2\n        _sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;\t// uv 2\n\n        _sprite.vertices[ i++ ] = -0.5; _sprite.vertices[ i++ ] = 0.5;\t// vertex 3\n        _sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 1;\t// uv 3\n\n        i = 0;\n\n        _sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 1; _sprite.faces[ i++ ] = 2;\n        _sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 2; _sprite.faces[ i++ ] = 3;\n\n        _sprite.vertexBuffer  = _gl.createBuffer();\n        _sprite.elementBuffer = _gl.createBuffer();\n\n        _gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );\n        _gl.bufferData( _gl.ARRAY_BUFFER, _sprite.vertices, _gl.STATIC_DRAW );\n\n        _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );\n        _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _sprite.faces, _gl.STATIC_DRAW );\n\n        _sprite.program = createProgram( THREE.ShaderSprite[ \"sprite\" ], _precision );\n\n        _sprite.attributes = {};\n        _sprite.uniforms = {};\n\n        _sprite.attributes.position           = _gl.getAttribLocation ( _sprite.program, \"position\" );\n        _sprite.attributes.uv                 = _gl.getAttribLocation ( _sprite.program, \"uv\" );\n\n        _sprite.uniforms.uvOffset             = _gl.getUniformLocation( _sprite.program, \"uvOffset\" );\n        _sprite.uniforms.uvScale              = _gl.getUniformLocation( _sprite.program, \"uvScale\" );\n\n        _sprite.uniforms.rotation             = _gl.getUniformLocation( _sprite.program, \"rotation\" );\n        _sprite.uniforms.scale                = _gl.getUniformLocation( _sprite.program, \"scale\" );\n        _sprite.uniforms.alignment            = _gl.getUniformLocation( _sprite.program, \"alignment\" );\n        _sprite.uniforms.halfViewport         = _gl.getUniformLocation( _sprite.program, \"halfViewport\" );\n\n        _sprite.uniforms.color                = _gl.getUniformLocation( _sprite.program, \"color\" );\n        _sprite.uniforms.map                  = _gl.getUniformLocation( _sprite.program, \"map\" );\n        _sprite.uniforms.opacity              = _gl.getUniformLocation( _sprite.program, \"opacity\" );\n\n        _sprite.uniforms.useScreenCoordinates = _gl.getUniformLocation( _sprite.program, \"useScreenCoordinates\" );\n        _sprite.uniforms.sizeAttenuation   \t  = _gl.getUniformLocation( _sprite.program, \"sizeAttenuation\" );\n        _sprite.uniforms.screenPosition    \t  = _gl.getUniformLocation( _sprite.program, \"screenPosition\" );\n        _sprite.uniforms.modelViewMatrix      = _gl.getUniformLocation( _sprite.program, \"modelViewMatrix\" );\n        _sprite.uniforms.projectionMatrix     = _gl.getUniformLocation( _sprite.program, \"projectionMatrix\" );\n\n        _sprite.uniforms.fogType \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogType\" );\n        _sprite.uniforms.fogDensity \t\t  = _gl.getUniformLocation( _sprite.program, \"fogDensity\" );\n        _sprite.uniforms.fogNear \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogNear\" );\n        _sprite.uniforms.fogFar \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogFar\" );\n        _sprite.uniforms.fogColor \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogColor\" );\n\n        _sprite.uniforms.alphaTest \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"alphaTest\" );\n\n    };\n\n    this.render = function ( scene, camera, viewportWidth, viewportHeight ) {\n\n        var sprites = scene.__webglSprites,\n            nSprites = sprites.length;\n\n        if ( ! nSprites ) return;\n\n        var attributes = _sprite.attributes,\n            uniforms = _sprite.uniforms;\n\n        var halfViewportWidth = viewportWidth * 0.5,\n            halfViewportHeight = viewportHeight * 0.5;\n\n        // setup gl\n\n        _gl.useProgram( _sprite.program );\n\n        _gl.enableVertexAttribArray( attributes.position );\n        _gl.enableVertexAttribArray( attributes.uv );\n\n        _gl.disable( _gl.CULL_FACE );\n        _gl.enable( _gl.BLEND );\n\n        _gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );\n        _gl.vertexAttribPointer( attributes.position, 2, _gl.FLOAT, false, 2 * 8, 0 );\n        _gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );\n\n        _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );\n\n        _gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n        _gl.activeTexture( _gl.TEXTURE0 );\n        _gl.uniform1i( uniforms.map, 0 );\n\n        var oldFogType = 0;\n        var sceneFogType = 0;\n        var fog = scene.fog;\n\n        if ( fog ) {\n\n            _gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n            if ( fog instanceof THREE.Fog ) {\n\n                _gl.uniform1f( uniforms.fogNear, fog.near );\n                _gl.uniform1f( uniforms.fogFar, fog.far );\n\n                _gl.uniform1i( uniforms.fogType, 1 );\n                oldFogType = 1;\n                sceneFogType = 1;\n\n            } else if ( fog instanceof THREE.FogExp2 ) {\n\n                _gl.uniform1f( uniforms.fogDensity, fog.density );\n\n                _gl.uniform1i( uniforms.fogType, 2 );\n                oldFogType = 2;\n                sceneFogType = 2;\n\n            }\n\n        } else {\n\n            _gl.uniform1i( uniforms.fogType, 0 );\n            oldFogType = 0;\n            sceneFogType = 0;\n\n        }\n\n\n        // update positions and sort\n\n        var i, sprite, material, screenPosition, fogType, scale = [];\n\n        for( i = 0; i < nSprites; i ++ ) {\n\n            sprite = sprites[ i ];\n            material = sprite.material;\n\n            if ( ! sprite.visible || material.opacity === 0 ) continue;\n\n            if ( ! material.useScreenCoordinates ) {\n\n                sprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n                sprite.z = - sprite._modelViewMatrix.elements[ 14 ];\n\n            } else {\n\n                sprite.z = - sprite.position.z;\n\n            }\n\n        }\n\n        sprites.sort( painterSortStable );\n\n        // render all sprites\n\n        for( i = 0; i < nSprites; i ++ ) {\n\n            sprite = sprites[ i ];\n            material = sprite.material;\n\n            if ( ! sprite.visible || material.opacity === 0 ) continue;\n\n            if ( material.map && material.map.image && material.map.image.width ) {\n\n                _gl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\n                if ( material.useScreenCoordinates === true ) {\n\n                    _gl.uniform1i( uniforms.useScreenCoordinates, 1 );\n                    _gl.uniform3f(\n                        uniforms.screenPosition,\n                        ( ( sprite.position.x * _renderer.devicePixelRatio ) - halfViewportWidth  ) / halfViewportWidth,\n                        ( halfViewportHeight - ( sprite.position.y * _renderer.devicePixelRatio ) ) / halfViewportHeight,\n                        Math.max( 0, Math.min( 1, sprite.position.z ) )\n                    );\n\n                    scale[ 0 ] = _renderer.devicePixelRatio * sprite.scale.x;\n                    scale[ 1 ] = _renderer.devicePixelRatio * sprite.scale.y;\n\n                } else {\n\n                    _gl.uniform1i( uniforms.useScreenCoordinates, 0 );\n                    _gl.uniform1i( uniforms.sizeAttenuation, material.sizeAttenuation ? 1 : 0 );\n                    _gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );\n\n                    scale[ 0 ] = sprite.scale.x;\n                    scale[ 1 ] = sprite.scale.y;\n\n                }\n\n                if ( scene.fog && material.fog ) {\n\n                    fogType = sceneFogType;\n\n                } else {\n\n                    fogType = 0;\n\n                }\n\n                if ( oldFogType !== fogType ) {\n\n                    _gl.uniform1i( uniforms.fogType, fogType );\n                    oldFogType = fogType;\n\n                }\n\n                _gl.uniform2f( uniforms.uvScale, material.uvScale.x, material.uvScale.y );\n                _gl.uniform2f( uniforms.uvOffset, material.uvOffset.x, material.uvOffset.y );\n                _gl.uniform2f( uniforms.alignment, material.alignment.x, material.alignment.y );\n\n                _gl.uniform1f( uniforms.opacity, material.opacity );\n                _gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n                _gl.uniform1f( uniforms.rotation, sprite.rotation );\n                _gl.uniform2fv( uniforms.scale, scale );\n                _gl.uniform2f( uniforms.halfViewport, halfViewportWidth, halfViewportHeight );\n\n                _renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n                _renderer.setDepthTest( material.depthTest );\n                _renderer.setDepthWrite( material.depthWrite );\n                _renderer.setTexture( material.map, 0 );\n\n                _gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\n\n            }\n\n        }\n\n        // restore gl\n\n        _gl.enable( _gl.CULL_FACE );\n\n    };\n\n    function createProgram ( shader, precision ) {\n\n        var program = _gl.createProgram();\n\n        var fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );\n        var vertexShader = _gl.createShader( _gl.VERTEX_SHADER );\n\n        var prefix = \"precision \" + precision + \" float;\\n\";\n\n        _gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n        _gl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n        _gl.compileShader( fragmentShader );\n        _gl.compileShader( vertexShader );\n\n        _gl.attachShader( program, fragmentShader );\n        _gl.attachShader( program, vertexShader );\n\n        _gl.linkProgram( program );\n\n        return program;\n\n    };\n\n    function painterSortStable ( a, b ) {\n\n        if ( a.z !== b.z ) {\n\n            return b.z - a.z;\n\n        } else {\n\n            return b.id - a.id;\n\n        }\n\n    };\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DepthPassPlugin = function () {\n\n    this.enabled = false;\n    this.renderTarget = null;\n\n    var _gl,\n        _renderer,\n        _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\n\n        _frustum = new THREE.Frustum(),\n        _projScreenMatrix = new THREE.Matrix4();\n\n    this.init = function ( renderer ) {\n\n        _gl = renderer.context;\n        _renderer = renderer;\n\n        var depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\n        var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\n\n        _depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );\n        _depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );\n        _depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );\n        _depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );\n\n        _depthMaterial._shadowPass = true;\n        _depthMaterialMorph._shadowPass = true;\n        _depthMaterialSkin._shadowPass = true;\n        _depthMaterialMorphSkin._shadowPass = true;\n\n    };\n\n    this.render = function ( scene, camera ) {\n\n        if ( ! this.enabled ) return;\n\n        this.update( scene, camera );\n\n    };\n\n    this.update = function ( scene, camera ) {\n\n        var i, il, j, jl, n,\n\n            program, buffer, material,\n            webglObject, object, light,\n            renderList,\n\n            fog = null;\n\n        // set GL state for depth map\n\n        _gl.clearColor( 1, 1, 1, 1 );\n        _gl.disable( _gl.BLEND );\n\n        _renderer.setDepthTest( true );\n\n        // update scene\n\n        if ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n        // update camera matrices and frustum\n\n        camera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n        _projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n        _frustum.setFromMatrix( _projScreenMatrix );\n\n        // render depth map\n\n        _renderer.setRenderTarget( this.renderTarget );\n        _renderer.clear();\n\n        // set object matrices & frustum culling\n\n        renderList = scene.__webglObjects;\n\n        for ( j = 0, jl = renderList.length; j < jl; j ++ ) {\n\n            webglObject = renderList[ j ];\n            object = webglObject.object;\n\n            webglObject.render = false;\n\n            if ( object.visible ) {\n\n                if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\n\n                    object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\n                    webglObject.render = true;\n\n                }\n\n            }\n\n        }\n\n        // render regular objects\n\n        var objectMaterial, useMorphing, useSkinning;\n\n        for ( j = 0, jl = renderList.length; j < jl; j ++ ) {\n\n            webglObject = renderList[ j ];\n\n            if ( webglObject.render ) {\n\n                object = webglObject.object;\n                buffer = webglObject.buffer;\n\n                // todo: create proper depth material for particles\n\n                if ( object instanceof THREE.ParticleSystem && !object.customDepthMaterial ) continue;\n\n                objectMaterial = getObjectMaterial( object );\n\n                if ( objectMaterial ) _renderer.setMaterialFaces( object.material );\n\n                useMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\n                useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\n\n                if ( object.customDepthMaterial ) {\n\n                    material = object.customDepthMaterial;\n\n                } else if ( useSkinning ) {\n\n                    material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\n\n                } else if ( useMorphing ) {\n\n                    material = _depthMaterialMorph;\n\n                } else {\n\n                    material = _depthMaterial;\n\n                }\n\n                if ( buffer instanceof THREE.BufferGeometry ) {\n\n                    _renderer.renderBufferDirect( camera, scene.__lights, fog, material, buffer, object );\n\n                } else {\n\n                    _renderer.renderBuffer( camera, scene.__lights, fog, material, buffer, object );\n\n                }\n\n            }\n\n        }\n\n        // set matrices and render immediate objects\n\n        renderList = scene.__webglObjectsImmediate;\n\n        for ( j = 0, jl = renderList.length; j < jl; j ++ ) {\n\n            webglObject = renderList[ j ];\n            object = webglObject.object;\n\n            if ( object.visible ) {\n\n                object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\n                _renderer.renderImmediateObject( camera, scene.__lights, fog, _depthMaterial, object );\n\n            }\n\n        }\n\n        // restore GL state\n\n        var clearColor = _renderer.getClearColor(),\n            clearAlpha = _renderer.getClearAlpha();\n\n        _gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\n        _gl.enable( _gl.BLEND );\n\n    };\n\n    // For the moment just ignore objects that have multiple materials with different animation methods\n    // Only the first material will be taken into account for deciding which depth material to use\n\n    function getObjectMaterial( object ) {\n\n        return object.material instanceof THREE.MeshFaceMaterial\n            ? object.material.materials[ 0 ]\n            : object.material;\n\n    };\n\n};\n\n\n/**\n * @author mikael emtinger / http://gomo.se/\n */\n\nTHREE.ShaderFlares = {\n\n    'lensFlareVertexTexture': {\n\n        vertexShader: [\n\n            \"uniform lowp int renderType;\",\n\n            \"uniform vec3 screenPosition;\",\n            \"uniform vec2 scale;\",\n            \"uniform float rotation;\",\n\n            \"uniform sampler2D occlusionMap;\",\n\n            \"attribute vec2 position;\",\n            \"attribute vec2 uv;\",\n\n            \"varying vec2 vUV;\",\n            \"varying float vVisibility;\",\n\n            \"void main() {\",\n\n            \"vUV = uv;\",\n\n            \"vec2 pos = position;\",\n\n            \"if( renderType == 2 ) {\",\n\n            \"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n            \"vVisibility =        visibility.r / 9.0;\",\n            \"vVisibility *= 1.0 - visibility.g / 9.0;\",\n            \"vVisibility *=       visibility.b / 9.0;\",\n            \"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n            \"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n            \"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n            \"}\",\n\n            \"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n            \"}\"\n\n        ].join( \"\\n\" ),\n\n        fragmentShader: [\n\n            \"uniform lowp int renderType;\",\n\n            \"uniform sampler2D map;\",\n            \"uniform float opacity;\",\n            \"uniform vec3 color;\",\n\n            \"varying vec2 vUV;\",\n            \"varying float vVisibility;\",\n\n            \"void main() {\",\n\n            // pink square\n\n            \"if( renderType == 0 ) {\",\n\n            \"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n            // restore\n\n            \"} else if( renderType == 1 ) {\",\n\n            \"gl_FragColor = texture2D( map, vUV );\",\n\n            // flare\n\n            \"} else {\",\n\n            \"vec4 texture = texture2D( map, vUV );\",\n            \"texture.a *= opacity * vVisibility;\",\n            \"gl_FragColor = texture;\",\n            \"gl_FragColor.rgb *= color;\",\n\n            \"}\",\n\n            \"}\"\n        ].join( \"\\n\" )\n\n    },\n\n\n    'lensFlare': {\n\n        vertexShader: [\n\n            \"uniform lowp int renderType;\",\n\n            \"uniform vec3 screenPosition;\",\n            \"uniform vec2 scale;\",\n            \"uniform float rotation;\",\n\n            \"attribute vec2 position;\",\n            \"attribute vec2 uv;\",\n\n            \"varying vec2 vUV;\",\n\n            \"void main() {\",\n\n            \"vUV = uv;\",\n\n            \"vec2 pos = position;\",\n\n            \"if( renderType == 2 ) {\",\n\n            \"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n            \"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n            \"}\",\n\n            \"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n            \"}\"\n\n        ].join( \"\\n\" ),\n\n        fragmentShader: [\n\n            \"precision mediump float;\",\n\n            \"uniform lowp int renderType;\",\n\n            \"uniform sampler2D map;\",\n            \"uniform sampler2D occlusionMap;\",\n            \"uniform float opacity;\",\n            \"uniform vec3 color;\",\n\n            \"varying vec2 vUV;\",\n\n            \"void main() {\",\n\n            // pink square\n\n            \"if( renderType == 0 ) {\",\n\n            \"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\n\n            // restore\n\n            \"} else if( renderType == 1 ) {\",\n\n            \"gl_FragColor = texture2D( map, vUV );\",\n\n            // flare\n\n            \"} else {\",\n\n            \"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\",\n            \"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\n            \"visibility = ( 1.0 - visibility / 4.0 );\",\n\n            \"vec4 texture = texture2D( map, vUV );\",\n            \"texture.a *= opacity * visibility;\",\n            \"gl_FragColor = texture;\",\n            \"gl_FragColor.rgb *= color;\",\n\n            \"}\",\n\n            \"}\"\n\n        ].join( \"\\n\" )\n\n    }\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n *\n */\n\nTHREE.ShaderSprite = {\n\n    'sprite': {\n\n        vertexShader: [\n\n            \"uniform int useScreenCoordinates;\",\n            \"uniform int sizeAttenuation;\",\n            \"uniform vec3 screenPosition;\",\n            \"uniform mat4 modelViewMatrix;\",\n            \"uniform mat4 projectionMatrix;\",\n            \"uniform float rotation;\",\n            \"uniform vec2 scale;\",\n            \"uniform vec2 alignment;\",\n            \"uniform vec2 uvOffset;\",\n            \"uniform vec2 uvScale;\",\n            \"uniform vec2 halfViewport;\",\n\n            \"attribute vec2 position;\",\n            \"attribute vec2 uv;\",\n\n            \"varying vec2 vUV;\",\n\n            \"void main() {\",\n\n            \"vUV = uvOffset + uv * uvScale;\",\n\n            \"vec2 alignedPosition = ( position + alignment ) * scale;\",\n\n            \"vec2 rotatedPosition;\",\n            \"rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\",\n            \"rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\",\n\n            \"vec4 finalPosition;\",\n\n            \"if( useScreenCoordinates != 0 ) {\",\n\n            \"finalPosition = vec4( screenPosition.xy + ( rotatedPosition / halfViewport ), screenPosition.z, 1.0 );\",\n\n            \"} else {\",\n\n            \"finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\",\n            \"finalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\",\n            \"finalPosition = projectionMatrix * finalPosition;\",\n\n            \"}\",\n\n            \"gl_Position = finalPosition;\",\n\n            \"}\"\n\n        ].join( \"\\n\" ),\n\n        fragmentShader: [\n\n            \"uniform vec3 color;\",\n            \"uniform sampler2D map;\",\n            \"uniform float opacity;\",\n\n            \"uniform int fogType;\",\n            \"uniform vec3 fogColor;\",\n            \"uniform float fogDensity;\",\n            \"uniform float fogNear;\",\n            \"uniform float fogFar;\",\n            \"uniform float alphaTest;\",\n\n            \"varying vec2 vUV;\",\n\n            \"void main() {\",\n\n            \"vec4 texture = texture2D( map, vUV );\",\n\n            \"if ( texture.a < alphaTest ) discard;\",\n\n            \"gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\",\n\n            \"if ( fogType > 0 ) {\",\n\n            \"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\n            \"float fogFactor = 0.0;\",\n\n            \"if ( fogType == 1 ) {\",\n\n            \"fogFactor = smoothstep( fogNear, fogFar, depth );\",\n\n            \"} else {\",\n\n            \"const float LOG2 = 1.442695;\",\n            \"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\n            \"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\n\n            \"}\",\n\n            \"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\n\n            \"}\",\n\n            \"}\"\n\n        ].join( \"\\n\" )\n\n    }\n\n};"]}